            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'button_color',
            'Kolor Przycisku',
            array($this, 'color_field_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'modal_color',
            'Kolor Modala',
            array($this, 'modal_color_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'max_duration',
            'Maksymalny czas nagrania (sekundy)',
            array($this, 'max_duration_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
    }
    
    public function sanitize_settings($input) {
        $input['notification_email'] = sanitize_email($input['notification_email']);
        $input['button_color'] = sanitize_hex_color($input['button_color']);
        $input['modal_color'] = sanitize_hex_color($input['modal_color']);
        $input['max_duration'] = absint($input['max_duration']);
        return $input;
    }
    
    public function settings_section_text() {
        echo '<p>Konfiguracja funkcji nagrywania wiadomości dla produktów</p>';
    }
    
    public function email_field_render() {
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        ?>
        <input type='email' name='wc_product_recording_settings[notification_email]' value='<?php echo esc_attr($email); ?>' class='regular-text'>
        <?php
    }
    
    public function color_field_render() {
        $color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
        ?>
        <input type='color' name='wc_product_recording_settings[button_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function modal_color_render() {
        $color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
        ?>
        <input type='color' name='wc_product_recording_settings[modal_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function max_duration_render() {
        $duration = isset($this->options['max_duration']) ? $this->options['max_duration'] : 120;
        ?>
        <input type='number' name='wc_product_recording_settings[max_duration]' value='<?php echo esc_attr($duration); ?>' min='10' max='600'>
        <?php
    }
    
    public function add_admin_menu() {
        add_options_page(
            'Ustawienia Nagrywania Produktów',
            'Nagrywanie Produktów',
            'manage_options',
            'wc-product-recording',
            array($this, 'admin_page_content')
        );
    }
    
    public function admin_page_content() {
        ?>
        <div class="wrap">
            <h1>Ustawienia Nagrywania Produktów</h1>
            <form method="post" action="options.php">
                <?php
                settings_fields('wc_product_recording_options');
                do_settings_sections('wc-product-recording');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }
    
    public function enqueue_scripts() {
        if (is_cart() || is_checkout()) {
            $button_color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
            $modal_color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
            
            wp_enqueue_style(
                'wc-recording-style',
                plugin_dir_url(__FILE__) . 'assets/css/recording.css',
                array(),
                '2.0'
            );
            
            // Dynamic CSS with settings
            $custom_css = "
                .wc-record-button {
                    background-color: {$button_color} !important;
                    border-color: {$button_color} !important;
                }
                .wc-recording-modal {
                    background: {$modal_color} !important;
                }
                .wc-recording-modal-header {
                    background: {$button_color} !important;
                }
            ";
            wp_add_inline_style('wc-recording-style', $custom_css);
            
            wp_enqueue_script(
                'recordrtc',
                'https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.min.js',
                array(),
                '5.6.2',
                true
            );
            
            wp_enqueue_script(
                'wc-product-recording',
                plugin_dir_url(__FILE__) . 'assets/js/recording.js',
                array('jquery', 'recordrtc'),
                '2.0',
                true
            );
            
            wp_localize_script('wc-product-recording', 'wc_recording_params', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'recording_nonce' => wp_create_nonce('save_recording_nonce'),
                'warning_text' => __('Prosimy o ciszę w tle podczas nagrywania wiadomości.', 'woocommerce'),
                'recording_text' => __('Nagrywanie w toku...', 'woocommerce'),
                'stop_text' => __('Zatrzymaj nagrywanie', 'woocommerce'),
                'start_audio_text' => __('Nagraj wiadomość audio', 'woocommerce'),
                'start_video_text' => __('Nagraj wiadomość wideo', 'woocommerce'),
                'play_text' => __('Odtwórz nagranie', 'woocommerce'),
                'delete_text' => __('Usuń nagranie', 'woocommerce'),
                'submit_text' => __('Zapisz nagranie', 'woocommerce'),
                'audio_placeholder' => __('Brak nagrania audio', 'woocommerce'),
                'video_placeholder' => __('Brak nagrania wideo', 'woocommerce'),
                'max_time' => isset($this->options['max_duration']) ? $this->options['max_duration'] : 120,
                'audio_only' => __('Tylko audio', 'woocommerce'),
                'video_with_audio' => __('Wideo z audio', 'woocommerce')
            ));
        }
    }
    
    public function add_recording_button($product_name, $cart_item, $cart_item_key) {
        if (is_cart() || is_checkout()) {
            $product_id = $cart_item['product_id'];
            $recording_key = 'recording_' . md5($cart_item_key);
            
            $button_html = '<div class="wc-recording-container">';
            $button_html .= '<button type="button" class="button wc-record-button" ';
            $button_html .= 'data-product-id="' . esc_attr($product_id) . '" ';
            $button_html .= 'data-cart-key="' . esc_attr($cart_item_key) . '" ';
            $button_html .= 'data-recording-key="' . esc_attr($recording_key) . '">';
            $button_html .= __('Nagraj wiadomość', 'woocommerce') . '</button>';
            
            // Add hidden field for the recording ID
            $recording_id = isset($cart_item['recording_id']) ? $cart_item['recording_id'] : '';
            $button_html .= '<input type="hidden" name="cart_recording[' . esc_attr($cart_item_key) . ']" ';
            $button_html .= 'id="recording_' . esc_attr($cart_item_key) . '" value="' . esc_attr($recording_id) . '">';
            
            $button_html .= '</div>';
            
            return $product_name . $button_html;
        }
        
        return $product_name;
    }
    
    public function recording_modal() {
        if (is_cart() || is_checkout()) {
            ?>
            <div id="wc-recording-modal" class="wc-recording-modal">
                <div class="wc-recording-modal-header">
                    <h3><?php _e('Nagraj wiadomość', 'woocommerce'); ?></h3>
                    <span class="wc-recording-close">&times;</span>
                </div>
                <div class="wc-recording-modal-body">
                    <div id="wc-recording-alert" class="woocommerce-message"></div>
                    
                    <div class="wc-recording-type-selector">
                        <button type="button" id="wc-start-audio" class="button">
                            <?php _e('Nagraj wiadomość audio', 'woocommerce'); ?>
                        </button>
                        <button type="button" id="wc-start-video" class="button">
                            <?php _e('Nagraj wiadomość wideo', 'woocommerce'); ?>
                        </button>
                    </div>
                    
                    <div id="wc-recording-controls" style="display:none;">
                        <button type="button" id="wc-stop-recording" class="button">
                            <?php _e('Zatrzymaj nagrywanie', 'woocommerce'); ?>
                        </button>
                        <div id="wc-recording-timer">00:00</div>
                    </div>
                    
                    <div id="wc-recording-preview" style="display:none;">
                        <h4><?php _e('Podgląd nagrania', 'woocommerce'); ?></h4>
                        <audio id="wc-audio-preview" controls style="width:100%;"></audio>
                        <video id="wc-video-preview" controls style="width:100%; max-height:300px; display:none;"></video>
                        
                        <div class="wc-recording-actions">
                            <button type="button" id="wc-submit-recording" class="button button-primary">
                                <?php _e('Zapisz nagranie', 'woocommerce'); ?>
                            </button>
                            <button type="button" id="wc-delete-recording" class="button">
                                <?php _e('Usuń nagranie', 'woocommerce'); ?>
                            </button>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="wc-current-product-id" value="">
                <input type="hidden" id="wc-current-cart-key" value="">
                <input type="hidden" id="wc-current-recording-key" value="">
            </div>
            <div id="wc-recording-modal-overlay" class="wc-recording-modal-overlay"></div>
            <?php
        }
    }
    
    public function save_recording_data($item, $cart_item_key, $values, $order) {
        if (!empty($values['recording_id'])) {
            $item->add_meta_data('_recording_id', $values['recording_id'], true);
        }
    }
    
    public function save_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_FILES['recording']) || !isset($_POST['cart_key']) || !isset($_POST['product_id'])) {
            wp_send_json_error(__('Brak wymaganych danych.', 'woocommerce'));
        }
        
        $upload_dir = wp_upload_dir();
        $recording_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        
        if (!file_exists($recording_dir)) {
            wp_mkdir_p($recording_dir);
        }
        
        $file_name = sanitize_file_name('recording_' . $_POST['cart_key'] . '_' . uniqid() . '.webm');
        $file_path = $recording_dir . '/' . $file_name;
        
        if (move_uploaded_file($_FILES['recording']['tmp_name'], $file_path)) {
            $recording_id = uniqid('rec_');
            
            // Store recording info in cart item
            $cart = WC()->cart;
            $cart_item = $cart->get_cart_item($_POST['cart_key']);
            
            if ($cart_item) {
                $cart->cart_contents[$_POST['cart_key']]['recording_id'] = $recording_id;
                $cart->set_session();
            }
            
            wp_send_json_success(array(
                'recording_id' => $recording_id,
                'file_name' => $file_name,
                'file_path' => $file_path
            ));
        } else {
            wp_send_json_error(__('Błąd podczas zapisywania nagrania.', 'woocommerce'));
        }
    }
    
    public function get_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_POST['cart_key'])) {
            wp_send_json_error(__('Brak klucza koszyka.', 'woocommerce'));
        }
        
        $cart = WC()->cart;
        $cart_item = $cart->get_cart_item($_POST['cart_key']);
        
        if (!$cart_item || !isset($cart_item['recording_id'])) {
            wp_send_json_error(__('Brak nagrania dla tego produktu.', 'woocommerce'));
        }
        
        wp_send_json_success(array(
            'recording_id' => $cart_item['recording_id']
        ));
    }
    
    public function process_recordings($order_id) {
        $order = wc_get_order($order_id);
        $upload_dir = wp_upload_dir();
        $recordings_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        
        $attachments = array();
        $message = "Nowe zamówienie zawiera następujące nagrania:\n\n";
        $has_recordings = false;
        
        foreach ($order->get_items() as $item_id => $item) {
            $recording_id = $item->get_meta('_recording_id');
            
            if ($recording_id) {
                $has_recordings = true;
                $product_name = $item->get_name();
                $message .= "Produkt: {$product_name}\n";
                
                // Find the recording file
                $files = glob($recordings_dir . '/recording_*_' . $recording_id . '*.webm');
                
                if (!empty($files)) {
                    $old_path = $files[0];
                    $new_filename = sanitize_file_name(
                        'order_' . $order_id . 
                        '_item_' . $item_id . 
                        '_' . $recording_id . '.webm'
                    );
                    $new_path = $recordings_dir . '/' . $new_filename;
                    
                    if (rename($old_path, $new_path)) {
                        $attachments[] = $new_path;
                        $message .= "Nagranie: {$new_filename}\n\n";
                    }
                }
            }
        }
        
        if ($has_recordings) {
            $subject = sprintf(__('Nagrania do zamówienia #%s', 'woocommerce'), $order_id);
            $headers = array('Content-Type: text/plain; charset=UTF-8');
            
            wp_mail($email, $subject, $message, $headers, $attachments);
        }
    }
}

new WC_Product_Recording();
```

## 2. JavaScript (`assets/js/recording.js`)

```javascript
jQuery(document).ready(function($) {
    var mediaRecorder;
    var audioChunks = [];
    var videoChunks = [];
    var stream;
    var timerInterval;
    var recordingTime = 0;
    var currentCartKey = '';
    var currentProductId = '';
    var currentRecordingKey = '';
    var isAudioRecording = true;
    
    // Open modal when recording button is clicked
    $(document).on('click', '.wc-record-button', function() {
        currentCartKey = $(this).data('cart-key');
        currentProductId = $(this).data('product-id');
        currentRecordingKey = $(this).data('recording-key');
        
        $('#wc-current-product-id').val(currentProductId);
        $('#wc-current-cart-key').val(currentCartKey);
        $('#wc-current-recording-key').val(currentRecordingKey);
        
        // Check if there's already a recording
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: {
                action: 'get_product_recording',
                security: wc_recording_params.recording_nonce,
                cart_key: currentCartKey
            },
            success: function(response) {
                if (response.success && response.data.recording_id) {
                    $('#wc-recording-alert').text('Ten produkt ma już nagranie. Nowe nagranie zastąpi poprzednie.').show();
                } else {
                    $('#wc-recording-alert').text(wc_recording_params.warning_text).show();
                }
            }
        });
        
        $('#wc-recording-modal').show();
        $('#wc-recording-modal-overlay').show();
    });
    
    // Close modal
    $('.wc-recording-close, #wc-recording-modal-overlay').click(function() {
        stopRecording();
        $('#wc-recording-modal').hide();
        $('#wc-recording-modal-overlay').hide();
        resetRecordingUI();
    });
    
    // Start audio recording
    $('#wc-start-audio').click(function() {
        startRecording(true);
    });
    
    // Start video recording
    $('#wc-start-video').click(function() {
        startRecording(false);
    });
    
    // Stop recording
    $('#wc-stop-recording').click(function() {
        stopRecording();
    });
    
    // Submit recording
    $('#wc-submit-recording').click(function() {
        submitRecording();
    });
    
    // Delete recording
    $('#wc-delete-recording').click(function() {
        deleteRecording();
    });
    
    function startRecording(audioOnly) {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert('Twoja przeglądarka nie obsługuje nagrywania lub nie udzieliłaś/eś wymaganych uprawnień.');
            return;
        }
        
        isAudioRecording = audioOnly;
        
        // Hide type selector, show controls
        $('.wc-recording-type-selector').hide();
        $('#wc-recording-controls').show();
        $('#wc-recording-preview').hide();
        
        $('#wc-recording-alert').text(wc_recording_params.recording_text + ' ' + 
            (audioOnly ? wc_recording_params.audio_only : wc_recording_params.video_with_audio)).show();
        
        var constraints = {
            audio: true,
            video: !audioOnly
        };
        
        navigator.mediaDevices.getUserMedia(constraints)
            .then(function(s) {
                stream = s;
                
                if (audioOnly) {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'audio',
                        mimeType: 'audio/webm',
                        recorderType: RecordRTC.StereoAudioRecorder,
                        desiredSampRate: 44100,
                        numberOfAudioChannels: 1,
                        disableLogs: true,
                        audioBitsPerSecond: 128000 // Higher quality audio
                    });
                } else {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'video',
                        mimeType: 'video/webm;codecs=vp9',
                        disableLogs: true,
                        videoBitsPerSecond: 2500000,
                        audioBitsPerSecond: 128000
                    });
                }
                
                // Start timer
                recordingTime = 0;
                updateTimer();
                timerInterval = setInterval(function() {
                    recordingTime++;
                    updateTimer();
                    if (recordingTime >= wc_recording_params.max_time) {
                        stopRecording();
                    }
                }, 1000);
                
                mediaRecorder.startRecording();
            })
            .catch(function(err) {
                console.error('Error accessing media devices:', err);
                $('#wc-recording-alert').text('Błąd dostępu do mikrofonu/kamery: ' + err.message).show();
                resetRecordingUI();
            });
    }
    
    function updateTimer() {
        var minutes = Math.floor(recordingTime / 60);
        var seconds = recordingTime % 60;
        $('#wc-recording-timer').text(
            (minutes < 10 ? '0' + minutes : minutes) + ':' + 
            (seconds < 10 ? '0' + seconds : seconds)
        );
    }
    
    function stopRecording() {
        clearInterval(timerInterval);
        
        if (!mediaRecorder) return;
        
        mediaRecorder.stopRecording(function() {
            $('#wc-recording-alert').text('Nagranie zakończone. Możesz je odsłuchać/obejrzeć przed zapisem.').show();
            
            // Create preview
            var blob = mediaRecorder.getBlob();
            var url = URL.createObjectURL(blob);
            
            if (isAudioRecording) {
                $('#wc-audio-preview').attr('src', url).show();
                $('#wc-video-preview').hide();
            } else {
                $('#wc-video-preview').attr('src', url).show();
                $('#wc-audio-preview').hide();
            }
            
            $('#wc-recording-preview').show();
            
            // Stop all tracks
            if (stream) {
                stream.getTracks().forEach(function(track) {
                    track.stop();
                });
            }
        });
    }
    
    function submitRecording() {
        if (!mediaRecorder) {
            alert('Najpierw wykonaj nagranie');
            return;
        }
        
        var blob = mediaRecorder.getBlob();
        var formData = new FormData();
        formData.append('recording', blob, 'recording.webm');
        formData.append('action', 'save_product_recording');
        formData.append('security', wc_recording_params.recording_nonce);
        formData.append('cart_key', currentCartKey);
        formData.append('product_id', currentProductId);
        
        $('#wc-submit-recording').prop('disabled', true).text('Zapisywanie...');
        
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    $('#wc-recording-alert').text('Nagranie zostało zapisane do tego produktu.').show();
                    
                    // Update the hidden field in cart
                    $('#recording_' + currentCartKey).val(response.data.recording_id);
                    
                    // Close modal after 2 seconds
                    setTimeout(function() {
                        $('#wc-recording-modal').hide();
                        $('#wc-recording-modal-overlay').hide();
                        resetRecordingUI();
                    }, 2000);
                } else {
                    $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + response.data).show();
                    $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
                }
            },
            error: function(xhr, status, error) {
                $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + error).show();
                $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
            }
        });
    }
    
    function deleteRecording() {
        // Just reset the UI, actual file will be overwritten on new submission
        resetRecordingUI();
        $('#recording_' + currentCartKey).val('');
        $('#wc-recording-alert').text('Nagranie zostało usunięte. Możesz nagrać nową wiadomość.').show();
    }
    
    function resetRecordingUI() {
        $('.wc-recording-type-selector').show();
        $('#wc-recording-controls').hide();
        $('#wc-recording-preview').hide();
        $('#wc-recording-timer').text('00:00');
        $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
        
        if (mediaRecorder) {
            mediaRecorder = null;
        }
        
        if (stream) {
            stream.getTracks().forEach(function(track) {
                track.stop();
            });
            stream = null;
        }
        
        clearInterval(timerInterval);
    }
});
```

## 3. CSS (`assets/css/recording.css`)

```css
/* Modal styles */
.wc-recording-modal {
    display: none;
    position: fixed;
    z-index: 9999;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    max-width: 600px;
    border: 1px solid #ddd;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.wc-recording-modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9998;
}

.wc-recording-modal-header {
    padding: 15px;
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.wc-recording-modal-header h3 {
    margin: 0;
    font-size: 1.2em;
}

.wc-recording-close {
    font-size: 24px;
    cursor: pointer;
}

.wc-recording-modal-body {
    padding: 15px;
}

/* Button styles */
.wc-record-button {
    margin-top: 10px !important;
    display: inline-block !important;
}

.wc-recording-type-selector {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
}

.wc-recording-type-selector button {
    flex: 1;
}

/* Recording controls */
#wc-recording-controls {
    margin: 15px 0;
    display: flex;
    align-items: center;
    gap: 15px;
}

#wc-recording-timer {
    font-family: monospace;
    font-size: 1.2em;
}

/* Preview styles */
#wc-recording-preview {
    margin-top: 15px;
}

#wc-recording-preview h4 {
    margin-bottom: 10px;
}

#wc-audio-preview,
#wc-video-preview {
    margin-bottom: 15px;
    display: none;
}

.wc-recording-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
}

/* Alert styles */
#wc-recording-alert {
    padding: 10px;
    margin-bottom: 15px;
    display: none;
}

/* Responsive adjustments */
@media (max-width: 600px) {
    .wc-recording-type-selector {
        flex-direction: column;
    }
    
    #wc-recording-controls {
        flex-direction: column;
        align-items: flex-start;
    }
}
```

## Instrukcja instalacji:

1. Stwórz folder `/woocommerce-product-recording` w katalogu `/wp-content/plugins/`
2. Umieść w nim plik `woocommerce-product-recording.php` z pierwszym kodem
3. Stwórz strukturę folderów:
   ```
   /woocommerce-product-recording/
   ├── assets/
   │   ├── css/
   │   │   └── recording.css
   │   └── js/
   │       └── recording.js
   └── woocommerce-product-recording.php
   ```
4. Aktywuj wtyczkę w panelu WordPress

## Funkcjonalności:

1. **Panel sterowania**:
   - Ustawienie emaila odbiorcy
   - Wybór kolorów przycisków i modala
   - Ustawienie maksymalnego czasu nagrania

2. **Nagrywanie w koszyku**:
   - Przycisk "Nagraj wiadomość" przy każdym produkcie
   - Możliwość nagrania audio lub wideo
   - Podgląd przed zapisem
   - Timer pokazujący czas nagrania

3. **Przetwarzanie nagrań**:
   - Automatyczne wysyłanie na email po złożeniu zamówienia
   - Nazwy plików zawierają numer zamówienia, produktu i datę
   - Każdy produkt może mieć osobne nagranie

4. **Optymalizacja dźwięku**:
   - Wyższa jakość bitrate (128 kbps)
   - Monit o ciszę w tle przed nagraniem
   - Nagrywanie w formacie WebM dla lepszej kompresji

Wtyczka jest w pełni responsywna i dostosowuje się do różnych rozmiarów ekranu.
GPT-4o Mini
Aby poprawić wtyczkę WooCommerce do nagrywów (nagród), należy wziąć pod uwagę kilka kluczowych aspektów. Oto kilka kroków i wskazówek, które mogą pomóc w aktualizacji lub udoskonaleniu tej wtyczki:
1. Zrozumienie wymagań użytkowników:


Przeprowadź ankiety wśród użytkowników, aby zrozumieć, czego im brakuje w obecnej wersji.

Analizuj opinie wtyczki w repozytorium WordPress i na forach.


2. Dostosowanie funkcji nagród:


Umożliwienie użytkownikom łatwego przyznawania nagród za różnorodne działania, takie jak zakupy, recenzje, polecenia itp.

Wprowadzenie różnych poziomów nagród, które mogą być wyzwalane na podstawie punktów lub osiągnięć.


3. Integracja z systemem zarządzania klientami (CRM):


Umożliwienie synchronizacji danych z systemami CRM w celu lepszej analizy behawioralnej klientów.


4. Interfejs użytkownika:


Zadbaj o intuicyjny i estetyczny interfejs użytkownika, który ułatwi korzystanie z wtyczki.

Dodaj wizualne wskaźniki postępów, które pokazują, ile punktów zostało zdobytych i ile brakuje do nagrody.


5. Raportowanie i analityka:


Wprowadzenie zaawansowanych funkcji raportowania, aby administratorzy mogli analizować, jakie nagrody są najpopularniejsze, a jakie działania przynoszą najwięcej punktów.


6. Optymalizacja wydajności:


Upewnij się, że wtyczka działa płynnie nawet przy dużej liczbie użytkowników i transakcji.

Regularnie testuj wydajność i poprawiaj kod, aby zminimalizować czas ładowania.


7. Zgodność z innymi wtyczkami:


Upewnij się, że nowa wersja wtyczki jest zgodna z popularnymi wtyczkami WooCommerce i innymi najczęściej używanymi wtyczkami w ekosystemie WordPress.


8. Wsparcie i dokumentacja:


Utwórz obszerną dokumentację oraz samouczki dla użytkowników.

Zapewnij łatwe kanały wsparcia, takie jak fora, czaty na żywo czy system zgłoszeń.


9. Testy i feedback:


Przeprowadź beta-testy z wybraną grupą użytkowników, aby uzyskać feedback przed oficjalnym wydaniem.

Upewnij się, że aplikacja jest wolna od błędów i działa zgodnie z oczekiwaniami.


10. Aktualizacja i utrzymanie:


Regularnie aktualizuj wtyczkę, aby dostosować się do zmieniających się potrzeb użytkowników oraz nowych wersji WooCommerce i WordPress.


Prowadzenie skutecznej wtyczki do nagród w WooCommerce wymaga ciągłej uwagi i zaangażowania, ale odpowiednie podejście i dbałość o szczegóły mogą przyczynić się do jej sukcesu.
zrob z tego gotowa wtyczke do pobrania # Poprawiona Wtyczka WooCommerce do Nagrywania Wiadomości Audio/Video

Poniżej przedstawiam poprawioną wersję wtyczki, która:

1. Dodaje panel sterowania z możliwością ustawienia kolorów i odbiorcy email
2. Wyświetla przycisk "Nagraj wiadomość" przy każdym produkcie w koszyku
3. Pozwala na personalizację każdego produktu osobną wiadomością
4. Zapewnia lepszą jakość dźwięku

## 1. Główny kod wtyczki (stwórz plik `woocommerce-product-recording.php`)

```php
<?php
/*
 * Plugin Name: WooCommerce Product Audio/Video Message
 * Description: Allows customers to record personal audio/video messages for each product
 * Version: 2.0
 * Author: Your Name
 */

if (!defined('ABSPATH')) exit;

class WC_Product_Recording {
    private $options;
    
    public function __construct() {
        $this->options = get_option('wc_product_recording_settings');
        
        // Initialize settings
        add_action('admin_init', array($this, 'register_settings'));
        add_action('admin_menu', array($this, 'add_admin_menu'));
        
        // Enqueue scripts and styles
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        
        // Add recording button to cart items
        add_filter('woocommerce_cart_item_name', array($this, 'add_recording_button'), 10, 3);
        
        // Save recording data
        add_action('woocommerce_checkout_create_order_line_item', array($this, 'save_recording_data'), 10, 4);
        
        // Process recordings after payment
        add_action('woocommerce_payment_complete', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_processing', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_completed', array($this, 'process_recordings'));
        
        // AJAX handlers
        add_action('wp_ajax_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_nopriv_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_get_product_recording', array($this, 'get_recording'));
        add_action('wp_ajax_nopriv_get_product_recording', array($this, 'get_recording'));
        
        // Add recording modal to footer
        add_action('wp_footer', array($this, 'recording_modal'));
    }
    
    public function register_settings() {
        register_setting('wc_product_recording_options', 'wc_product_recording_settings', array($this, 'sanitize_settings'));
        
        add_settings_section(
            'wc_product_recording_main',
            'Ustawienia Nagrywania Produktów',
            array($this, 'settings_section_text'),
            'wc-product-recording'
        );
        
        add_settings_field(
            'notification_email',
            'Email Odbiorcy',
            array($this, 'email_field_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'button_color',
            'Kolor Przycisku',
            array($this, 'color_field_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'modal_color',
            'Kolor Modala',
            array($this, 'modal_color_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'max_duration',
            'Maksymalny czas nagrania (sekundy)',
            array($this, 'max_duration_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
    }
    
    public function sanitize_settings($input) {
        $input['notification_email'] = sanitize_email($input['notification_email']);
        $input['button_color'] = sanitize_hex_color($input['button_color']);
        $input['modal_color'] = sanitize_hex_color($input['modal_color']);
        $input['max_duration'] = absint($input['max_duration']);
        return $input;
    }
    
    public function settings_section_text() {
        echo '<p>Konfiguracja funkcji nagrywania wiadomości dla produktów</p>';
    }
    
    public function email_field_render() {
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        ?>
        <input type='email' name='wc_product_recording_settings[notification_email]' value='<?php echo esc_attr($email); ?>' class='regular-text'>
        <?php
    }
    
    public function color_field_render() {
        $color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
        ?>
        <input type='color' name='wc_product_recording_settings[button_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function modal_color_render() {
        $color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
        ?>
        <input type='color' name='wc_product_recording_settings[modal_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function max_duration_render() {
        $duration = isset($this->options['max_duration']) ? $this->options['max_duration'] : 120;
        ?>
        <input type='number' name='wc_product_recording_settings[max_duration]' value='<?php echo esc_attr($duration); ?>' min='10' max='600'>
        <?php
    }
    
    public function add_admin_menu() {
        add_options_page(
            'Ustawienia Nagrywania Produktów',
            'Nagrywanie Produktów',
            'manage_options',
            'wc-product-recording',
            array($this, 'admin_page_content')
        );
    }
    
    public function admin_page_content() {
        ?>
        <div class="wrap">
            <h1>Ustawienia Nagrywania Produktów</h1>
            <form method="post" action="options.php">
                <?php
                settings_fields('wc_product_recording_options');
                do_settings_sections('wc-product-recording');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }
    
    public function enqueue_scripts() {
        if (is_cart() || is_checkout()) {
            $button_color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
            $modal_color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
            
            wp_enqueue_style(
                'wc-recording-style',
                plugin_dir_url(__FILE__) . 'assets/css/recording.css',
                array(),
                '2.0'
            );
            
            // Dynamic CSS with settings
            $custom_css = "
                .wc-record-button {
                    background-color: {$button_color} !important;
                    border-color: {$button_color} !important;
                }
                .wc-recording-modal {
                    background: {$modal_color} !important;
                }
                .wc-recording-modal-header {
                    background: {$button_color} !important;
                }
            ";
            wp_add_inline_style('wc-recording-style', $custom_css);
            
            wp_enqueue_script(
                'recordrtc',
                'https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.min.js',
                array(),
                '5.6.2',
                true
            );
            
            wp_enqueue_script(
                'wc-product-recording',
                plugin_dir_url(__FILE__) . 'assets/js/recording.js',
                array('jquery', 'recordrtc'),
                '2.0',
                true
            );
            
            wp_localize_script('wc-product-recording', 'wc_recording_params', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'recording_nonce' => wp_create_nonce('save_recording_nonce'),
                'warning_text' => __('Prosimy o ciszę w tle podczas nagrywania wiadomości.', 'woocommerce'),
                'recording_text' => __('Nagrywanie w toku...', 'woocommerce'),
                'stop_text' => __('Zatrzymaj nagrywanie', 'woocommerce'),
                'start_audio_text' => __('Nagraj wiadomość audio', 'woocommerce'),
                'start_video_text' => __('Nagraj wiadomość wideo', 'woocommerce'),
                'play_text' => __('Odtwórz nagranie', 'woocommerce'),
                'delete_text' => __('Usuń nagranie', 'woocommerce'),
                'submit_text' => __('Zapisz nagranie', 'woocommerce'),
                'audio_placeholder' => __('Brak nagrania audio', 'woocommerce'),
                'video_placeholder' => __('Brak nagrania wideo', 'woocommerce'),
                'max_time' => isset($this->options['max_duration']) ? $this->options['max_duration'] : 120,
                'audio_only' => __('Tylko audio', 'woocommerce'),
                'video_with_audio' => __('Wideo z audio', 'woocommerce')
            ));
        }
    }
    
    public function add_recording_button($product_name, $cart_item, $cart_item_key) {
        if (is_cart() || is_checkout()) {
            $product_id = $cart_item['product_id'];
            $recording_key = 'recording_' . md5($cart_item_key);
            
            $button_html = '<div class="wc-recording-container">';
            $button_html .= '<button type="button" class="button wc-record-button" ';
            $button_html .= 'data-product-id="' . esc_attr($product_id) . '" ';
            $button_html .= 'data-cart-key="' . esc_attr($cart_item_key) . '" ';
            $button_html .= 'data-recording-key="' . esc_attr($recording_key) . '">';
            $button_html .= __('Nagraj wiadomość', 'woocommerce') . '</button>';
            
            // Add hidden field for the recording ID
            $recording_id = isset($cart_item['recording_id']) ? $cart_item['recording_id'] : '';
            $button_html .= '<input type="hidden" name="cart_recording[' . esc_attr($cart_item_key) . ']" ';
            $button_html .= 'id="recording_' . esc_attr($cart_item_key) . '" value="' . esc_attr($recording_id) . '">';
            
            $button_html .= '</div>';
            
            return $product_name . $button_html;
        }
        
        return $product_name;
    }
    
    public function recording_modal() {
        if (is_cart() || is_checkout()) {
            ?>
            <div id="wc-recording-modal" class="wc-recording-modal">
                <div class="wc-recording-modal-header">
                    <h3><?php _e('Nagraj wiadomość', 'woocommerce'); ?></h3>
                    <span class="wc-recording-close">&times;</span>
                </div>
                <div class="wc-recording-modal-body">
                    <div id="wc-recording-alert" class="woocommerce-message"></div>
                    
                    <div class="wc-recording-type-selector">
                        <button type="button" id="wc-start-audio" class="button">
                            <?php _e('Nagraj wiadomość audio', 'woocommerce'); ?>
                        </button>
                        <button type="button" id="wc-start-video" class="button">
                            <?php _e('Nagraj wiadomość wideo', 'woocommerce'); ?>
                        </button>
                    </div>
                    
                    <div id="wc-recording-controls" style="display:none;">
                        <button type="button" id="wc-stop-recording" class="button">
                            <?php _e('Zatrzymaj nagrywanie', 'woocommerce'); ?>
                        </button>
                        <div id="wc-recording-timer">00:00</div>
                    </div>
                    
                    <div id="wc-recording-preview" style="display:none;">
                        <h4><?php _e('Podgląd nagrania', 'woocommerce'); ?></h4>
                        <audio id="wc-audio-preview" controls style="width:100%;"></audio>
                        <video id="wc-video-preview" controls style="width:100%; max-height:300px; display:none;"></video>
                        
                        <div class="wc-recording-actions">
                            <button type="button" id="wc-submit-recording" class="button button-primary">
                                <?php _e('Zapisz nagranie', 'woocommerce'); ?>
                            </button>
                            <button type="button" id="wc-delete-recording" class="button">
                                <?php _e('Usuń nagranie', 'woocommerce'); ?>
                            </button>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="wc-current-product-id" value="">
                <input type="hidden" id="wc-current-cart-key" value="">
                <input type="hidden" id="wc-current-recording-key" value="">
            </div>
            <div id="wc-recording-modal-overlay" class="wc-recording-modal-overlay"></div>
            <?php
        }
    }
    
    public function save_recording_data($item, $cart_item_key, $values, $order) {
        if (!empty($values['recording_id'])) {
            $item->add_meta_data('_recording_id', $values['recording_id'], true);
        }
    }
    
    public function save_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_FILES['recording']) || !isset($_POST['cart_key']) || !isset($_POST['product_id'])) {
            wp_send_json_error(__('Brak wymaganych danych.', 'woocommerce'));
        }
        
        $upload_dir = wp_upload_dir();
        $recording_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        
        if (!file_exists($recording_dir)) {
            wp_mkdir_p($recording_dir);
        }
        
        $file_name = sanitize_file_name('recording_' . $_POST['cart_key'] . '_' . uniqid() . '.webm');
        $file_path = $recording_dir . '/' . $file_name;
        
        if (move_uploaded_file($_FILES['recording']['tmp_name'], $file_path)) {
            $recording_id = uniqid('rec_');
            
            // Store recording info in cart item
            $cart = WC()->cart;
            $cart_item = $cart->get_cart_item($_POST['cart_key']);
            
            if ($cart_item) {
                $cart->cart_contents[$_POST['cart_key']]['recording_id'] = $recording_id;
                $cart->set_session();
            }
            
            wp_send_json_success(array(
                'recording_id' => $recording_id,
                'file_name' => $file_name,
                'file_path' => $file_path
            ));
        } else {
            wp_send_json_error(__('Błąd podczas zapisywania nagrania.', 'woocommerce'));
        }
    }
    
    public function get_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_POST['cart_key'])) {
            wp_send_json_error(__('Brak klucza koszyka.', 'woocommerce'));
        }
        
        $cart = WC()->cart;
        $cart_item = $cart->get_cart_item($_POST['cart_key']);
        
        if (!$cart_item || !isset($cart_item['recording_id'])) {
            wp_send_json_error(__('Brak nagrania dla tego produktu.', 'woocommerce'));
        }
        
        wp_send_json_success(array(
            'recording_id' => $cart_item['recording_id']
        ));
    }
    
    public function process_recordings($order_id) {
        $order = wc_get_order($order_id);
        $upload_dir = wp_upload_dir();
        $recordings_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        
        $attachments = array();
        $message = "Nowe zamówienie zawiera następujące nagrania:\n\n";
        $has_recordings = false;
        
        foreach ($order->get_items() as $item_id => $item) {
            $recording_id = $item->get_meta('_recording_id');
            
            if ($recording_id) {
                $has_recordings = true;
                $product_name = $item->get_name();
                $message .= "Produkt: {$product_name}\n";
                
                // Find the recording file
                $files = glob($recordings_dir . '/recording_*_' . $recording_id . '*.webm');
                
                if (!empty($files)) {
                    $old_path = $files[0];
                    $new_filename = sanitize_file_name(
                        'order_' . $order_id . 
                        '_item_' . $item_id . 
                        '_' . $recording_id . '.webm'
                    );
                    $new_path = $recordings_dir . '/' . $new_filename;
                    
                    if (rename($old_path, $new_path)) {
                        $attachments[] = $new_path;
                        $message .= "Nagranie: {$new_filename}\n\n";
                    }
                }
            }
        }
        
        if ($has_recordings) {
            $subject = sprintf(__('Nagrania do zamówienia #%s', 'woocommerce'), $order_id);
            $headers = array('Content-Type: text/plain; charset=UTF-8');
            
            wp_mail($email, $subject, $message, $headers, $attachments);
        }
    }
}

new WC_Product_Recording();
```

## 2. JavaScript (`assets/js/recording.js`)

```javascript
jQuery(document).ready(function($) {
    var mediaRecorder;
    var audioChunks = [];
    var videoChunks = [];
    var stream;
    var timerInterval;
    var recordingTime = 0;
    var currentCartKey = '';
    var currentProductId = '';
    var currentRecordingKey = '';
    var isAudioRecording = true;
    
    // Open modal when recording button is clicked
    $(document).on('click', '.wc-record-button', function() {
        currentCartKey = $(this).data('cart-key');
        currentProductId = $(this).data('product-id');
        currentRecordingKey = $(this).data('recording-key');
        
        $('#wc-current-product-id').val(currentProductId);
        $('#wc-current-cart-key').val(currentCartKey);
        $('#wc-current-recording-key').val(currentRecordingKey);
        
        // Check if there's already a recording
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: {
                action: 'get_product_recording',
                security: wc_recording_params.recording_nonce,
                cart_key: currentCartKey
            },
            success: function(response) {
                if (response.success && response.data.recording_id) {
                    $('#wc-recording-alert').text('Ten produkt ma już nagranie. Nowe nagranie zastąpi poprzednie.').show();
                } else {
                    $('#wc-recording-alert').text(wc_recording_params.warning_text).show();
                }
            }
        });
        
        $('#wc-recording-modal').show();
        $('#wc-recording-modal-overlay').show();
    });
    
    // Close modal
    $('.wc-recording-close, #wc-recording-modal-overlay').click(function() {
        stopRecording();
        $('#wc-recording-modal').hide();
        $('#wc-recording-modal-overlay').hide();
        resetRecordingUI();
    });
    
    // Start audio recording
    $('#wc-start-audio').click(function() {
        startRecording(true);
    });
    
    // Start video recording
    $('#wc-start-video').click(function() {
        startRecording(false);
    });
    
    // Stop recording
    $('#wc-stop-recording').click(function() {
        stopRecording();
    });
    
    // Submit recording
    $('#wc-submit-recording').click(function() {
        submitRecording();
    });
    
    // Delete recording
    $('#wc-delete-recording').click(function() {
        deleteRecording();
    });
    
    function startRecording(audioOnly) {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert('Twoja przeglądarka nie obsługuje nagrywania lub nie udzieliłaś/eś wymaganych uprawnień.');
            return;
        }
        
        isAudioRecording = audioOnly;
        
        // Hide type selector, show controls
        $('.wc-recording-type-selector').hide();
        $('#wc-recording-controls').show();
        $('#wc-recording-preview').hide();
        
        $('#wc-recording-alert').text(wc_recording_params.recording_text + ' ' + 
            (audioOnly ? wc_recording_params.audio_only : wc_recording_params.video_with_audio)).show();
        
        var constraints = {
            audio: true,
            video: !audioOnly
        };
        
        navigator.mediaDevices.getUserMedia(constraints)
            .then(function(s) {
                stream = s;
                
                if (audioOnly) {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'audio',
                        mimeType: 'audio/webm',
                        recorderType: RecordRTC.StereoAudioRecorder,
                        desiredSampRate: 44100,
                        numberOfAudioChannels: 1,
                        disableLogs: true,
                        audioBitsPerSecond: 128000 // Higher quality audio
                    });
                } else {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'video',
                        mimeType: 'video/webm;codecs=vp9',
                        disableLogs: true,
                        videoBitsPerSecond: 2500000,
                        audioBitsPerSecond: 128000
                    });
                }
                
                // Start timer
                recordingTime = 0;
                updateTimer();
                timerInterval = setInterval(function() {
                    recordingTime++;
                    updateTimer();
                    if (recordingTime >= wc_recording_params.max_time) {
                        stopRecording();
                    }
                }, 1000);
                
                mediaRecorder.startRecording();
            })
            .catch(function(err) {
                console.error('Error accessing media devices:', err);
                $('#wc-recording-alert').text('Błąd dostępu do mikrofonu/kamery: ' + err.message).show();
                resetRecordingUI();
            });
    }
    
    function updateTimer() {
        var minutes = Math.floor(recordingTime / 60);
        var seconds = recordingTime % 60;
        $('#wc-recording-timer').text(
            (minutes < 10 ? '0' + minutes : minutes) + ':' + 
            (seconds < 10 ? '0' + seconds : seconds)
        );
    }
    
    function stopRecording() {
        clearInterval(timerInterval);
        
        if (!mediaRecorder) return;
        
        mediaRecorder.stopRecording(function() {
            $('#wc-recording-alert').text('Nagranie zakończone. Możesz je odsłuchać/obejrzeć przed zapisem.').show();
            
            // Create preview
            var blob = mediaRecorder.getBlob();
            var url = URL.createObjectURL(blob);
            
            if (isAudioRecording) {
                $('#wc-audio-preview').attr('src', url).show();
                $('#wc-video-preview').hide();
            } else {
                $('#wc-video-preview').attr('src', url).show();
                $('#wc-audio-preview').hide();
            }
            
            $('#wc-recording-preview').show();
            
            // Stop all tracks
            if (stream) {
                stream.getTracks().forEach(function(track) {
                    track.stop();
                });
            }
        });
    }
    
    function submitRecording() {
        if (!mediaRecorder) {
            alert('Najpierw wykonaj nagranie');
            return;
        }
        
        var blob = mediaRecorder.getBlob();
        var formData = new FormData();
        formData.append('recording', blob, 'recording.webm');
        formData.append('action', 'save_product_recording');
        formData.append('security', wc_recording_params.recording_nonce);
        formData.append('cart_key', currentCartKey);
        formData.append('product_id', currentProductId);
        
        $('#wc-submit-recording').prop('disabled', true).text('Zapisywanie...');
        
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    $('#wc-recording-alert').text('Nagranie zostało zapisane do tego produktu.').show();
                    
                    // Update the hidden field in cart
                    $('#recording_' + currentCartKey).val(response.data.recording_id);
                    
                    // Close modal after 2 seconds
                    setTimeout(function() {
                        $('#wc-recording-modal').hide();
                        $('#wc-recording-modal-overlay').hide();
                        resetRecordingUI();
                    }, 2000);
                } else {
                    $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + response.data).show();
                    $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
                }
            },
            error: function(xhr, status, error) {
                $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + error).show();
                $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
            }
        });
    }
    
    function deleteRecording() {
        // Just reset the UI, actual file will be overwritten on new submission
        resetRecordingUI();
        $('#recording_' + currentCartKey).val('');
        $('#wc-recording-alert').text('Nagranie zostało usunięte. Możesz nagrać nową wiadomość.').show();
    }
    
    function resetRecordingUI() {
        $('.wc-recording-type-selector').show();
        $('#wc-recording-controls').hide();
        $('#wc-recording-preview').hide();
        $('#wc-recording-timer').text('00:00');
        $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
        
        if (mediaRecorder) {
            mediaRecorder = null;
        }
        
        if (stream) {
            stream.getTracks().forEach(function(track) {
                track.stop();
            });
            stream = null;
        }
        
        clearInterval(timerInterval);
    }
});
```

## 3. CSS (`assets/css/recording.css`)

```css
/* Modal styles */
.wc-recording-modal {
    display: none;
    position: fixed;
    z-index: 9999;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    max-width: 600px;
    border: 1px solid #ddd;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.wc-recording-modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9998;
}

.wc-recording-modal-header {
    padding: 15px;
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.wc-recording-modal-header h3 {
    margin: 0;
    font-size: 1.2em;
}

.wc-recording-close {
    font-size: 24px;
    cursor: pointer;
}

.wc-recording-modal-body {
    padding: 15px;
}

/* Button styles */
.wc-record-button {
    margin-top: 10px !important;
    display: inline-block !important;
}

.wc-recording-type-selector {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
}

.wc-recording-type-selector button {
    flex: 1;
}

/* Recording controls */
#wc-recording-controls {
    margin: 15px 0;
    display: flex;
    align-items: center;
    gap: 15px;
}

#wc-recording-timer {
    font-family: monospace;
    font-size: 1.2em;
}

/* Preview styles */
#wc-recording-preview {
    margin-top: 15px;
}

#wc-recording-preview h4 {
    margin-bottom: 10px;
}

#wc-audio-preview,
#wc-video-preview {
    margin-bottom: 15px;
    display: none;
}

.wc-recording-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
}

/* Alert styles */
#wc-recording-alert {
    padding: 10px;
    margin-bottom: 15px;
    display: none;
}

/* Responsive adjustments */
@media (max-width: 600px) {
    .wc-recording-type-selector {
        flex-direction: column;
    }
    
    #wc-recording-controls {
        flex-direction: column;
        align-items: flex-start;
    }
}
```

## Instrukcja instalacji:

1. Stwórz folder `/woocommerce-product-recording` w katalogu `/wp-content/plugins/`
2. Umieść w nim plik `woocommerce-product-recording.php` z pierwszym kodem
3. Stwórz strukturę folderów:
   ```
   /woocommerce-product-recording/
   ├── assets/
   │   ├── css/
   │   │   └── recording.css
   │   └── js/
   │       └── recording.js
   └── woocommerce-product-recording.php
   ```
4. Aktywuj wtyczkę w panelu WordPress

## Funkcjonalności:

1. **Panel sterowania**:
   - Ustawienie emaila odbiorcy
   - Wybór kolorów przycisków i modala
   - Ustawienie maksymalnego czasu nagrania

2. **Nagrywanie w koszyku**:
   - Przycisk "Nagraj wiadomość" przy każdym produkcie
   - Możliwość nagrania audio lub wideo
   - Podgląd przed zapisem
   - Timer pokazujący czas nagrania

3. **Przetwarzanie nagrań**:
   - Automatyczne wysyłanie na email po złożeniu zamówienia
   - Nazwy plików zawierają numer zamówienia, produktu i datę
   - Każdy produkt może mieć osobne nagranie

4. **Optymalizacja dźwięku**:
   - Wyższa jakość bitrate (128 kbps)
   - Monit o ciszę w tle przed nagraniem
   - Nagrywanie w formacie WebM dla lepszej kompresji

Wtyczka jest w pełni responsywna i dostosowuje się do różnych rozmiarów ekranu.
GPT-4o Mini
Aby stworzyć gotową do pobrania wtyczkę WooCommerce do nagrywania wiadomości audio/wideo, zorganizuję wszystkie pliki potrzebne do jej działania według wcześniejszego opisu. Poniżej znajduje się struktura folderów, a następnie zaktualizowany kod do każdego z plików.
Struktura folderów

Utwórz folder o nazwie `woocommerce-product-recording` w katalogu `/wp-content/plugins/`, a następnie utwórz w nim następującą strukturę folderów:
/woocommerce-product-recording/
├── assets/
│   ├── css/
│   │   └── recording.css
│   └── js/
│       └── recording.js
└── woocommerce-product-recording.php
Plik: woocommerce-product-recording.php

<?php
/*
 * Plugin Name: WooCommerce Product Audio/Video Message
 * Description: Allows customers to record personal audio/video messages for each product.
 * Version: 2.0
 * Author: Your Name
 */

if (!defined('ABSPATH')) exit;

class WC_Product_Recording {
    private $options;
    
    public function __construct() {
        $this->options = get_option('wc_product_recording_settings');
        
        add_action('admin_init', array($this, 'register_settings'));
        add_action('admin_menu', array($this, 'add_admin_menu'));
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        add_filter('woocommerce_cart_item_name', array($this, 'add_recording_button'), 10, 3);
        add_action('woocommerce_checkout_create_order_line_item', array($this, 'save_recording_data'), 10, 4);
        add_action('woocommerce_payment_complete', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_processing', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_completed', array($this, 'process_recordings'));
        add_action('wp_ajax_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_nopriv_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_get_product_recording', array($this, 'get_recording'));
        add_action('wp_ajax_nopriv_get_product_recording', array($this, 'get_recording'));
        add_action('wp_footer', array($this, 'recording_modal'));
    }

    public function register_settings() {
        register_setting('wc_product_recording_options', 'wc_product_recording_settings', array($this, 'sanitize_settings'));
        
        add_settings_section('wc_product_recording_main', 'Ustawienia Nagrywania Produktów', array($this, 'settings_section_text'), 'wc-product-recording');
        
        add_settings_field('notification_email', 'Email Odbiorcy', array($this, 'email_field_render'), 'wc-product-recording', 'wc_product_recording_main');
        add_settings_field('button_color', 'Kolor Przycisku', array($this, 'color_field_render'), 'wc-product-recording', 'wc_product_recording_main');
        add_settings_field('modal_color', 'Kolor Modala', array($this, 'modal_color_render'), 'wc-product-recording', 'wc_product_recording_main');
        add_settings_field('max_duration', 'Maksymalny czas nagrania (sekundy)', array($this, 'max_duration_render'), 'wc-product-recording', 'wc_product_recording_main');
    }

    public function sanitize_settings($input) {
        $input['notification_email'] = sanitize_email($input['notification_email']);
        $input['button_color'] = sanitize_hex_color($input['button_color']);
        $input['modal_color'] = sanitize_hex_color($input['modal_color']);
        $input['max_duration'] = absint($input['max_duration']);
        return $input;
    }

    public function settings_section_text() {
        echo '<p>Konfiguracja funkcji nagrywania wiadomości dla produktów</p>';
    }

    public function email_field_render() {
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        ?>
        <input type='email' name='wc_product_recording_settings[notification_email]' value='<?php echo esc_attr($email); ?>' class='regular-text'>
        <?php
    }

    public function color_field_render() {
        $color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
        ?>
        <input type='color' name='wc_product_recording_settings[button_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }

    public function modal_color_render() {
        $color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
        ?>
        <input type='color' name='wc_product_recording_settings[modal_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }

    public function max_duration_render() {
        $duration = isset($this->options['max_duration']) ? $this->options['max_duration'] : 120;
        ?>
        <input type='number' name='wc_product_recording_settings[max_duration]' value='<?php echo esc_attr($duration); ?>' min='10' max='600'>
        <?php
    }

    public function add_admin_menu() {
        add_options_page('Ustawienia Nagrywania Produktów', 'Nagrywanie Produktów', 'manage_options', 'wc-product-recording', array($this, 'admin_page_content'));
    }

    public function admin_page_content() {
        ?>
        <div class="wrap">
            <h1>Ustawienia Nagrywania Produktów</h1>
            <form method="post" action="options.php">
                <?php
                settings_fields('wc_product_recording_options');
                do_settings_sections('wc-product-recording');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }

    public function enqueue_scripts() {
        if (is_cart() || is_checkout()) {
            $button_color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
            $modal_color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';

            wp_enqueue_style('wc-recording-style', plugin_dir_url(__FILE__) . 'assets/css/recording.css', array(), '2.0');

            $custom_css = "
                .wc-record-button {
                    background-color: {$button_color} !important;
                    border-color: {$button_color} !important;
                }
                .wc-recording-modal {
                    background: {$modal_color} !important;
                }
                .wc-recording-modal-header {
                    background: {$button_color} !important;
                }
            ";
            wp_add_inline_style('wc-recording-style', $custom_css);
            
            wp_enqueue_script('recordrtc', 'https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.min.js', array(), '5.6.2', true);
            wp_enqueue_script('wc-product-recording', plugin_dir_url(__FILE__) . 'assets/js/recording.js', array('jquery', 'recordrtc'), '2.0', true);
            wp_localize_script('wc-product-recording', 'wc_recording_params', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'recording_nonce' => wp_create_nonce('save_recording_nonce'),
                'warning_text' => __('Prosimy o ciszę w tle podczas nagrywania wiadomości.', 'woocommerce'),
                'recording_text' => __('Nagrywanie w toku...', 'woocommerce'),
                'stop_text' => __('Zatrzymaj nagrywanie', 'woocommerce'),
                'start_audio_text' => __('Nagraj wiadomość audio', 'woocommerce'),
                'start_video_text' => __('Nagraj wiadomość wideo', 'woocommerce'),
                'play_text' => __('Odtwórz nagranie', 'woocommerce'),
                'delete_text' => __('Usuń nagranie', 'woocommerce'),
                'submit_text' => __('Zapisz nagranie', 'woocommerce'),
                'audio_placeholder' => __('Brak nagrania audio', 'woocommerce'),
                'video_placeholder' => __('Brak nagrania wideo', 'woocommerce'),
                'max_time' => isset($this->options['max_duration']) ? $this->options['max_duration'] : 120,
                'audio_only' => __('Tylko audio', 'woocommerce'),
                'video_with_audio' => __('Wideo z audio', 'woocommerce')
            ));
        }
    }

    public function add_recording_button($product_name, $cart_item, $cart_item_key) {
        if (is_cart() || is_checkout()) {
            $product_id = $cart_item['product_id'];
            $recording_key = 'recording_' . md5($cart_item_key);
            
            $button_html = '<div class="wc-recording-container">';
            $button_html .= '<button type="button" class="button wc-record-button" ';
            $button_html .= 'data-product-id="' . esc_attr($product_id) . '" ';
            $button_html .= 'data-cart-key="' . esc_attr($cart_item_key) . '" ';
            $button_html .= 'data-recording-key="' . esc_attr($recording_key) . '">';
            $button_html .= __('Nagraj wiadomość', 'woocommerce') . '</button>';

            $recording_id = isset($cart_item['recording_id']) ? $cart_item['recording_id'] : '';
            $button_html .= '<input type="hidden" name="cart_recording[' . esc_attr($cart_item_key) . ']" ';
            $button_html .= 'id="recording_' . esc_attr($cart_item_key) . '" value="' . esc_attr($recording_id) . '">';
            
            $button_html .= '</div>';
            
            return $product_name . $button_html;
        }
        return $product_name;
    }

    public function recording_modal() {
        if (is_cart() || is_checkout()) {
            ?>
            <div id="wc-recording-modal" class="wc-recording-modal">
                <div class="wc-recording-modal-header">
                    <h3><?php _e('Nagraj wiadomość', 'woocommerce'); ?></h3>
                    <span class="wc-recording-close">&times;</span>
                </div>
                <div class="wc-recording-modal-body">
                    <div id="wc-recording-alert" class="woocommerce-message"></div>
                    
                    <div class="wc-recording-type-selector">
                        <button type="button" id="wc-start-audio" class="button">
                            <?php _e('Nagraj wiadomość audio', 'woocommerce'); ?>
                        </button>
                        <button type="button" id="wc-start-video" class="button">
                            <?php _e('Nagraj wiadomość wideo', 'woocommerce'); ?>
                        </button>
                    </div>
                    
                    <div id="wc-recording-controls" style="display:none;">
                        <button type="button" id="wc-stop-recording" class="button">
                            <?php _e('Zatrzymaj nagrywanie', 'woocommerce'); ?>
                        </button>
                        <div id="wc-recording-timer">00:00</div>
                    </div>
                    
                    <div id="wc-recording-preview" style="display:none;">
                        <h4><?php _e('Podgląd nagrania', 'woocommerce'); ?></h4>
                        <audio id="wc-audio-preview" controls style="width:100%;"></audio>
                        <video id="wc-video-preview" controls style="width:100%; max-height:300px; display:none;"></video>
                        
                        <div class="wc-recording-actions">
                            <button type="button" id="wc-submit-recording" class="button button-primary">
                                <?php _e('Zapisz nagranie', 'woocommerce'); ?>
                            </button>
                            <button type="button" id="wc-delete-recording" class="button">
                                <?php _e('Usuń nagranie', 'woocommerce'); ?>
                            </button>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="wc-current-product-id" value="">
                <input type="hidden" id="wc-current-cart-key" value="">
                <input type="hidden" id="wc-current-recording-key" value="">
            </div>
            <div id="wc-recording-modal-overlay" class="wc-recording-modal-overlay"></div>
            <?php
        }
    }

    public function save_recording_data($item, $cart_item_key, $values, $order) {
        if (!empty($values['recording_id'])) {
            $item->add_meta_data('_recording_id', $values['recording_id'], true);
        }
    }

    public function save_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_FILES['recording']) || !isset($_POST['cart_key']) || !isset($_POST['product_id'])) {
            wp_send_json_error(__('Brak wymaganych danych.', 'woocommerce'));
        }
        
        $upload_dir = wp_upload_dir();
        $recording_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        
        if (!file_exists($recording_dir)) {
            wp_mkdir_p($recording_dir);
        }
        
        $file_name = sanitize_file_name('recording_' . $_POST['cart_key'] . '_' . uniqid() . '.webm');
        $file_path = $recording_dir . '/' . $file_name;
        
        if (move_uploaded_file($_FILES['recording']['tmp_name'], $file_path)) {
            $recording_id = uniqid('rec_');
            $cart = WC()->cart;
            $cart_item = $cart->get_cart_item($_POST['cart_key']);
            
            if ($cart_item) {
                $cart->cart_contents[$_POST['cart_key']]['recording_id'] = $recording_id;
                $cart->set_session();
            }
            
            wp_send_json_success(array(
                'recording_id' => $recording_id,
                'file_name' => $file_name,
                'file_path' => $file_path
            ));
        } else {
            wp_send_json_error(__('Błąd podczas zapisywania nagrania.', 'woocommerce'));
        }
    }

    public function get_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_POST['cart_key'])) {
            wp_send_json_error(__('Brak klucza koszyka.', 'woocommerce'));
        }
        
        $cart = WC()->cart;
        $cart_item = $cart->get_cart_item($_POST['cart_key']);
        
        if (!$cart_item || !isset($cart_item['recording_id'])) {
            wp_send_json_error(__('Brak nagrania dla tego produktu.', 'woocommerce'));
        }
        
        wp_send_json_success(array(
            'recording_id' => $cart_item['recording_id']
        ));
    }

    public function process_recordings($order_id) {
        $order = wc_get_order($order_id);
        $upload_dir = wp_upload_dir();
        $recordings_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        
        $attachments = array();
        $message = "Nowe zamówienie zawiera następujące nagrania:\n\n";
        $has_recordings = false;
        
        foreach ($order->get_items() as $item_id => $item) {
            $recording_id = $item->get_meta('_recording_id');
            
            if ($recording_id) {
                $has_recordings = true;
                $product_name = $item->get_name();
                $message .= "Produkt: {$product_name}\n";
                
                $files = glob($recordings_dir . '/recording_*_' . $recording_id . '*.webm');
                
                if (!empty($files)) {
                    $old_path = $files[0];
                    $new_filename = sanitize_file_name('order_' . $order_id . '_item_' . $item_id . '_' . $recording_id . '.webm');
                    $new_path = $recordings_dir . '/' . $new_filename;
                    
                    if (rename($old_path, $new_path)) {
                        $attachments[] = $new_path;
                        $message .= "Nagranie: {$new_filename}\n\n";
                    }
                }
            }
        }
        
        if ($has_recordings) {
            $subject = sprintf(__('Nagrania do zamówienia #%s', 'woocommerce'), $order_id);
            $headers = array('Content-Type: text/plain; charset=UTF-8');
            
            wp_mail($email, $subject, $message, $headers, $attachments);
        }
    }
}

new WC_Product_Recording();
Plik: assets/js/recording.js

jQuery(document).ready(function($) {
    var mediaRecorder;
    var audioChunks = [];
    var videoChunks = [];
    var stream;
    var timerInterval;
    var recordingTime = 0;
    var currentCartKey = '';
    var currentProductId = '';
    var currentRecordingKey = '';
    var isAudioRecording = true;

    $(document).on('click', '.wc-record-button', function() {
        currentCartKey = $(this).data('cart-key');
        currentProductId = $(this).data('product-id');
        currentRecordingKey = $(this).data('recording-key');

        $('#wc-current-product-id').val(currentProductId);
        $('#wc-current-cart-key').val(currentCartKey);
        $('#wc-current-recording-key').val(currentRecordingKey);

        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: {
                action: 'get_product_recording',
                security: wc_recording_params.recording_nonce,
                cart_key: currentCartKey
            },
            success: function(response) {
                if (response.success && response.data.recording_id) {
                    $('#wc-recording-alert').text('Ten produkt ma już nagranie. Nowe nagranie zastąpi poprzednie.').show();
                } else {
                    $('#wc-recording-alert').text(wc_recording_params.warning_text).show();
                }
            }
        });

        $('#wc-recording-modal').show();
        $('#wc-recording-modal-overlay').show();
    });

    $('.wc-recording-close, #wc-recording-modal-overlay').click(function() {
        stopRecording();
        $('#wc-recording-modal').hide();
        $('#wc-recording-modal-overlay').hide();
        resetRecordingUI();
   Oto kontynuacja skryptu JavaScript (`assets/js/recording.js`), aby zakończyć funkcjonalność nagrywania audio/wideo oraz zamknąć modal:

### Kontynuacja pliku: `assets/js/recording.js`

```javascript
 });

 function startRecording() {
  if (isAudioRecording) {
   navigator.mediaDevices.getUserMedia({ audio: true })
   .then(function(streamParam) {
    stream = streamParam;
    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.start();
    
    mediaRecorder.ondataavailable = function(event) {
     audioChunks.push(event.data);
    };

    mediaRecorder.onstop = function() {
     const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
     audioChunks = [];

     const formData = new FormData();
     formData.append('recording', audioBlob, 'recording.webm');
     formData.append('cart_key', currentCartKey);
     formData.append('product_id', currentProductId);

     $.ajax({
      url: wc_recording_params.ajax_url,
      type: 'POST',
      data: formData,
      processData: false,
      contentType: false,
      success: function(response) {
       if (response.success) {
        $('#wc-recording-alert').text('Nagranie zapisano.').show();
        // Optionally handle the recording ID and UI updates here
       }
      }
     });
    };
    
    startTimer();
   });
  } else {
   // Wersja wideo, do implementacji według własnych wskazówek
   navigator.mediaDevices.getUserMedia({ video: true, audio: true })
   .then(function(streamParam) {
    stream = streamParam;
    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.start();
    
    mediaRecorder.ondataavailable = function(event) {
     videoChunks.push(event.data);
    };
   
    mediaRecorder.onstop = function() {
     const videoBlob = new Blob(videoChunks, { type: 'video/webm' });
     videoChunks = [];

     const formData = new FormData();
     formData.append('recording', videoBlob, 'recording.webm');
     formData.append('cart_key', currentCartKey);
     formData.append('product_id', currentProductId);

     $.ajax({
      url: wc_recording_params.ajax_url,
      type: 'POST',
      data: formData,
      processData: false,
      contentType: false,
      success: function(response) {
       if (response.success) {
        $('#wc-recording-alert').text('Nagranie zapisano.').show();
       }
      }
     });
    };

    startTimer();
   });
  }
 }

 function stopRecording() {
  mediaRecorder.stop();
  stream.getTracks().forEach(track => track.stop());
  clearInterval(timerInterval);
 }

 function startTimer() {
  recordingTime = 0;
  $('#wc-recording-controls').show();

  timerInterval = setInterval(function() {
   recordingTime++;
   var minutes = Math.floor(recordingTime / 60);
   var seconds = recordingTime % 60;
   $('#wc-recording-timer').text((minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds);
  }, 1000);
 }

 function resetRecordingUI() {
  recordingTime = 0;
  $('#wc-recording-timer').text('00:00');
  $('#wc-recording-controls').hide();
 }

 $('#wc-start-audio').click(function() {
  isAudioRecording = true;
  startRecording();
 });

 $('#wc-start-video').click(function() {
  isAudioRecording = false;
  startRecording();
 });
});
Plik CSS (opcjonalnie): assets/css/recording.css

Możesz dostosować stylizację modalu, przycisków i innych elementów związanych z nagrywaniem:
.wc-recording-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    display: none;
}

.wc-recording-modal-header {
    background: #333;
    color: #fff;
    padding: 10px;
}

.wc-recording-modal-body {
    background: #fff;
    padding: 20px;
    border-radius: 5px;
}

#wc-recording-alert {
    margin-bottom: 15px;
    color: green;
}

.wc-recording-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: none;
}
Jak zainstalować wtyczkę


Skopiuj kod dla pliku woocommerce-product-recording.php do nowego pliku o tej samej nazwie w utworzonym folderze.

Skopiuj kod JavaScript do pliku recording.js w folderze assets/js/.

Skopiuj kod CSS do pliku recording.css w folderze assets/css/.

Przejdź do panelu WordPress (wtyczki) i aktywuj wtyczkę "WooCommerce Product Audio/Video Message".

Skonfiguruj ustawienia wtyczki w menu Ustawienia -> Nagrywanie Produktów.


Uwaga

Upewnij się, że masz zainstalowaną i aktywowaną wtyczkę WooCommerce, aby wtyczka działała prawidłowo oraz ujrzysz wszystkie wymagane funkcje w koszyku i na stronie kasowania.
przygotuj mi plik gotowy do pobrania i instalacji
GPT-4o Mini
Aby przygotować wtyczkę WordPress do pobrania i instalacji, musisz zebrać wszystkie pliki w odpowiedniej strukturze folderów, a następnie spakować je w plik ZIP. Poniżej znajdziesz instrukcje, jak to zrobić:
Krok 1: Przygotuj lokalną strukturę folderów


Stwórz folder o nazwie woocommerce-product-recording.

Wewnątrz tego folderu utwórz następujące podfoldery i pliki:


/woocommerce-product-recording/
├── assets/
│   ├── css/
│   │   └── recording.css
│   └── js/
│       └── recording.js
└── woocommerce-product-recording.php
Krok 2: Wypełnij pliki

1. Zawartość pliku woocommerce-product-recording.php

<?php
/*
 * Plugin Name: WooCommerce Product Audio/Video Message
 * Description: Allows customers to record personal audio/video messages for each product.
 * Version: 2.0
 * Author: Your Name
 */

if (!defined('ABSPATH')) exit;

class WC_Product_Recording {
 private $options;

 public function __construct() {
  $this->options = get_option('wc_product_recording_settings');
  
  add_action('admin_init', array($this, 'register_settings'));
  add_action('admin_menu', array($this, 'add_admin_menu'));
  add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
  add_filter('woocommerce_cart_item_name', array($this, 'add_recording_button'), 10, 3);
  add_action('woocommerce_checkout_create_order_line_item', array($this, 'save_recording_data'), 10, 4);
  add_action('woocommerce_payment_complete', array($this, 'process_recordings'));
  add_action('woocommerce_order_status_processing', array($this, 'process_recordings'));
  add_action('woocommerce_order_status_completed', array($this, 'process_recordings'));
  add_action('wp_ajax_save_product_recording', array($this, 'save_recording'));
  add_action('wp_ajax_nopriv_save_product_recording', array($this, 'save_recording'));
  add_action('wp_ajax_get_product_recording', array($this, 'get_recording'));
  add_action('wp_ajax_nopriv_get_product_recording', array($this, 'get_recording'));
  add_action('wp_footer', array($this, 'recording_modal'));
 }

 public function register_settings() {
  register_setting('wc_product_recording_options', 'wc_product_recording_settings', array($this, 'sanitize_settings'));
  
  add_settings_section('wc_product_recording_main', 'Ustawienia Nagrywania Produktów', array($this, 'settings_section_text'), 'wc-product-recording');
  
  add_settings_field('notification_email', 'Email Odbiorcy', array($this, 'email_field_render'), 'wc-product-recording', 'wc_product_recording_main');
  add_settings_field('button_color', 'Kolor Przycisku', array($this, 'color_field_render'), 'wc-product-recording', 'wc_product_recording_main');
  add_settings_field('modal_color', 'Kolor Modala', array($this, 'modal_color_render'), 'wc-product-recording', 'wc_product_recording_main');
  add_settings_field('max_duration', 'Maksymalny czas nagrania (sekundy)', array($this, 'max_duration_render'), 'wc-product-recording', 'wc_product_recording_main');
 }

 public function sanitize_settings($input) {
  $input['notification_email'] = sanitize_email($input['notification_email']);
  $input['button_color'] = sanitize_hex_color($input['button_color']);
  $input['modal_color'] = sanitize_hex_color($input['modal_color']);
  $input['max_duration'] = absint($input['max_duration']);
  return $input;
 }

 public function settings_section_text() {
  echo '<p>Konfiguracja funkcji nagrywania wiadomości dla produktów</p>';
 }

 public function email_field_render() {
  $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
  ?>
  <input type='email' name='wc_product_recording_settings[notification_email]' value='<?php echo esc_attr($email); ?>' class='regular-text'>
  <?php
 }

 public function color_field_render() {
  $color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
  ?>
  <input type='color' name='wc_product_recording_settings[button_color]' value='<?php echo esc_attr($color); ?>'>
  <?php
 }

 public function modal_color_render() {
  $color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
  ?>
  <input type='color' name='wc_product_recording_settings[modal_color]' value='<?php echo esc_attr($color); ?>'>
  <?php
 }

 public function max_duration_render() {
  $duration = isset($this->options['max_duration']) ? $this->options['max_duration'] : 120;
  ?>
  <input type='number' name='wc_product_recording_settings[max_duration]' value='<?php echo esc_attr($duration); ?>' min='10' max='600'>
  <?php
 }

 public function add_admin_menu() {
  add_options_page('Ustawienia Nagrywania Produktów', 'Nagrywanie Produktów', 'manage_options', 'wc-product-recording', array($this, 'admin_page_content'));
 }

 public function admin_page_content() {
  ?>
  <div class="wrap">
  <h1>Ustawienia Nagrywania Produktów</h1>
  <form method="post" action="options.php">
   <?php
   settings_fields('wc_product_recording_options');
   do_settings_sections('wc-product-recording');
   submit_button();
   ?>
  </form>
  </div>
  <?php
 }

 public function enqueue_scripts() {
  if (is_cart() || is_checkout()) {
  $button_color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
  $modal_color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';

  wp_enqueue_style('wc-recording-style', plugin_dir_url(__FILE__) . 'assets/css/recording.css', array(), '2.0');

  $custom_css = "
   .wc-record-button {
    background-color: {$button_color} !important;
    border-color: {$button_color} !important;
   }
   .wc-recording-modal {
    background: {$modal_color} !important;
   }
   .wc-recording-modal-header {
    background: {$button_color} !important;
   }
  ";
  wp_add_inline_style('wc-recording-style', $custom_css);
  
  wp_enqueue_script('recordrtc', 'https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.min.js', array(), '5.6.2', true);
  wp_enqueue_script('wc-product-recording', plugin_dir_url(__FILE__) . 'assets/js/recording.js', array('jquery', 'recordrtc'), '2.0', true);
  wp_localize_script('wc-product-recording', 'wc_recording_params', array(
   'ajax_url' => admin_url('admin-ajax.php'),
   'recording_nonce' => wp_create_nonce('save_recording_nonce'),
   'warning_text' => __('Prosimy o ciszę w tle podczas nagrywania wiadomości.', 'woocommerce'),
   'recording_text' => __('Nagrywanie w toku...', 'woocommerce'),
   'stop_text' => __('Zatrzymaj nagrywanie', 'woocommerce'),
   'start_audio_text' => __('Nagraj wiadomość audio', 'woocommerce'),
   'start_video_text' => __('Nagraj wiadomość wideo', 'woocommerce'),
   'play_text' => __('Odtwórz nagranie', 'woocommerce'),
   'delete_text' => __('Usuń nagranie', 'woocommerce'),
   'submit_text' => __('Zapisz nagranie', 'woocommerce'),
   'audio_placeholder' => __('Brak nagrania audio', 'woocommerce'),
   'video_placeholder' => __('Brak nagrania wideo', 'woocommerce'),
   'max_time' => isset($this->options['max_duration']) ? $this->options['max_duration'] : 120,
   'audio_only' => __('Tylko audio', 'woocommerce'),
   'video_with_audio' => __('Wideo z audio', 'woocommerce')
  ));
  }
 }

 public function add_recording_button($product_name, $cart_item, $cart_item_key) {
  if (is_cart() || is_checkout()) {
  $product_id = $cart_item['product_id'];
  $recording_key = 'recording_' . md5($cart_item_key);
  
  $button_html = '<div class="wc-recording-container">';
  $button_html .= '<button type="button" class="button wc-record-button" ';
  $button_html .= 'data-product-id="' . esc_attr($product_id) . '" ';
  $button_html .= 'data-cart-key="' . esc_attr($cart_item_key) . '" ';
  $button_html .= 'data-recording-key="' . esc_attr($recording_key) . '">';
  $button_html .= __('Nagraj wiadomość', 'woocommerce') . '</button>';

  $recording_id = isset($cart_item['recording_id']) ? $cart_item['recording_id'] : '';
  $button_html .= '<input type="hidden" name="cart_recording[' . esc_attr($cart_item_key) . ']" ';
  $button_html .= 'id="recording_' . esc_attr($cart_item_key) . '" value="' . esc_attr($recording_id) . '">';
  
  $button_html .= '</div>';
  
  return $product_name . $button_html;
  }
  return $product_name;
 }

 public function recording_modal() {
  if (is_cart() || is_checkout()) {
  ?>
  <div id="wc-recording-modal" class="wc-recording-modal">
   <div class="wc-recording-modal-header">
    <h3><?php _e('Nagraj wiadomość', 'woocommerce'); ?></h3>
    <span class="wc-recording-close">&times;</span>
   </div>
   <div class="wc-recording-modal-body">
    <div id="wc-recording-alert" class="woocommerce-message"></div>
    
    <div class="wc-recording-type-selector">
    <button type="button" id="wc-start-audio" class="button">
     <?php _e('Nagraj wiadomość audio', 'woocommerce'); ?>
    </button>
    <button type="button" id="wc-start-video" class="button">
     <?php _e('Nagraj wiadomość wideo', 'woocommerce'); ?>
    </button>
    </div>
    
    <div id="wc-recording-controls" style="display:none;">
    <button type="button" id="wc-stop-recording" class="button">
     <?php _e('Zatrzymaj nagrywanie', 'woocommerce'); ?>
    </button>
    <div id="wc-recording-timer">00:00</div>
    </div>
    
    <div id="wc-recording-preview" style="display:none;">
    <h4><?php _e('Podgląd nagrania', 'woocommerce'); ?></h4>
    <audio id="wc-audio-preview" controls style="width:100%;"></audio>
    <video id="wc-video-preview" controls style="width:100%; max-height:300px; display:none;"></video>
    
    <div class="wc-recording-actions">
     <button type="button" id="wc-submit-recording" class="button button-primary">
      <?php _e('Zapisz nagranie', 'woocommerce'); ?>
     </button>
     <button type="button" id="wc-delete-recording" class="button">
      <?php _e('Usuń nagranie', 'woocommerce'); ?>
     </button>
    </div>
    </div>
   </div>
   <input type="hidden" id="wc-current-product-id" value="">
   <input type="hidden" id="wc-current-cart-key" value="">
   <input type="hidden" id="wc-current-recording-key" value="">
  </div>
  <div id="wc-recording-modal-overlay" class="wc-recording-modal-overlay"></div>
  <?php
  }
 }

 public function save_recording_data($item, $cart_item_key, $values, $order) {
  if (!empty($values['recording_id'])) {
  $item->add_meta_data('_recording_id', $values['recording_id'], true);
  }
 }

 public function save_recording() {
  check_ajax_referer('save_recording_nonce', 'security');
  
  if (!isset($_FILES['recording']) || !isset($_POST['cart_key']) || !isset($_POST['product_id'])) {
  wp_send_json_error(__('Brak wymaganych danych.', 'woocommerce'));
  }
  
  $upload_dir = wp_upload_dir();
  $recording_dir = $upload_dir['basedir'] . '/wc-product-recordings';
  
  if (!file_exists($recording_dir)) {
  wp_mkdir_p($recording_dir);
  }
  
  $file_name = sanitize_file_name('recording_' . $_POST['cart_key'] . '_' . uniqid() . '.webm');
  $file_path = $recording_dir . '/' . $file_name;
  
  if (move_uploaded_file($_FILES['recording']['tmp_name'], $file_path)) {
  $recording_id = uniqid('rec_');
  $cart = WC()->cart;
  $cart_item = $cart->get_cart_item($_POST['cart_key']);
  
  if ($cart_item) {
   $cart->cart_contents[$_POST['cart_key']]['recording_id'] = $recording_id;
   $cart->set_session();
  }
  
  wp_send_json_success(array(
   'recording_id' => $recording_id,
   'file_name' => $file_name,
   'file_path' => $file_path
  ));
  } else {
  wp_send_json_error(__('Błąd podczas zapisywania nagrania.', 'woocommerce'));
  }
 }

 public function get_recording() {
  check_ajax_referer('save_recording_nonce', 'security');
  
  if (!isset($_POST['cart_key'])) {
  wp_send_json_error(__('Brak klucza koszyka.', 'woocommerce'));
  }
  
  $cart = WC()->cart;
  $cart_item = $cart->get_cart_item($_POST['cart_key']);
  
  if (!$cart_item || !isset($cart_item['recording_id'])) {
  wp_send_json_error(__('Brak nagrania dla tego produktu.', 'woocommerce'));
  }
  
  wp_send_json_success(array(
  'recording_id' => $cart_item['recording_id']
  ));
 }

 public function process_recordings($order_id) {
  $order = wc_get_order($order_id);
  $upload_dir = wp_upload_dir();
  $recordings_dir = $upload_dir['basedir'] . '/wc-product-recordings';
  $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
  
  $attachments = array();
  $message = "Nowe zamówienie zawiera następujące nagrania:\n\n";
  $has_recordings = false;
  
  foreach ($order->get_items() as $item_id => $item) {
  $recording_id = $item->get_meta('_recording_id');
  
  if ($recording_id) {
   $has_recordings = true;
   $product_name = $item->get_name();
   $message .= "Produkt: {$product_name}\n";
   
   $files = glob($recordings_dir . '/recording_*_' . $recording_id . '*.webm');
   
   if (!empty($files)) {
    $old_path = $files[0];
    $new_filename = sanitize_file_name('order_' . $order_id . '_item_' . $item_id . '_' . $recording_id . '.webm');
    $new_path = $recordings_dir . '/' . $new_filename;
    
    if (rename($old_path, $new_path)) {
    $attachments[] = $new_path;
    $message .= "Nagranie: {$new_filename}\n\n";
    }
   }
  }
  }
  
  if ($has_recordings) {
  $subject = sprintf(__('Nagrania do zamówienia #%s', 'woocommerce'), $order_id);
  $headers = array('Content-Type: text/plain; charset=UTF-8');
  
  wp_mail($email, $subject, $message, $headers, $attachments);
  }
 }
}

new WC_Product_Recording();
2. Zawartość pliku assets/js/recording.js

jQuery(document).ready(function($) {
 var mediaRecorder;
 var audioChunks = [];
 var videoChunks = [];
 var stream;
 var timerInterval;
 var recordingTime = 0;
 var currentCartKey = '';
 var currentProductId = '';
 var currentRecordingKey = '';
 var isAudioRecording = true;

 $(document).on('click', '.wc-record-button', function() {
  currentCartKey = $(this).data('cart-key');
  currentProductId = $(this).data('product-id');
  currentRecordingKey = $(this).data('recording-key');

  $('#wc-current-product-id').val(currentProductId);
  $('#wc-current-cart-key').val(currentCartKey);
  $('#wc-current-recording-key').val(currentRecordingKey);

  $.ajax({
  url: wc_recording_params.ajax_url,
  type: 'POST',
  data: {
   action: 'get_product_recording',
   security: wc_recording_params.recording_nonce,
   cart_key: currentCartKey
  },
  success: function(response) {
   if (response.success && response.data.recording_id) {
    $('#wc-recording-alert').text('Ten produkt ma już nagranie. Nowe nagranie zastąpi poprzednie.').show();
   } else {
    $('#wc-recording-alert').text(wc_recording_params.warning_text).show();
   }
  }
  });

  $('#wc-recording-modal').show();
  $('#wc-recording-modal-overlay').show();
 });

 $('.wc-recording-close, #wc-recording-modal-overlay').click(function() {
  stopRecording();
  $('#wc-recording-modal').hide();
  $('#wc-recording-modal-overlay').hide();
  resetRecordingUI();
 });

 function startRecording() {
 if (isAudioRecording) {
 navigator.mediaDevices.getUserMedia({ audio: true })
 .then(function(stream

 Continue generating
Grok 3 Mini
coin image
30
Upgrade




Ask me anything...



Powered by AITOPIA 
Chat
Ask
Search
Write
Image
ChatFile
Vision
Full Page

Dodaj zmienne środowiskowe
1. Rozwiń sekcję "Environment Variables"
2. Dodaj po kolei (Name → Value):

NEXT_PUBLIC_SUPABASE_URL → https://twojprojekt.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
SUPABASE_SERVICE_ROLE_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
NEXT_PUBLIC_SITE_URL → https://oremus-web.vercel.app
NEXT_PUBLIC_APP_NAME → OREMUS
Teraz kliknij "Deploy"The provided GitHub repository does not contain the requested branch or commit reference. Please ensure the repository is not empty.
Edit
Widzę, że masz problem z deploymentem na Vercel - błąd wskazuje na to, że repozytorium GitHub jest puste lub nie zawiera odpowiedniej gałęzi/commita.

Oto kroki do rozwiązania tego problemu:

1. Sprawdź repozytorium GitHub
Najpierw upewnij się, że Twoje repozytorium zawiera kod:

Przejdź do swojego repozytorium na GitHub
Sprawdź czy zawiera pliki projektu Next.js
Upewnij się, że jest główna gałąź (main lub master)
2. Jeśli repozytorium jest puste, wypchnij kod:
bash
# W folderze z projektem lokalnie
git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin https://github.com/twoja-nazwa/twoje-repo.git
git push -u origin main
3. Po wypchniięciu kodu do GitHub:
Wróć do Vercel i spróbuj ponownie
Import projektu z GitHub
Dodaj zmienne środowiskowe (jak podałeś):
NEXT_PUBLIC_SUPABASE_URL → https://twojprojekt.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
SUPABASE_SERVICE_ROLE_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
NEXT_PUBLIC_SITE_URL → https://oremus-web.vercel.app
NEXT_PUBLIC_APP_NAME → OREMUS
Kliknij Deploy
4. Alternatywnie - sprawdź ustawienia w Vercel:
W przypadku istniejącego projektu, sprawdź sekcję Settings → Git
Upewnij się, że poprawnie połączone jest repozytorium
Sprawdź czy wybrana jest właściwa gałąź (main/master)
Czy możesz sprawdzić status swojego repozytorium GitHub i dać znać, czy zawiera kod projektu?




wcisnolem jeszcze raz deploy i Deployment
Once you're ready, start deploying to see the progress here…
Import a different Git Repository →Browse Templates →
* Home
* Docs
* Guides
* Help
* Contact
* Legal
All systems normal
Select a display theme:systemlightdark
© 2025, Vercel Inc.
error:Project "oremus-web" already exists, please use a new name.

Edit
Widzę problem - projekt o nazwie "oremus-web" już istnieje na Vercel. Oto jak to rozwiązać:

Opcja 1: Zmień nazwę projektu (Najłatwiejsze)
W oknie importu zmień nazwę projektu na coś innego, np.:
oremus-web-2025
oremus-app
moj-oremus
oremus-{twoja-nazwa}
Dodaj zmienne środowiskowe (pamiętaj o zmianie URL):
NEXT_PUBLIC_SUPABASE_URL → https://twojprojekt.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
SUPABASE_SERVICE_ROLE_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
NEXT_PUBLIC_SITE_URL → https://twoja-nowa-nazwa.vercel.app
NEXT_PUBLIC_APP_NAME → OREMUS
Kliknij Deploy
Opcja 2: Usuń istniejący projekt
Przejdź do Dashboard Vercel
Znajdź projekt "oremus-web"
Kliknij na projekt → Settings → Advanced
Scroll w dół i kliknij "Delete Project"
Potwierdź usunięcie
Spróbuj ponownie z pierwotną nazwą
Opcja 3: Użyj istniejącego projektu
Jeśli projekt "oremus-web" to Twój projekt:

Przejdź do Dashboard
Kliknij na "oremus-web"
Przejdź do Settings → Environment Variables
Dodaj zmienne środowiskowe
Redeploy projekt
Którą opcję wybierasz? Polecam Opcję 1 - po prostu zmień nazwę na unikalną.




Screenshot 20250612 074108.png
Edit
Świetnie! Widzę, że Twój projekt "oremus-web" został pomyślnie wdrożony na Vercel. Status pokazuje "Ready" co oznacza, że deployment się udał.

Co teraz zrobić:
1. Sprawdź aplikację
Kliknij na przycisk "Visit" (po prawej stronie) lub przejdź bezpośrednio na:

oremus-web.vercel.app
2. Dodaj zmienne środowiskowe
Musisz jeszcze dodać zmienne środowiskowe:

Kliknij na "Settings" (w górnym menu)
Przejdź do "Environment Variables"
Dodaj każdą zmienną:
NEXT_PUBLIC_SUPABASE_URL → https://twojprojekt.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
SUPABASE_SERVICE_ROLE_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
NEXT_PUBLIC_SITE_URL → https://oremus-web.vercel.app
NEXT_PUBLIC_APP_NAME → OREMUS
3. Redeploy po dodaniu zmiennych
Po dodaniu zmiennych środowiskowych:

Przejdź do "Deployments"
Kliknij trzy kropki przy najnowszym deployment
Wybierz "Redeploy"
4. Sprawdź czy działa
Po redeployment sprawdź czy aplikacja działa poprawnie z konfiguracją Supabase.

Czy widzisz aplikację gdy klikniesz "Visit"? I czy możesz przejść do Settings aby dodać zmienne środowiskowe?




404: NOT_FOUNDCode: NOT_FOUNDID: lhr1::mmfsk-1749710367828-f8eba8a07a3c

Edit
Błąd 404 oznacza, że Vercel nie może znaleźć Twojej aplikacji. To prawdopodobnie problem z konfiguracją lub brakiem odpowiednich plików. Sprawdźmy to krok po kroku:

1. Sprawdź repozytorium GitHub
Przejdź do swojego repozytorium GitHub i upewnij się, że zawiera:

package.json
next.config.js (opcjonalnie)
Folder pages/ lub app/ (w zależności od wersji Next.js)
public/ folder
2. Sprawdź Build Logs
W Vercel przejdź do "Deployments"
Kliknij na najnowszy deployment
Sprawdź "Build Logs" - czy są błędy?
3. Sprawdź konfigurację projektu
Przejdź do Settings w Vercel
Sprawdź sekcję "General":
Framework Preset: powinno być "Next.js"
Build Command: npm run build lub yarn build
Output Directory: .next (dla Next.js)
Install Command: npm install lub yarn install
4. Sprawdź struktur plików
Twój projekt powinien mieć strukturę podobną do:

├── package.json
├── next.config.js (opcjonalnie)
├── pages/
│   └── index.js (lub index.tsx)
├── public/
└── styles/
5. Szybka naprawa
Jeśli wszystko wygląda dobrze, spróbuj:

Przejdź do Settings → Git
Kliknij "Reconnect"
Lub zmień branch na właściwy (main/master)
Trigger nowy deployment
Możesz sprawdzić Build Logs i powiedzieć mi, jakie błędy tam widzisz? To pomoże zdiagnozować problem.




404: NOT_FOUNDCode: NOT_FOUNDID: lhr1::tdkpw-1749710681736-f161703f5083
Read our documentation to learn more about this error.

Edit
Ten błąd 404 wskazuje na problem z konfiguracją lub brakiem głównej strony. Sprawdźmy to systematycznie:

1. Najpierw sprawdź Build Logs
W Vercel:

Kliknij na projekt "oremus-web"
Przejdź do "Deployments"
Kliknij na najnowszy deployment
Sprawdź "Build Logs" - poszukaj błędów
2. Sprawdź GitHub Repository
Przejdź do swojego repozytorium i sprawdź czy masz:

Dla Next.js 13+ (App Router):

├── package.json
├── app/
│   ├── layout.tsx (lub .js)
│   └── page.tsx (lub .js)
Dla Next.js 12 i wcześniejszych (Pages Router):

├── package.json
├── pages/
│   └── index.tsx (lub .js)
3. Sprawdź package.json
Upewnij się, że masz w package.json:

json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "next": "^13.0.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  }
}
4. Sprawdź główny plik strony
Jeśli używasz App Router (app/page.tsx):

tsx
export default function Home() {
  return (
    <div>
      <h1>OREMUS - Strona główna</h1>
    </div>
  )
}
Jeśli używasz Pages Router (pages/index.tsx):

tsx
export default function Home() {
  return (
    <div>
      <h1>OREMUS - Strona główna</h1>
    </div>
  )
}
5. Jeśli brakuje plików - dodaj je
Jeśli brakuje głównego pliku strony, utwórz go lokalnie, następnie:

bash
git add .
git commit -m "Add main page"
git push
Możesz sprawdzić Build Logs w Vercel i powiedzieć mi, jakie błędy tam widzisz? To jest kluczowe do rozwiązania problemu.




[07:37:14.969] Running build in Washington, D.C., USA (East) – iad1
[07:37:14.971] Build machine configuration: 2 cores, 8 GB
[07:37:15.039] Cloning github.com/scantagcandles/oremus_web (Branch: main, Commit: 9c9bd47)
[07:37:15.400] Previous build caches not available
[07:37:15.737] Cloning completed: 694.000ms
[07:37:16.288] Running "vercel build"
[07:37:16.780] Vercel CLI 42.2.0
[07:37:17.350] Installing dependencies...
[07:37:21.967] npm warn deprecated @supabase/auth-helpers-shared@0.6.3: This package is now deprecated - please use the @supabase/ssr package instead.
[07:37:22.260] npm warn deprecated @supabase/auth-helpers-react@0.4.2: This package is now deprecated - please use the @supabase/ssr package instead.
[07:37:22.447] npm warn deprecated @supabase/auth-helpers-nextjs@0.8.7: This package is now deprecated - please use the @supabase/ssr package instead.
[07:37:33.089] 
[07:37:33.090] added 486 packages in 15s
[07:37:33.091] 
[07:37:33.091] 166 packages are looking for funding
[07:37:33.091]   run npm fund for details
[07:37:33.281] Running "npm run build"
[07:37:33.412] 
[07:37:33.413] > oremus-web@0.1.0 build
[07:37:33.414] > next build
[07:37:33.414] 
[07:37:34.599] Attention: Next.js now collects completely anonymous telemetry regarding usage.
[07:37:34.601] This information is used to shape Next.js' roadmap and prioritize features.
[07:37:34.603] You can learn more, including how to opt-out if you'd not like to participate in this anonymous program, by visiting the following URL:
[07:37:34.604] https://nextjs.org/telemetry
[07:37:34.604] 
[07:37:34.771]    ▲ Next.js 15.3.3
[07:37:34.772] 
[07:37:34.787]    Creating an optimized production build ...
[07:37:44.959]  ✓ Compiled successfully in 7.0s
[07:37:44.963]    Linting and checking validity of types ...
[07:37:49.105]    Collecting page data ...
[07:37:50.492]    Generating static pages (0/5) ...
[07:37:51.511]    Generating static pages (1/5) 
[07:37:51.512]    Generating static pages (2/5) 
[07:37:51.513]    Generating static pages (3/5) 
[07:37:51.513]  ✓ Generating static pages (5/5)
[07:37:51.860]    Finalizing page optimization ...
[07:37:51.866]    Collecting build traces ...
[07:37:58.132] 
[07:37:58.143] Route (app)                                 Size  First Load JS
[07:37:58.143] ┌ ○ /                                    5.63 kB         107 kB
[07:37:58.143] └ ○ /_not-found                            977 B         102 kB
[07:37:58.143] + First Load JS shared by all             101 kB
[07:37:58.143]   ├ chunks/4bd1b696-67ee12fb04071d3b.js  53.2 kB
[07:37:58.143]   ├ chunks/684-c85650275c47a38c.js       45.9 kB
[07:37:58.143]   └ other shared chunks (total)          1.89 kB
[07:37:58.144] 
[07:37:58.144] 
[07:37:58.145] ○  (Static)  prerendered as static content
[07:37:58.145] 
[07:37:58.191] Build Completed in /vercel/output [41s]
[07:37:58.211] Deploying outputs...
[07:37:59.458] 
[07:37:59.608] Deployment completed
[07:38:21.116] Uploading build cache [174.50 MB]...
[07:38:23.489] Build cache uploaded: 2.377s
[07:38:25.790] Exiting build container

Edit
Świetnie! Build przeszedł pomyślnie! Widzę, że:

✅ Kompilacja zakończona sukcesem - "Compiled successfully in 7.0s"
✅ Strony wygenerowane - 5/5 stron
✅ Deployment ukończony - "Deployment completed"
✅ Główna strona istnieje - Route "/" jest widoczna

Build wygląda dobrze, więc problem może być gdzie indziej. Spróbujmy tych rozwiązań:

1. Sprawdź dokładny URL
Spróbuj tych wersji URL:

https://oremus-web.vercel.app
https://oremus-web-dareks-projects-a1034c55.vercel.app (widziałem to w poprzednim screenie)
2. Wyczyść cache przeglądarki
Ctrl+Shift+R (Windows) lub Cmd+Shift+R (Mac)
Lub otwórz w trybie incognito
3. Sprawdź w Vercel Dashboard
Przejdź do projektu oremus-web
Kliknij "Visit" ponownie
Sprawdź sekcję "Domains" - jaki jest dokładny URL?
4. Dodaj zmienne środowiskowe teraz
Skoro build działa, dodaj zmienne środowiskowe:

Settings → Environment Variables
Dodaj:
NEXT_PUBLIC_SUPABASE_URL → https://twojprojekt.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
SUPABASE_SERVICE_ROLE_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
NEXT_PUBLIC_SITE_URL → https://oremus-web.vercel.app
NEXT_PUBLIC_APP_NAME → OREMUS
Redeploy projekt
Czy możesz sprawdzić dokładny URL w sekcji "Domains" w Vercel i spróbować go w przeglądarce?




[07:37:14.969] Running build in Washington, D.C., USA (East) – iad1
[07:37:14.971] Build machine configuration: 2 cores, 8 GB
[07:37:15.039] Cloning github.com/scantagcandles/oremus_web (Branch: main, Commit: 9c9bd47)
[07:37:15.400] Previous build caches not available
[07:37:15.737] Cloning completed: 694.000ms
[07:37:16.288] Running "vercel build"
[07:37:16.780] Vercel CLI 42.2.0
[07:37:17.350] Installing dependencies...
[07:37:21.967] npm warn deprecated @supabase/auth-helpers-shared@0.6.3: This package is now deprecated - please use the @supabase/ssr package instead.
[07:37:22.260] npm warn deprecated @supabase/auth-helpers-react@0.4.2: This package is now deprecated - please use the @supabase/ssr package instead.
[07:37:22.447] npm warn deprecated @supabase/auth-helpers-nextjs@0.8.7: This package is now deprecated - please use the @supabase/ssr package instead.
[07:37:33.089] 
[07:37:33.090] added 486 packages in 15s
[07:37:33.091] 
[07:37:33.091] 166 packages are looking for funding
[07:37:33.091]   run npm fund for details
[07:37:33.281] Running "npm run build"
[07:37:33.412] 
[07:37:33.413] > oremus-web@0.1.0 build
[07:37:33.414] > next build
[07:37:33.414] 
[07:37:34.599] Attention: Next.js now collects completely anonymous telemetry regarding usage.
[07:37:34.601] This information is used to shape Next.js' roadmap and prioritize features.
[07:37:34.603] You can learn more, including how to opt-out if you'd not like to participate in this anonymous program, by visiting the following URL:
[07:37:34.604] https://nextjs.org/telemetry
[07:37:34.604] 
[07:37:34.771]    ▲ Next.js 15.3.3
[07:37:34.772] 
[07:37:34.787]    Creating an optimized production build ...
[07:37:44.959]  ✓ Compiled successfully in 7.0s
[07:37:44.963]    Linting and checking validity of types ...
[07:37:49.105]    Collecting page data ...
[07:37:50.492]    Generating static pages (0/5) ...
[07:37:51.511]    Generating static pages (1/5) 
[07:37:51.512]    Generating static pages (2/5) 
[07:37:51.513]    Generating static pages (3/5) 
[07:37:51.513]  ✓ Generating static pages (5/5)
[07:37:51.860]    Finalizing page optimization ...
[07:37:51.866]    Collecting build traces ...
[07:37:58.132] 
[07:37:58.143] Route (app)                                 Size  First Load JS
[07:37:58.143] ┌ ○ /                                    5.63 kB         107 kB
[07:37:58.143] └ ○ /_not-found                            977 B         102 kB
[07:37:58.143] + First Load JS shared by all             101 kB
[07:37:58.143]   ├ chunks/4bd1b696-67ee12fb04071d3b.js  53.2 kB
[07:37:58.143]   ├ chunks/684-c85650275c47a38c.js       45.9 kB
[07:37:58.143]   └ other shared chunks (total)          1.89 kB
[07:37:58.144] 
[07:37:58.144] 
[07:37:58.145] ○  (Static)  prerendered as static content
[07:37:58.145] 
[07:37:58.191] Build Completed in /vercel/output [41s]
[07:37:58.211] Deploying outputs...
[07:37:59.458] 
[07:37:59.608] Deployment completed
[07:38:21.116] Uploading build cache [174.50 MB]...
[07:38:23.489] Build cache uploaded: 2.377s
[07:38:25.790] Exiting build container

Edit
Build wygląda świetnie! Problem 404 może być spowodowany tym, że próbujesz wejść na niewłaściwy URL lub deployment jeszcze nie jest w pełni aktywny.

Sprawdźmy to systematycznie:

1. Sprawdź dokładny URL domeny
W Vercel Dashboard:

Przejdź do projektu "oremus-web"
Sprawdź sekcję "Domains" - jaki dokładny URL tam widzisz?
Prawdopodobnie będzie to jeden z:

oremus-web.vercel.app
oremus-web-git-main-dareks-projects-a1034c55.vercel.app
oremus-qteatdg-dareks-projects-a1034c55.vercel.app
2. Poczekaj kilka minut
Czasami deployment potrzebuje kilku minut aby być w pełni aktywny. Spróbuj ponownie za 2-3 minuty.

3. Spróbuj w trybie incognito
Otwórz przeglądarkę w trybie incognito i wklej URL.

4. Sprawdź status w Vercel
W projekcie sprawdź czy:

Status deployment to "Ready" (zielony kolor)
Nie ma żadnych błędów w "Runtime Logs"
5. Jeśli nadal 404 - wymuszę nowy deployment
Przejdź do Settings → Git
Kliknij "Redeploy" lub
Zrób mały commit do GitHub:
bash
# Lokalnie
git commit --allow-empty -m "Force redeploy"
git push
Możesz sprawdzić w Vercel Dashboard jaki dokładny URL jest przypisany do Twojego projektu w sekcji "Domains"? To będzie kluczowe do rozwiązania problemu.




Created
scantagcandles10m ago
Status
ReadyLatest
Time to Ready
44s9m ago
Environment
ProductionCurrent
Domains
oremus-web.vercel.app
+1
oremus-web-git-main-dareks-projects-a1034c55.vercel.app
oremus-qtcaa1dtg-dareks-projects-a1034c55.vercel.app
Source
main
9c9bd47Initial commit kazdy daje 404

Edit
Widzę, że masz 3 domeny ale wszystkie dają 404. To dziwne, bo build przeszedł pomyślnie. Spróbujmy kilku rozwiązań:

1. Sprawdź Runtime Logs
W Vercel Dashboard:

Kliknij na najnowszy deployment
Przejdź do "Runtime Logs"
Sprawdź czy są jakieś błędy
2. Sprawdź Functions
W projekcie przejdź do "Functions"
Sprawdź czy są jakieś błędy
3. Sprawdź konfigurację w Settings
Przejdź do Settings → General
Sprawdź czy:
Framework Preset: Next.js
Build Command: npm run build
Output Directory: (pozostaw puste dla Next.js)
Install Command: npm install
4. Sprawdź strukturę projektu na GitHub
Przejdź do github.com/scantagcandles/oremus_web i sprawdź czy masz:

app/page.tsx lub app/page.js (dla App Router)
lub pages/index.tsx lub pages/index.js (dla Pages Router)
5. Wymuś pełny redeploy
Settings → Git
Disconnect i Reconnect repository
Lub usuń projekt i stwórz od nowa
6. Sprawdź w browser dev tools
Naciśnij F12 na stronie z błędem 404 i sprawdź:

Network tab - czy są jakieś błędy?
Console - czy są jakieś błędy JavaScript?
Możesz sprawdzić Runtime Logs i powiedzieć mi co tam widzisz? To może ujawnić rzeczywisty problem, mimo że build się udał.

Alternatywnie, jeśli to nie działa, możemy spróbować stworzyć nowy projekt od zera z inną nazwą.




jak zmienic custom domain na darmowa z vercel

Edit
Na Vercel możesz używać darmowych domen .vercel.app bez żadnych problemów. Oto jak to zrobić:

Darmowe domeny Vercel
Automatycznie dostaniesz darmowe domeny:

nazwa-projektu.vercel.app
nazwa-projektu-git-branch-username.vercel.app
Jak zmienić/zarządzać domenami:
1. Usuń custom domain (jeśli masz)
Settings → Domains
Znajdź custom domain
Kliknij trzy kropki → Remove
2. Zmień nazwę projektu (zmieni URL)
Settings → General
Project Name → wpisz nową nazwę
Save
Nowy URL będzie: nowa-nazwa.vercel.app
3. Użyj istniejącej domeny .vercel.app
Twoje obecne domeny są już darmowe:

✅ oremus-web.vercel.app
✅ oremus-web-git-main-dareks-projects-a1034c55.vercel.app
Jeśli chcesz krótszą domenę:
Zmień nazwę projektu na coś krótszego jak:
oremus → oremus.vercel.app
my-app → my-app.vercel.app
test123 → test123.vercel.app
Uwaga:
Domeny .vercel.app są zawsze darmowe
Custom domeny (jak .com, .pl) wymagają planu Pro ($20/miesiąc)
Nie musisz nic zmieniać - Twoje obecne domeny są już darmowe!
Czy chcesz zmienić nazwę projektu na krótszą, czy zostać przy obecnych domenach?




Assigning Custom Domains
oremus-web.vercel.app
·
Custom Domain
Manage

Edit
Widzę, że próbujesz zarządzać domenami. Oto co musisz wiedzieć:

Twoja obecna sytuacja:
✅ oremus-web.vercel.app - to jest DARMOWA domena Vercel
❌ Problemy z 404 - ale nie z powodu domeny

Co możesz zrobić:
1. Pozostań przy darmowej domenie
oremus-web.vercel.app jest już darmowa i nie wymagana żadnych opłat
Nie klikaj "Custom Domain" - to jest dla płatnych domen
2. Jeśli chcesz krótszą darmową domenę:
Settings → General
Project Name → zmień na np. oremus
Save
Nowa darmowa domena: oremus.vercel.app
3. Skupmy się na naprawieniu błędu 404:
Problem nie jest w domenie, ale w aplikacji. Sprawdźmy:

Runtime Logs - czy są błędy?
GitHub repo - czy masz plik app/page.tsx lub pages/index.tsx?
Wymuszenie nowego deployment
Ważne:
NIE klikaj "Custom Domain" - to dla płatnych domen (.com, .pl itp.)
Twoja .vercel.app domena jest już darmowa i gotowa do użycia
Problem 404 to inne zagadnienie niż domena
Czy chcesz skupić się na naprawieniu błędu 404, czy zmienić nazwę projektu na krótszą?




Name
Latest commit
scantagcandles
Initial commit
9c9bd47 · 17 minutes ago
History
2 Commits
app
Initial commit
17 minutes ago
public
Initial commit from Create Next App
1 hour ago
.gitignore
Initial commit from Create Next App
1 hour ago
README.md
Initial commit from Create Next App
1 hour ago
eslint.config.mjs
Initial commit from Create Next App
1 hour ago
next.config.ts
Initial commit from Create Next App
1 hour ago
package-lock.json
Initial commit
17 minutes ago
package.json
Initial commit
17 minutes ago
postcss.config.js
Initial commit
17 minutes ago
postcss.config.mjs
Initial commit from Create Next App
1 hour ago
tailwind.config.ts
Initial commit
17 minutes ago
tsconfig.json
Initial commit from Create Next App
1 hour ago

Edit
Świetnie! Widzę strukturę Twojego projektu na GitHub. Masz folder app/ co oznacza, że używasz Next.js 13+ z App Router. To jest poprawne.

Sprawdźmy co może powodować błąd 404:

Sprawdźmy zawartość folderu app/
Kliknij na folder app/ w GitHub i sprawdź czy masz:

layout.tsx lub layout.js
page.tsx lub page.js
globals.css
Możliwe przyczyny błędu 404:
1. Brak głównego pliku strony
W folderze app/ musi być plik page.tsx lub page.js

2. Błędna struktura pliku
Plik powinien exportować domyślną funkcję:

tsx
export default function Home() {
  return (
    <div>
      <h1>OREMUS</h1>
    </div>
  )
}
3. Błędny layout.tsx
Sprawdź czy app/layout.tsx ma poprawną strukturę

Szybka naprawa:
Opcja A: Sprawdź pliki na GitHub
Kliknij folder app/
Pokaż mi co tam widzisz
Opcja B: Dodaj brakujące pliki
Jeśli brakuje app/page.tsx, utwórz go lokalnie:

tsx
// app/page.tsx
export default function Home() {
  return (
    <main>
      <h1>OREMUS - Aplikacja działa!</h1>
      <p>Witaj w aplikacji OREMUS</p>
    </main>
  )
}
Następnie:

bash
git add .
git commit -m "Add main page"
git push
Możesz kliknąć na folder app/ w GitHub i powiedzieć mi jakie pliki tam widzisz?




Name
Last commit message
Last commit date
parent directory
..
favicon.ico
Initial commit from Create Next App
1 hour ago
globals.css
Initial commit
17 minutes ago
layout.tsx
Initial commit from Create Next App
1 hour ago
page.tsx

Edit
Świetnie! Widzę, że masz wszystkie potrzebne pliki:

✅ layout.tsx
✅ page.tsx
✅ globals.css
✅ favicon.ico
To oznacza, że struktura projektu jest poprawna. Sprawdźmy zawartość głównego pliku strony:

Sprawdź zawartość page.tsx
Kliknij na plik page.tsx w GitHub i pokaż mi jego zawartość. Plik powinien wyglądać mniej więcej tak:

tsx
export default function Home() {
  return (
    <main>
      <h1>Welcome to Next.js!</h1>
    </main>
  )
}
Możliwe przyczyny 404 mimo poprawnych plików:
1. Problem z cache
Vercel może mieć problem z cache
Spróbuj "Force Redeploy"
2. Problem z Next.js 15.3.3
Najnowsza wersja może mieć bugi
Możemy spróbować downgrade do stabilnej wersji
3. Problem z konfiguracją TypeScript
Sprawdźmy czy nie ma błędów w TypeScript
Rozwiązania:
1. Force Redeploy w Vercel
Deployments
Kliknij trzy kropki przy najnowszym deployment
Redeploy
2. Sprawdź czy lokalna wersja działa
Lokalnie uruchom:

bash
npm run dev
I sprawdź czy na localhost:3000 strona się ładuje.

Możesz pokazać mi zawartość pliku page.tsx z GitHub?





import Image from "next/image"; export default function Home() { return ( <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]"> <main className="flex flex-col gap-[32px] row

pasted

Edit
Świetnie! Kod page.tsx wygląda poprawnie - to standardowy plik z create-next-app. Problem nie leży w kodzie.

Widzę, że strona używa obrazki z folderu /public:

/next.svg
/vercel.svg
/file.svg
/window.svg
/globe.svg
Sprawdźmy folder /public
Problem może być w brakujących plikach w folderze public. Sprawdź na GitHub w folderze public/ czy masz wszystkie te pliki:

next.svg
vercel.svg
file.svg
window.svg
globe.svg
Szybkie rozwiązania:
1. Force Redeploy w Vercel
W Vercel Dashboard
Deployments
Kliknij trzy kropki przy najnowszym deployment
"Redeploy"
2. Sprawdź lokalne działanie
bash
npm run dev
Czy na localhost:3000 strona działa?

3. Tymczasowo uprość page.tsx
Zastąp zawartość app/page.tsx prostszym kodem:

tsx
export default function Home() {
  return (
    <main>
      <h1>OREMUS - Aplikacja działa!</h1>
      <p>Test deployment na Vercel</p>
    </main>
  )
}
Następnie:

bash
git add .
git commit -m "Simplify page for testing"
git push
4. Sprawdź zmienne środowiskowe
Dodaj zmienne w Vercel i zrób redeploy.

Czy możesz sprawdzić zawartość folderu public/ na GitHub i spróbować Force Redeploy w Vercel?




Name
Last commit message
Last commit date
parent directory
..
file.svg
Initial commit from Create Next App
1 hour ago
globe.svg
Initial commit from Create Next App
1 hour ago
next.svg
Initial commit from Create Next App
1 hour ago
vercel.svg
Initial commit from Create Next App
1 hour ago
window.svg

Edit
Perfekcyjnie! Wszystkie potrzebne pliki SVG są w folderze public/. Struktura projektu jest w 100% poprawna:

✅ app/page.tsx - poprawny
✅ app/layout.tsx - jest
✅ Wszystkie pliki SVG w public/ - są
✅ Build przeszedł pomyślnie

Problem może być związany z propagacją DNS lub cache Vercel. Spróbujmy tych rozwiązań:

1. Force Redeploy (najważniejsze)
W Vercel Dashboard:

Przejdź do "Deployments"
Znajdź najnowszy deployment
Kliknij trzy kropki (⋯)
Wybierz "Redeploy"
Potwierdź
2. Sprawdź wszystkie domeny
Spróbuj każdą z tych domen w nowej karcie incognito:

https://oremus-web.vercel.app
https://oremus-web-git-main-dareks-projects-a1034c55.vercel.app
https://oremus-qtcaa1dtg-dareks-projects-a1034c55.vercel.app
3. Wyczyść DNS cache
W wierszu poleceń:

bash
# Windows
ipconfig /flushdns

# Mac
sudo dscacheutil -flushcache
4. Sprawdź status Vercel
Przejdź na status.vercel.com i sprawdź czy nie ma problemów z platformą.

5. Jeśli nadal nie działa - test z prostszą stroną
Zamień app/page.tsx na prosty test:

tsx
export default function Home() {
  return <h1>OREMUS TEST - Czy to działa?</h1>
}
Zacznij od Force Redeploy - to często rozwiązuje problem z 404 mimo poprawnego buildu.




nadal 404 [07:58:56.761] Running build in Washington, D.C., USA (East) – iad1
[07:58:56.762] Build machine configuration: 2 cores, 8 GB
[07:58:56.776] Cloning github.com/scantagcandles/oremus_web (Branch: main, Commit: 9c9bd47)
[07:58:56.783] Skipping build cache, deployment was triggered without cache.
[07:58:57.049] Cloning completed: 273.000ms
[07:58:57.415] Running "vercel build"
[07:58:57.957] Vercel CLI 42.2.0
[07:58:58.655] Installing dependencies...
[07:59:03.790] npm warn deprecated @supabase/auth-helpers-shared@0.6.3: This package is now deprecated - please use the @supabase/ssr package instead.
[07:59:03.951] npm warn deprecated @supabase/auth-helpers-react@0.4.2: This package is now deprecated - please use the @supabase/ssr package instead.
[07:59:04.232] npm warn deprecated @supabase/auth-helpers-nextjs@0.8.7: This package is now deprecated - please use the @supabase/ssr package instead.
[07:59:16.813] 
[07:59:16.813] added 486 packages in 18s
[07:59:16.813] 
[07:59:16.813] 166 packages are looking for funding
[07:59:16.814]   run npm fund for details
[07:59:16.996] Running "npm run build"
[07:59:17.138] 
[07:59:17.138] > oremus-web@0.1.0 build
[07:59:17.139] > next build
[07:59:17.139] 
[07:59:18.395] Attention: Next.js now collects completely anonymous telemetry regarding usage.
[07:59:18.395] This information is used to shape Next.js' roadmap and prioritize features.
[07:59:18.395] You can learn more, including how to opt-out if you'd not like to participate in this anonymous program, by visiting the following URL:
[07:59:18.395] https://nextjs.org/telemetry
[07:59:18.395] 
[07:59:18.604]    ▲ Next.js 15.3.3
[07:59:18.604] 
[07:59:18.620]    Creating an optimized production build ...
[07:59:28.541]  ✓ Compiled successfully in 6.0s
[07:59:28.546]    Linting and checking validity of types ...
[07:59:32.585]    Collecting page data ...
[07:59:33.996]    Generating static pages (0/5) ...
[07:59:34.972]    Generating static pages (1/5) 
[07:59:34.972]    Generating static pages (2/5) 
[07:59:34.972]    Generating static pages (3/5) 
[07:59:34.972]  ✓ Generating static pages (5/5)
[07:59:35.322]    Finalizing page optimization ...
[07:59:35.325]    Collecting build traces ...
[07:59:41.421] 
[07:59:41.431] Route (app)                                 Size  First Load JS
[07:59:41.432] ┌ ○ /                                    5.63 kB         107 kB
[07:59:41.432] └ ○ /_not-found                            977 B         102 kB
[07:59:41.432] + First Load JS shared by all             101 kB
[07:59:41.433]   ├ chunks/4bd1b696-67ee12fb04071d3b.js  53.2 kB
[07:59:41.433]   ├ chunks/684-c85650275c47a38c.js       45.9 kB
[07:59:41.433]   └ other shared chunks (total)          1.89 kB
[07:59:41.433] 
[07:59:41.433] 
[07:59:41.434] ○  (Static)  prerendered as static content
[07:59:41.434] 
[07:59:41.481] Build Completed in /vercel/output [43s]
[07:59:41.500] Deploying outputs...
[07:59:42.841] 
[07:59:42.977] Deployment completed

Edit
To bardzo dziwne! Build jest w 100% poprawny - strona główna / jest generowana poprawnie jako static content. Problem musi być gdzie indziej.

Sprawdźmy kilka rzeczy:

1. Sprawdź Runtime Logs
W Vercel Dashboard:

Kliknij na najnowszy deployment
Przejdź do zakładki "Runtime Logs"
Odśwież stronę w przeglądarce
Sprawdź czy pojawiają się jakieś błędy w Runtime Logs
2. Sprawdź Functions
W projekcie przejdź do "Functions"
Sprawdź czy nie ma błędów
3. Test z curl/wget
Otwórz terminal i sprawdź:

bash
curl -I https://oremus-web.vercel.app
Lub w przeglądarce otwórz Developer Tools (F12) → Network → odśwież stronę i zobacz jaki status HTTP dostaje.

4. Sprawdź czy to problem z routing
Możliwe, że Next.js 15.3.3 ma bug. Spróbuj:

Opcja A: Downgrade Next.js
W package.json zmień:

json
{
  "dependencies": {
    "next": "14.2.15"
  }
}
Opcja B: Dodaj next.config.ts
Utwórz/edytuj next.config.ts:

typescript
/** @type {import('next').NextConfig} */
const nextConfig = {
  trailingSlash: false,
  output: 'standalone'
}

module.exports = nextConfig
5. Sprawdź czy lokalna wersja działa
Lokalnie uruchom:

bash
npm run dev
Czy na localhost:3000 strona się ładuje?

Zacznij od sprawdzenia Runtime Logs - to może pokazać rzeczywisty błąd podczas próby dostępu do strony.




run time pusty

Edit
Runtime Logs są puste, co oznacza, że request w ogóle nie dochodzi do aplikacji. To wskazuje na problem z routingiem lub konfiguracją Vercel.

Sprawdźmy konfigurację projektu
1. Sprawdź Settings → General
W Vercel Dashboard → Settings → General sprawdź:

Framework Preset: powinno być "Next.js"
Build Command: npm run build
Output Directory: (pozostaw puste)
Install Command: npm install
Node.js Version: 18.x lub 20.x
2. Sprawdź next.config.ts
Na GitHub sprawdź zawartość next.config.ts. Pokaż mi co tam jest.

3. Test z innym projektem
Stwórzmy szybki test:

Utwórz nowy projekt na Vercel
Wybierz template "Next.js"
Deploy i sprawdź czy działa
4. Problem może być w next.config.ts
Jeśli next.config.ts zawiera jakąś konfigurację, spróbuj ją uprościć:

typescript
/** @type {import('next').NextConfig} */
const nextConfig = {}

export default nextConfig
5. Dodaj vercel.json
Utwórz plik vercel.json w root projektu:

json
{
  "framework": "nextjs"
}
6. Sprawdź czy problem nie jest w DNS
Spróbuj innych narzędzi:

https://dnschecker.org - wpisz oremus-web.vercel.app
https://www.whatsmydns.net
Możesz sprawdzić zawartość next.config.ts na GitHub i ustawienia w Settings → General w Vercel?





Skip to content darek's projects darek's projects Hobby oremus-web Project Settings Go to Team Settings Search... General Build and Deployment Domains Environments Environment Variables Git Integrations Deployment Protection Functions Data Cache Cron Jobs Project Members

pasted

Edit
Widzę problem! W ustawieniach Vercel jest napisane "No framework detected" - to oznacza, że Vercel nie rozpoznał Twojego projektu jako aplikacji Next.js.

Rozwiązanie:
1. Ustaw poprawny Framework Preset
W Vercel Dashboard:

Przejdź do Settings → General
W sekcji "Framework Settings" zmień z "Other" na "Next.js"
Ustaw Build Command: npm run build
Ustaw Output Directory: (pozostaw puste)
Zapisz zmiany
2. Sprawdź package.json
Upewnij się, że w GitHub w pliku package.json masz:

json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "next": "15.3.3",
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  }
}
3. Wymuszenie nowego deployment
Po zmianie ustawień:

Przejdź do "Deployments"
Kliknij trzy kropki przy najnowszym deployment
Wybierz "Redeploy"
4. Alternatywnie - dodaj vercel.json
Utwórz plik vercel.json w root projektu:

json
{
  "framework": "nextjs"
}
Następnie wypchnij do GitHub:

bash
git add vercel.json
git commit -m "Add vercel.json config"
git push
Problem leży w tym, że Vercel traktuje Twój projekt jako "statyczne pliki" zamiast aplikacji Next.js.
Po ustawieniu Framework Preset na "Next.js" i redeploy, aplikacja powinna działać poprawnie.

Czy możesz sprawdzić ustawienia w Settings → General i zmienić Framework na Next.js?




General
Build and Deployment
Domains
Environments
Environment Variables
Git
Integrations
Deployment Protection
Functions
Data Cache
Cron Jobs
Project Members
Log Drains
Security
Secure Compute
Advanced gdzie mam to zmienic krok po kroku

Edit
Oto krok po kroku jak zmienić ustawienia Framework w Vercel:

Krok po kroku - zmiana Framework:
1. Przejdź do Settings → Build and Deployment
Kliknij na "Build and Deployment" (drugi na liście)
2. Znajdź sekcję "Framework Preset"
Przewiń w dół do sekcji "Framework Preset"
Zobaczysz dropdown menu z aktualną wartością
3. Zmień Framework
Kliknij na dropdown "Framework Preset"
Wybierz "Next.js" z listy
Automatycznie wypełnią się pola:
Build Command: npm run build
Output Directory: .next
Install Command: npm install
4. Zapisz zmiany
Kliknij przycisk "Save" na dole
5. Wymuszenie nowego deployment
Przejdź do zakładki "Deployments"
Znajdź najnowszy deployment
Kliknij trzy kropki (⋯) obok deployment
Wybierz "Redeploy"
Potwierdź "Redeploy"
Co powinieneś zobaczyć po zmianie:
Po zmianie Framework Preset na Next.js, w kolejnym deployment powinieneś zobaczyć w Build Logs:

✅ Framework: Next.js
✅ Build Command: npm run build
✅ Poprawne parsowanie aplikacji Next.js
Czy widzisz sekcję "Framework Preset" w Build and Deployment?




Framework Settings
When using a framework for a new project, it will be automatically detected. As a result, several project settings are automatically configured to achieve the best result. You can override them below.
Configuration Settings in the current Production deployment differ from your current Project Settings.
Production Overrides
oremus-a9mvdpy7c-dareks-projects-a1034c55.vercel.app
Project Settings

Edit
Widzę problem! Vercel pokazuje, że są różnice między ustawieniami Production a Project Settings. Oto jak to naprawić:

Krok po kroku - naprawa Framework Settings:
1. Sprawdź aktualny Framework
Pod "Framework Settings" powinieneś zobaczyć dropdown z aktualną wartością. Prawdopodobnie jest ustawiony na "Other".

2. Zmień Framework na Next.js
Kliknij na dropdown Framework Preset
Wybierz "Next.js"
3. Automatycznie wypełnią się pola:
Build Command: npm run build
Output Directory: .next
Install Command: npm install
4. Kliknij "Save"
5. Rozwiąż konflikt Production Overrides
Po zapisaniu zobaczysz prawdopodobnie powiadomienie o różnicach. Kliknij przycisk:

"Apply to Production" lub
"Update Production Settings"
6. Redeploy
Przejdź do "Deployments"
Kliknij trzy kropki przy najnowszym deployment
Wybierz "Redeploy"
Lub alternatywnie - użyj Production Overrides:
Jeśli widzisz link do Production Overrides, kliknij na niego i:

Ustaw Framework na "Next.js"
Zapisz zmiany
Redeploy
Jaki Framework jest aktualnie wybrany w dropdown? I czy widzisz przycisk "Apply to Production"?




Framework Settings
When using a framework for a new project, it will be automatically detected. As a result, several project settings are automatically configured to achieve the best result. You can override them below.
Configuration Settings in the current Production deployment differ from your current Project Settings.
Production Overrides
oremus-a9mvdpy7c-dareks-projects-a1034c55.vercel.app
Framework
Project Settings
Learn more about Build and Development Settings
Save
Root Directory
The directory within your project, where your code is located. Leave this field empty if your code is not located in a subdirectory.
Include files outside the root directory in the Build Step.
Enabled
Skip deployments when there are no changes to the root directory or its dependencies.
Disabled
Learn more about Root Directory
Save
Node.js Version
The version of Node.js that is used in the Build Step and for Serverless Functions. A new Deployment is required for your changes to take effect.
22.x20.x18.x
Learn more about Node.js Version
Save
Prioritize Production Builds
Builds for Production environment will be prioritized over Pre-Production environments.
Enabled
Learn more about Prioritize Production Builds
Save
On-Demand Concurrent Builds
Instantly scale build capacity to skip the queue, even if all build slots are in use. You can also choose a larger build machine; charges apply per minute if it exceeds your team's pre-committed concurrency.
Disabled

Standard performance
Default4 vCPUs8 GB Memory
Cost-effective option for lightweight apps and APIs

Enhanced performance
8 vCPUs16 GB Memory
Increased compute, ideal for large applications, builds will be charged on demand per minute
This feature is available on the Pro plan
* Home
* Docs
* Guides
* Help
* Contact
* Legal
All systems normal
Select a display theme:systemlightdark
© 2025, Vercel Inc.

Edit
Widzę, że nie pokazałeś mi dropdown Framework! Oto dokładne kroki:

Znajdź i zmień Framework:
1. W sekcji "Framework Settings"
Pod tekstem "Configuration Settings in the current Production deployment differ from your current Project Settings." powinieneś zobaczyć:

Framework (z dropdownem obok)
2. Kliknij na dropdown Framework
Powinien być tam obecnie ustawiony "Other" lub brak wartości
Kliknij na ten dropdown
3. Wybierz "Next.js"
Z listy wybierz "Next.js"
4. Kliknij "Save"
Kliknij przycisk "Save" pod Framework
5. Następnie kliknij link "Production Overrides"
Kliknij na link "oremus-a9mvdpy7c-dareks-projects-a1034c55.vercel.app"
To otworzy ustawienia Production
6. W Production też ustaw Next.js
Tam też ustaw Framework na "Next.js"
Zapisz
7. Redeploy
Wróć do Deployments
Redeploy projekt
Czy widzisz dropdown obok słowa "Framework"? Jaka jest tam aktualnie wybrana wartość?

Jeśli nie widzisz dropdowna, spróbuj odświeżyć stronę (F5) lub wyloguj się i zaloguj ponownie do Vercel.




2. Kliknij na dropdown Framework
* Powinien być tam obecnie ustawiony "Other" lub brak wartości jest siwe nie da sie wybrac

Edit
Jeśli dropdown Framework jest szary i nie da się kliknąć, to znaczy, że Vercel nie może automatycznie wykryć projektu. Oto jak to naprawić:

Rozwiązanie - dodaj next.config.js:
1. Dodaj plik next.config.js do projektu
Przejdź do swojego repozytorium GitHub scantagcandles/oremus_web i utwórz nowy plik next.config.js z zawartością:

javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
}

module.exports = nextConfig
2. Lub edytuj istniejący next.config.ts
Jeśli masz już next.config.ts, zmień go na:

typescript
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  reactStrictMode: true,
}

export default nextConfig
3. Wypchnij zmiany
bash
git add next.config.js
git commit -m "Add next.config.js"
git push
4. Usuń i utwórz projekt ponownie
Najłatwiej będzie:

Usuń obecny projekt w Vercel (Settings → Advanced → Delete Project)
Utwórz nowy projekt - tym razem Vercel powinien wykryć Next.js automatycznie
5. Lub wymuszenie przez vercel.json
Alternatywnie dodaj plik vercel.json:

json
{
  "framework": "nextjs",
  "buildCommand": "npm run build"
}
Problem polega na tym, że Vercel nie rozpoznaje projektu jako Next.js. Po dodaniu odpowiedniej konfiguracji dropdown powinien się odblokować.

Która opcja preferujesz - dodanie next.config.js czy usunięcie i ponowne utworzenie projektu?




zrubmy to z visual code jak krok po kroku

Edit
Świetnie! Zrobimy to w Visual Studio Code krok po kroku:

Krok po kroku w Visual Studio Code:
1. Otwórz projekt w VS Code
Otwórz Visual Studio Code
File → Open Folder
Wybierz folder z projektem oremus_web
2. Sprawdź strukturę projektu
W lewym panelu powinieneś zobaczyć:

oremus_web/
├── app/
├── public/
├── package.json
├── next.config.ts (lub brak)
└── inne pliki...
3. Utwórz/edytuj plik next.config.js
Opcja A - jeśli NIE MASZ next.config.ts:

Kliknij prawym na główny folder projektu
New File
Nazwij plik: next.config.js
Wklej kod:
javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
}

module.exports = nextConfig
Opcja B - jeśli MASZ next.config.ts:

Kliknij na next.config.ts
Zastąp zawartość tym kodem:
typescript
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  reactStrictMode: true,
}

export default nextConfig
4. Zapisz plik
Ctrl+S (Windows) lub Cmd+S (Mac)
5. Wypchnij zmiany do GitHub
W terminalu VS Code (Terminal → New Terminal):

bash
git add .
git commit -m "Add next.config.js for Vercel"
git push
6. Sprawdź w Vercel
Wróć do Vercel Dashboard
Projekt powinien automatycznie się przebudować
Sprawdź czy Framework się zmienił
Powiedz mi, czy widzisz plik next.config.ts w swoim projekcie, czy go nie ma?




import type { NextConfig } from 'next'
const nextConfig: NextConfig = {
  reactStrictMode: true,
}
export default nextConfig to dokladmie mam teraz w tym pliku

Edit
Świetnie! Masz już poprawny next.config.ts. Teraz wypchnijmy zmiany do GitHub i sprawdźmy czy to rozwiąże problem.

Wypchnij zmiany do GitHub:
1. W VS Code otwórz Terminal
Terminal → New Terminal (lub Ctrl+` )
2. Sprawdź status Git
bash
git status
3. Dodaj wszystkie zmiany
bash
git add .
4. Stwórz commit
bash
git commit -m "Update next.config.ts for proper Next.js detection"
5. Wypchnij na GitHub
bash
git push
6. Sprawdź w Vercel
Wróć do Vercel Dashboard
Projekt powinien automatycznie rozpocząć nowy deployment
Sprawdź w Deployments czy nowy build się rozpoczął
7. Sprawdź Build Logs
W nowym deployment sprawdź Build Logs - powinieneś zobaczyć:

✅ Framework: Next.js (zamiast "Other")
✅ Poprawne budowanie aplikacji Next.js
8. Jeśli nadal nie działa - sprawdź Settings
Po nowym deployment:

Przejdź do Settings → Build and Deployment
Sprawdź czy Framework dropdown jest teraz aktywny
Jeśli tak, ustaw na "Next.js" i zapisz
Czy udało Ci się wypchnąć zmiany? Widzisz nowy deployment w Vercel?




ale ja nic nie zmienialem juz bulo

Edit
Masz rację! Jeśli plik next.config.ts już był poprawny, to problem leży gdzie indziej.

Sprawdźmy inne rzeczy:
1. Sprawdź package.json
W VS Code kliknij na plik package.json i sprawdź czy masz:

json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build", 
    "start": "next start"
  },
  "dependencies": {
    "next": "15.3.3",
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  }
}
2. Dodaj plik vercel.json
Utwórz nowy plik vercel.json w głównym folderze:

Kliknij prawym na folder główny
New File
Nazwa: vercel.json
Zawartość:
json
{
  "framework": "nextjs",
  "buildCommand": "npm run build"
}
3. Wypchnij vercel.json
W terminalu VS Code:

bash
git add vercel.json
git commit -m "Add vercel.json to force Next.js framework detection"
git push
4. Lub usuń i utwórz projekt ponownie
Najszybszym rozwiązaniem może być:

W Vercel: Settings → Advanced → Delete Project
Utwórz nowy projekt z GitHub repo
Tym razem może wykryć Next.js poprawnie
Sprawdź najpierw package.json - czy ma poprawne scripts? I spróbujmy dodać vercel.json.




Screenshot 20250612 081301.png
to sa moje pliki

Edit
Widzę strukturę plików! Wszystko wygląda poprawnie - masz wszystkie potrzebne pliki Next.js. Problem może być w tym, że Vercel nie odświeżył konfiguracji. Spróbujmy dodać vercel.json:

Dodaj vercel.json:
1. Utwórz nowy plik
Kliknij prawym przyciskiem na pustym miejscu w folderze głównym
New → Text Document (lub użyj VS Code)
Nazwij plik: vercel.json
2. Zawartość pliku vercel.json:
json
{
  "framework": "nextjs"
}
3. Zapisz plik
4. Wypchnij do GitHub
Otwórz Command Prompt lub PowerShell w folderze projektu:

Kliknij w pasku adresu i wpisz cmd
Lub Shift + prawym przyciskiem → Open PowerShell window here
Wykonaj komendy:

bash
git add vercel.json
git commit -m "Add vercel.json"
git push
Alternatywnie - usuń i utwórz projekt ponownie:
Jeśli vercel.json nie pomoże:

1. Usuń projekt w Vercel
Settings → Advanced → Delete Project
Potwierdź usunięcie
2. Utwórz nowy projekt
Idź na vercel.com
New Project
Import z GitHub
Wybierz scantagcandles/oremus_web
Tym razem powinien wykryć Next.js automatycznie
Który sposób chcesz spróbować najpierw - dodanie vercel.json czy usunięcie i ponowne utworzenie projektu?




a to jest {
  "name": "oremus-web",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@stripe/stripe-js": "^2.4.0",
    "@supabase/auth-helpers-nextjs": "^0.8.7",
    "@supabase/auth-helpers-react": "^0.4.2",
    "@supabase/ssr": "^0.1.0",
    "@supabase/supabase-js": "^2.50.0",
    "@tanstack/react-query": "^5.80.7",
    "autoprefixer": "^10.4.21",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "framer-motion": "^11.18.2",
    "lucide-react": "^0.514.0",
    "mapbox-gl": "^3.12.0",
    "next": "15.3.3",
    "postcss": "^8.5.5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.57.0",
    "react-hot-toast": "^2.5.2",
    "react-player": "^2.16.0",
    "tailwind-merge": "^2.6.0",
    "zod": "^3.25.62",
    "zustand": "^4.5.7"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/typography": "^0.5.16",
    "@types/mapbox-gl": "^2.7.21",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.3",
    "tailwindcss": "^3.4.17",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5"
  }
}

Edit
Perfekcyjnie! package.json jest w 100% poprawny - to jest prawidłowa aplikacja Next.js 15.3.3.

Problem leży w tym, że Vercel nie odświeża wykrycia frameworka. Najszybszym rozwiązaniem będzie:

Usuń i utwórz projekt ponownie:
1. Usuń obecny projekt w Vercel
Przejdź do Settings → Advanced
Przewiń w dół do "Delete Project"
Kliknij "Delete Project"
Wpisz nazwę projektu: oremus-web
Potwierdź
2. Utwórz nowy projekt
Idź na vercel.com/new
Import Git Repository
Znajdź scantagcandles/oremus_web
Kliknij "Import"
3. Vercel automatycznie wykryje Next.js
Tym razem powinieneś zobaczyć:

✅ Framework Preset: Next.js (automatycznie wykryte)
✅ Build Command: npm run build
✅ Output Directory: .next
4. Dodaj zmienne środowiskowe
Przed kliknięciem "Deploy":

NEXT_PUBLIC_SUPABASE_URL → https://twojprojekt.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
SUPABASE_SERVICE_ROLE_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
NEXT_PUBLIC_SITE_URL → https://oremus-web.vercel.app
NEXT_PUBLIC_APP_NAME → OREMUS
5. Kliknij "Deploy"
Ten sposób powinien definitywnie rozwiązać problem z wykryciem frameworka. Czy możesz usunąć obecny projekt i utworzyć nowy?




Screenshot 20250612 081719.png
po dodaniu vercel.jonson

Edit
Fantastycznie! 🎉 APLIKACJA DZIAŁA!

Widzę, że strona się załadowała poprawnie - to jest standardowa strona startowa Next.js z logo "NEXT.js" i instrukcjami.

Co się wydarzyło:
✅ Dodanie vercel.json pomogło Vercel rozpoznać projekt jako Next.js
✅ Aplikacja została poprawnie zbudowana
✅ Strona działa na oremus-web.vercel.app

Teraz dodaj zmienne środowiskowe:
1. Przejdź do Vercel Dashboard
Settings → Environment Variables
2. Dodaj każdą zmienną:
NEXT_PUBLIC_SUPABASE_URL → https://twojprojekt.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
SUPABASE_SERVICE_ROLE_KEY → eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
NEXT_PUBLIC_SITE_URL → https://oremus-web.vercel.app
NEXT_PUBLIC_APP_NAME → OREMUS
3. Po dodaniu zmiennych - Redeploy
Deployments → trzy kropki → Redeploy
Problem rozwiązany!
Plik vercel.json z "framework": "nextjs" zmusił Vercel do poprawnego wykrycia i zbudowania aplikacji Next.js.

Teraz aplikacja powinna działać w pełni po dodaniu zmiennych środowiskowych. Świetna robota! 👏




IMG_8409.png
Co to znaczy

Edit
To jest błąd domeny! Wchodzisz na oremus-web.bercel.com zamiast oremus-web.vercel.app.

Problem:
Błędny URL: oremus-web.bercel.com ❌
Poprawny URL: oremus-web.vercel.app ✅
Rozwiązanie:
1. Wpisz poprawny adres:
https://oremus-web.vercel.app
2. Lub sprawdź w Vercel Dashboard:
Przejdź do swojego projektu w Vercel
Kliknij przycisk "Visit"
Lub skopiuj URL z sekcji "Domains"
3. Poprawne domeny to:
oremus-web.vercel.app
oremus-web-git-main-dareks-projects-a1034c55.vercel.app
Co się stało:
Wpisałeś literówkę w adresie - "bercel" zamiast "vercel". Domena bercel.com to zupełnie inna strona (prawdopodobnie parking domain).

Wpisz poprawny adres z "vercel" i aplikacja powinna działać! 🚀









import Image from "next/image"; export default function Home() { return ( <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]"> <main className="flex flex-col gap-[32px] row


Skip to content darek's projects darek's projects Hobby oremus-web Project Settings Go to Team Settings Search... General Build and Deployment Domains Environments Environment Variables Git Integrations Deployment Protection Functions Data Cache Cron Jobs Project Members



Chat

New Conversation

🤓 Explain a complex thing

Explain Artificial Intelligence so that I can explain it to my six-year-old child.


🧠 Get suggestions and create new ideas

Please give me the best 10 travel ideas around the world


💭 Translate, summarize, fix grammar and more…

Translate "I love you" French


GPT-4o Mini
Hello, how can I help you today?
# Poprawiona Wtyczka WooCommerce do Nagrywania Wiadomości Audio/Video

Poniżej przedstawiam poprawioną wersję wtyczki, która:

1. Dodaje panel sterowania z możliwością ustawienia kolorów i odbiorcy email
2. Wyświetla przycisk "Nagraj wiadomość" przy każdym produkcie w koszyku
3. Pozwala na personalizację każdego produktu osobną wiadomością
4. Zapewnia lepszą jakość dźwięku

## 1. Główny kod wtyczki (stwórz plik `woocommerce-product-recording.php`)

```php
<?php
/*
 * Plugin Name: WooCommerce Product Audio/Video Message
 * Description: Allows customers to record personal audio/video messages for each product
 * Version: 2.0
 * Author: Your Name
 */

if (!defined('ABSPATH')) exit;

class WC_Product_Recording {
    private $options;
    
    public function __construct() {
        $this->options = get_option('wc_product_recording_settings');
        
        // Initialize settings
        add_action('admin_init', array($this, 'register_settings'));
        add_action('admin_menu', array($this, 'add_admin_menu'));
        
        // Enqueue scripts and styles
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        
        // Add recording button to cart items
        add_filter('woocommerce_cart_item_name', array($this, 'add_recording_button'), 10, 3);
        
        // Save recording data
        add_action('woocommerce_checkout_create_order_line_item', array($this, 'save_recording_data'), 10, 4);
        
        // Process recordings after payment
        add_action('woocommerce_payment_complete', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_processing', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_completed', array($this, 'process_recordings'));
        
        // AJAX handlers
        add_action('wp_ajax_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_nopriv_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_get_product_recording', array($this, 'get_recording'));
        add_action('wp_ajax_nopriv_get_product_recording', array($this, 'get_recording'));
        
        // Add recording modal to footer
        add_action('wp_footer', array($this, 'recording_modal'));
    }
    
    public function register_settings() {
        register_setting('wc_product_recording_options', 'wc_product_recording_settings', array($this, 'sanitize_settings'));
        
        add_settings_section(
            'wc_product_recording_main',
            'Ustawienia Nagrywania Produktów',
            array($this, 'settings_section_text'),
            'wc-product-recording'
        );
        
        add_settings_field(
            'notification_email',
            'Email Odbiorcy',
            array($this, 'email_field_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'button_color',
            'Kolor Przycisku',
            array($this, 'color_field_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'modal_color',
            'Kolor Modala',
            array($this, 'modal_color_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'max_duration',
            'Maksymalny czas nagrania (sekundy)',
            array($this, 'max_duration_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
    }
    
    public function sanitize_settings($input) {
        $input['notification_email'] = sanitize_email($input['notification_email']);
        $input['button_color'] = sanitize_hex_color($input['button_color']);
        $input['modal_color'] = sanitize_hex_color($input['modal_color']);
        $input['max_duration'] = absint($input['max_duration']);
        return $input;
    }
    
    public function settings_section_text() {
        echo '<p>Konfiguracja funkcji nagrywania wiadomości dla produktów</p>';
    }
    
    public function email_field_render() {
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        ?>
        <input type='email' name='wc_product_recording_settings[notification_email]' value='<?php echo esc_attr($email); ?>' class='regular-text'>
        <?php
    }
    
    public function color_field_render() {
        $color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
        ?>
        <input type='color' name='wc_product_recording_settings[button_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function modal_color_render() {
        $color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
        ?>
        <input type='color' name='wc_product_recording_settings[modal_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function max_duration_render() {
        $duration = isset($this->options['max_duration']) ? $this->options['max_duration'] : 120;
        ?>
        <input type='number' name='wc_product_recording_settings[max_duration]' value='<?php echo esc_attr($duration); ?>' min='10' max='600'>
        <?php
    }
    
    public function add_admin_menu() {
        add_options_page(
            'Ustawienia Nagrywania Produktów',
            'Nagrywanie Produktów',
            'manage_options',
            'wc-product-recording',
            array($this, 'admin_page_content')
        );
    }
    
    public function admin_page_content() {
        ?>
        <div class="wrap">
            <h1>Ustawienia Nagrywania Produktów</h1>
            <form method="post" action="options.php">
                <?php
                settings_fields('wc_product_recording_options');
                do_settings_sections('wc-product-recording');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }
    
    public function enqueue_scripts() {
        if (is_cart() || is_checkout()) {
            $button_color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
            $modal_color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
            
            wp_enqueue_style(
                'wc-recording-style',
                plugin_dir_url(__FILE__) . 'assets/css/recording.css',
                array(),
                '2.0'
            );
            
            // Dynamic CSS with settings
            $custom_css = "
                .wc-record-button {
                    background-color: {$button_color} !important;
                    border-color: {$button_color} !important;
                }
                .wc-recording-modal {
                    background: {$modal_color} !important;
                }
                .wc-recording-modal-header {
                    background: {$button_color} !important;
                }
            ";
            wp_add_inline_style('wc-recording-style', $custom_css);
            
            wp_enqueue_script(
                'recordrtc',
                'https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.min.js',
                array(),
                '5.6.2',
                true
            );
            
            wp_enqueue_script(
                'wc-product-recording',
                plugin_dir_url(__FILE__) . 'assets/js/recording.js',
                array('jquery', 'recordrtc'),
                '2.0',
                true
            );
            
            wp_localize_script('wc-product-recording', 'wc_recording_params', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'recording_nonce' => wp_create_nonce('save_recording_nonce'),
                'warning_text' => __('Prosimy o ciszę w tle podczas nagrywania wiadomości.', 'woocommerce'),
                'recording_text' => __('Nagrywanie w toku...', 'woocommerce'),
                'stop_text' => __('Zatrzymaj nagrywanie', 'woocommerce'),
                'start_audio_text' => __('Nagraj wiadomość audio', 'woocommerce'),
                'start_video_text' => __('Nagraj wiadomość wideo', 'woocommerce'),
                'play_text' => __('Odtwórz nagranie', 'woocommerce'),
                'delete_text' => __('Usuń nagranie', 'woocommerce'),
                'submit_text' => __('Zapisz nagranie', 'woocommerce'),
                'audio_placeholder' => __('Brak nagrania audio', 'woocommerce'),
                'video_placeholder' => __('Brak nagrania wideo', 'woocommerce'),
                'max_time' => isset($this->options['max_duration']) ? $this->options['max_duration'] : 120,
                'audio_only' => __('Tylko audio', 'woocommerce'),
                'video_with_audio' => __('Wideo z audio', 'woocommerce')
            ));
        }
    }
    
    public function add_recording_button($product_name, $cart_item, $cart_item_key) {
        if (is_cart() || is_checkout()) {
            $product_id = $cart_item['product_id'];
            $recording_key = 'recording_' . md5($cart_item_key);
            
            $button_html = '<div class="wc-recording-container">';
            $button_html .= '<button type="button" class="button wc-record-button" ';
            $button_html .= 'data-product-id="' . esc_attr($product_id) . '" ';
            $button_html .= 'data-cart-key="' . esc_attr($cart_item_key) . '" ';
            $button_html .= 'data-recording-key="' . esc_attr($recording_key) . '">';
            $button_html .= __('Nagraj wiadomość', 'woocommerce') . '</button>';
            
            // Add hidden field for the recording ID
            $recording_id = isset($cart_item['recording_id']) ? $cart_item['recording_id'] : '';
            $button_html .= '<input type="hidden" name="cart_recording[' . esc_attr($cart_item_key) . ']" ';
            $button_html .= 'id="recording_' . esc_attr($cart_item_key) . '" value="' . esc_attr($recording_id) . '">';
            
            $button_html .= '</div>';
            
            return $product_name . $button_html;
        }
        
        return $product_name;
    }
    
    public function recording_modal() {
        if (is_cart() || is_checkout()) {
            ?>
            <div id="wc-recording-modal" class="wc-recording-modal">
                <div class="wc-recording-modal-header">
                    <h3><?php _e('Nagraj wiadomość', 'woocommerce'); ?></h3>
                    <span class="wc-recording-close">&times;</span>
                </div>
                <div class="wc-recording-modal-body">
                    <div id="wc-recording-alert" class="woocommerce-message"></div>
                    
                    <div class="wc-recording-type-selector">
                        <button type="button" id="wc-start-audio" class="button">
                            <?php _e('Nagraj wiadomość audio', 'woocommerce'); ?>
                        </button>
                        <button type="button" id="wc-start-video" class="button">
                            <?php _e('Nagraj wiadomość wideo', 'woocommerce'); ?>
                        </button>
                    </div>
                    
                    <div id="wc-recording-controls" style="display:none;">
                        <button type="button" id="wc-stop-recording" class="button">
                            <?php _e('Zatrzymaj nagrywanie', 'woocommerce'); ?>
                        </button>
                        <div id="wc-recording-timer">00:00</div>
                    </div>
                    
                    <div id="wc-recording-preview" style="display:none;">
                        <h4><?php _e('Podgląd nagrania', 'woocommerce'); ?></h4>
                        <audio id="wc-audio-preview" controls style="width:100%;"></audio>
                        <video id="wc-video-preview" controls style="width:100%; max-height:300px; display:none;"></video>
                        
                        <div class="wc-recording-actions">
                            <button type="button" id="wc-submit-recording" class="button button-primary">
                                <?php _e('Zapisz nagranie', 'woocommerce'); ?>
                            </button>
                            <button type="button" id="wc-delete-recording" class="button">
                                <?php _e('Usuń nagranie', 'woocommerce'); ?>
                            </button>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="wc-current-product-id" value="">
                <input type="hidden" id="wc-current-cart-key" value="">
                <input type="hidden" id="wc-current-recording-key" value="">
            </div>
            <div id="wc-recording-modal-overlay" class="wc-recording-modal-overlay"></div>
            <?php
        }
    }
    
    public function save_recording_data($item, $cart_item_key, $values, $order) {
        if (!empty($values['recording_id'])) {
            $item->add_meta_data('_recording_id', $values['recording_id'], true);
        }
    }
    
    public function save_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_FILES['recording']) || !isset($_POST['cart_key']) || !isset($_POST['product_id'])) {
            wp_send_json_error(__('Brak wymaganych danych.', 'woocommerce'));
        }
        
        $upload_dir = wp_upload_dir();
        $recording_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        
        if (!file_exists($recording_dir)) {
            wp_mkdir_p($recording_dir);
        }
        
        $file_name = sanitize_file_name('recording_' . $_POST['cart_key'] . '_' . uniqid() . '.webm');
        $file_path = $recording_dir . '/' . $file_name;
        
        if (move_uploaded_file($_FILES['recording']['tmp_name'], $file_path)) {
            $recording_id = uniqid('rec_');
            
            // Store recording info in cart item
            $cart = WC()->cart;
            $cart_item = $cart->get_cart_item($_POST['cart_key']);
            
            if ($cart_item) {
                $cart->cart_contents[$_POST['cart_key']]['recording_id'] = $recording_id;
                $cart->set_session();
            }
            
            wp_send_json_success(array(
                'recording_id' => $recording_id,
                'file_name' => $file_name,
                'file_path' => $file_path
            ));
        } else {
            wp_send_json_error(__('Błąd podczas zapisywania nagrania.', 'woocommerce'));
        }
    }
    
    public function get_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_POST['cart_key'])) {
            wp_send_json_error(__('Brak klucza koszyka.', 'woocommerce'));
        }
        
        $cart = WC()->cart;
        $cart_item = $cart->get_cart_item($_POST['cart_key']);
        
        if (!$cart_item || !isset($cart_item['recording_id'])) {
            wp_send_json_error(__('Brak nagrania dla tego produktu.', 'woocommerce'));
        }
        
        wp_send_json_success(array(
            'recording_id' => $cart_item['recording_id']
        ));
    }
    
    public function process_recordings($order_id) {
        $order = wc_get_order($order_id);
        $upload_dir = wp_upload_dir();
        $recordings_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        
        $attachments = array();
        $message = "Nowe zamówienie zawiera następujące nagrania:\n\n";
        $has_recordings = false;
        
        foreach ($order->get_items() as $item_id => $item) {
            $recording_id = $item->get_meta('_recording_id');
            
            if ($recording_id) {
                $has_recordings = true;
                $product_name = $item->get_name();
                $message .= "Produkt: {$product_name}\n";
                
                // Find the recording file
                $files = glob($recordings_dir . '/recording_*_' . $recording_id . '*.webm');
                
                if (!empty($files)) {
                    $old_path = $files[0];
                    $new_filename = sanitize_file_name(
                        'order_' . $order_id . 
                        '_item_' . $item_id . 
                        '_' . $recording_id . '.webm'
                    );
                    $new_path = $recordings_dir . '/' . $new_filename;
                    
                    if (rename($old_path, $new_path)) {
                        $attachments[] = $new_path;
                        $message .= "Nagranie: {$new_filename}\n\n";
                    }
                }
            }
        }
        
        if ($has_recordings) {
            $subject = sprintf(__('Nagrania do zamówienia #%s', 'woocommerce'), $order_id);
            $headers = array('Content-Type: text/plain; charset=UTF-8');
            
            wp_mail($email, $subject, $message, $headers, $attachments);
        }
    }
}

new WC_Product_Recording();
```

## 2. JavaScript (`assets/js/recording.js`)

```javascript
jQuery(document).ready(function($) {
    var mediaRecorder;
    var audioChunks = [];
    var videoChunks = [];
    var stream;
    var timerInterval;
    var recordingTime = 0;
    var currentCartKey = '';
    var currentProductId = '';
    var currentRecordingKey = '';
    var isAudioRecording = true;
    
    // Open modal when recording button is clicked
    $(document).on('click', '.wc-record-button', function() {
        currentCartKey = $(this).data('cart-key');
        currentProductId = $(this).data('product-id');
        currentRecordingKey = $(this).data('recording-key');
        
        $('#wc-current-product-id').val(currentProductId);
        $('#wc-current-cart-key').val(currentCartKey);
        $('#wc-current-recording-key').val(currentRecordingKey);
        
        // Check if there's already a recording
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: {
                action: 'get_product_recording',
                security: wc_recording_params.recording_nonce,
                cart_key: currentCartKey
            },
            success: function(response) {
                if (response.success && response.data.recording_id) {
                    $('#wc-recording-alert').text('Ten produkt ma już nagranie. Nowe nagranie zastąpi poprzednie.').show();
                } else {
                    $('#wc-recording-alert').text(wc_recording_params.warning_text).show();
                }
            }
        });
        
        $('#wc-recording-modal').show();
        $('#wc-recording-modal-overlay').show();
    });
    
    // Close modal
    $('.wc-recording-close, #wc-recording-modal-overlay').click(function() {
        stopRecording();
        $('#wc-recording-modal').hide();
        $('#wc-recording-modal-overlay').hide();
        resetRecordingUI();
    });
    
    // Start audio recording
    $('#wc-start-audio').click(function() {
        startRecording(true);
    });
    
    // Start video recording
    $('#wc-start-video').click(function() {
        startRecording(false);
    });
    
    // Stop recording
    $('#wc-stop-recording').click(function() {
        stopRecording();
    });
    
    // Submit recording
    $('#wc-submit-recording').click(function() {
        submitRecording();
    });
    
    // Delete recording
    $('#wc-delete-recording').click(function() {
        deleteRecording();
    });
    
    function startRecording(audioOnly) {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert('Twoja przeglądarka nie obsługuje nagrywania lub nie udzieliłaś/eś wymaganych uprawnień.');
            return;
        }
        
        isAudioRecording = audioOnly;
        
        // Hide type selector, show controls
        $('.wc-recording-type-selector').hide();
        $('#wc-recording-controls').show();
        $('#wc-recording-preview').hide();
        
        $('#wc-recording-alert').text(wc_recording_params.recording_text + ' ' + 
            (audioOnly ? wc_recording_params.audio_only : wc_recording_params.video_with_audio)).show();
        
        var constraints = {
            audio: true,
            video: !audioOnly
        };
        
        navigator.mediaDevices.getUserMedia(constraints)
            .then(function(s) {
                stream = s;
                
                if (audioOnly) {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'audio',
                        mimeType: 'audio/webm',
                        recorderType: RecordRTC.StereoAudioRecorder,
                        desiredSampRate: 44100,
                        numberOfAudioChannels: 1,
                        disableLogs: true,
                        audioBitsPerSecond: 128000 // Higher quality audio
                    });
                } else {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'video',
                        mimeType: 'video/webm;codecs=vp9',
                        disableLogs: true,
                        videoBitsPerSecond: 2500000,
                        audioBitsPerSecond: 128000
                    });
                }
                
                // Start timer
                recordingTime = 0;
                updateTimer();
                timerInterval = setInterval(function() {
                    recordingTime++;
                    updateTimer();
                    if (recordingTime >= wc_recording_params.max_time) {
                        stopRecording();
                    }
                }, 1000);
                
                mediaRecorder.startRecording();
            })
            .catch(function(err) {
                console.error('Error accessing media devices:', err);
                $('#wc-recording-alert').text('Błąd dostępu do mikrofonu/kamery: ' + err.message).show();
                resetRecordingUI();
            });
    }
    
    function updateTimer() {
        var minutes = Math.floor(recordingTime / 60);
        var seconds = recordingTime % 60;
        $('#wc-recording-timer').text(
            (minutes < 10 ? '0' + minutes : minutes) + ':' + 
            (seconds < 10 ? '0' + seconds : seconds)
        );
    }
    
    function stopRecording() {
        clearInterval(timerInterval);
        
        if (!mediaRecorder) return;
        
        mediaRecorder.stopRecording(function() {
            $('#wc-recording-alert').text('Nagranie zakończone. Możesz je odsłuchać/obejrzeć przed zapisem.').show();
            
            // Create preview
            var blob = mediaRecorder.getBlob();
            var url = URL.createObjectURL(blob);
            
            if (isAudioRecording) {
                $('#wc-audio-preview').attr('src', url).show();
                $('#wc-video-preview').hide();
            } else {
                $('#wc-video-preview').attr('src', url).show();
                $('#wc-audio-preview').hide();
            }
            
            $('#wc-recording-preview').show();
            
            // Stop all tracks
            if (stream) {
                stream.getTracks().forEach(function(track) {
                    track.stop();
                });
            }
        });
    }
    
    function submitRecording() {
        if (!mediaRecorder) {
            alert('Najpierw wykonaj nagranie');
            return;
        }
        
        var blob = mediaRecorder.getBlob();
        var formData = new FormData();
        formData.append('recording', blob, 'recording.webm');
        formData.append('action', 'save_product_recording');
        formData.append('security', wc_recording_params.recording_nonce);
        formData.append('cart_key', currentCartKey);
        formData.append('product_id', currentProductId);
        
        $('#wc-submit-recording').prop('disabled', true).text('Zapisywanie...');
        
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    $('#wc-recording-alert').text('Nagranie zostało zapisane do tego produktu.').show();
                    
                    // Update the hidden field in cart
                    $('#recording_' + currentCartKey).val(response.data.recording_id);
                    
                    // Close modal after 2 seconds
                    setTimeout(function() {
                        $('#wc-recording-modal').hide();
                        $('#wc-recording-modal-overlay').hide();
                        resetRecordingUI();
                    }, 2000);
                } else {
                    $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + response.data).show();
                    $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
                }
            },
            error: function(xhr, status, error) {
                $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + error).show();
                $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
            }
        });
    }
    
    function deleteRecording() {
        // Just reset the UI, actual file will be overwritten on new submission
        resetRecordingUI();
        $('#recording_' + currentCartKey).val('');
        $('#wc-recording-alert').text('Nagranie zostało usunięte. Możesz nagrać nową wiadomość.').show();
    }
    
    function resetRecordingUI() {
        $('.wc-recording-type-selector').show();
        $('#wc-recording-controls').hide();
        $('#wc-recording-preview').hide();
        $('#wc-recording-timer').text('00:00');
        $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
        
        if (mediaRecorder) {
            mediaRecorder = null;
        }
        
        if (stream) {
            stream.getTracks().forEach(function(track) {
                track.stop();
            });
            stream = null;
        }
        
        clearInterval(timerInterval);
    }
});
```

## 3. CSS (`assets/css/recording.css`)

```css
/* Modal styles */
.wc-recording-modal {
    display: none;
    position: fixed;
    z-index: 9999;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    max-width: 600px;
    border: 1px solid #ddd;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.wc-recording-modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9998;
}

.wc-recording-modal-header {
    padding: 15px;
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.wc-recording-modal-header h3 {
    margin: 0;
    font-size: 1.2em;
}

.wc-recording-close {
    font-size: 24px;
    cursor: pointer;
}

.wc-recording-modal-body {
    padding: 15px;
}

/* Button styles */
.wc-record-button {
    margin-top: 10px !important;
    display: inline-block !important;
}

.wc-recording-type-selector {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
}

.wc-recording-type-selector button {
    flex: 1;
}

/* Recording controls */
#wc-recording-controls {
    margin: 15px 0;
    display: flex;
    align-items: center;
    gap: 15px;
}

#wc-recording-timer {
    font-family: monospace;
    font-size: 1.2em;
}

/* Preview styles */
#wc-recording-preview {
    margin-top: 15px;
}

#wc-recording-preview h4 {
    margin-bottom: 10px;
}

#wc-audio-preview,
#wc-video-preview {
    margin-bottom: 15px;
    display: none;
}

.wc-recording-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
}

/* Alert styles */
#wc-recording-alert {
    padding: 10px;
    margin-bottom: 15px;
    display: none;
}

/* Responsive adjustments */
@media (max-width: 600px) {
    .wc-recording-type-selector {
        flex-direction: column;
    }
    
    #wc-recording-controls {
        flex-direction: column;
        align-items: flex-start;
    }
}
```

## Instrukcja instalacji:

1. Stwórz folder `/woocommerce-product-recording` w katalogu `/wp-content/plugins/`
2. Umieść w nim plik `woocommerce-product-recording.php` z pierwszym kodem
3. Stwórz strukturę folderów:
   ```
   /woocommerce-product-recording/
   ├── assets/
   │   ├── css/
   │   │   └── recording.css
   │   └── js/
   │       └── recording.js
   └── woocommerce-product-recording.php
   ```
4. Aktywuj wtyczkę w panelu WordPress

## Funkcjonalności:

1. **Panel sterowania**:
   - Ustawienie emaila odbiorcy
   - Wybór kolorów przycisków i modala
   - Ustawienie maksymalnego czasu nagrania

2. **Nagrywanie w koszyku**:
   - Przycisk "Nagraj wiadomość" przy każdym produkcie
   - Możliwość nagrania audio lub wideo
   - Podgląd przed zapisem
   - Timer pokazujący czas nagrania

3. **Przetwarzanie nagrań**:
   - Automatyczne wysyłanie na email po złożeniu zamówienia
   - Nazwy plików zawierają numer zamówienia, produktu i datę
   - Każdy produkt może mieć osobne nagranie

4. **Optymalizacja dźwięku**:
   - Wyższa jakość bitrate (128 kbps)
   - Monit o ciszę w tle przed nagraniem
   - Nagrywanie w formacie WebM dla lepszej kompresji

Wtyczka jest w pełni responsywna i dostosowuje się do różnych rozmiarów ekranu.
GPT-4o Mini
Aby poprawić wtyczkę WooCommerce do nagrywów (nagród), należy wziąć pod uwagę kilka kluczowych aspektów. Oto kilka kroków i wskazówek, które mogą pomóc w aktualizacji lub udoskonaleniu tej wtyczki:
1. Zrozumienie wymagań użytkowników:


Przeprowadź ankiety wśród użytkowników, aby zrozumieć, czego im brakuje w obecnej wersji.

Analizuj opinie wtyczki w repozytorium WordPress i na forach.


2. Dostosowanie funkcji nagród:


Umożliwienie użytkownikom łatwego przyznawania nagród za różnorodne działania, takie jak zakupy, recenzje, polecenia itp.

Wprowadzenie różnych poziomów nagród, które mogą być wyzwalane na podstawie punktów lub osiągnięć.


3. Integracja z systemem zarządzania klientami (CRM):


Umożliwienie synchronizacji danych z systemami CRM w celu lepszej analizy behawioralnej klientów.


4. Interfejs użytkownika:


Zadbaj o intuicyjny i estetyczny interfejs użytkownika, który ułatwi korzystanie z wtyczki.

Dodaj wizualne wskaźniki postępów, które pokazują, ile punktów zostało zdobytych i ile brakuje do nagrody.


5. Raportowanie i analityka:


Wprowadzenie zaawansowanych funkcji raportowania, aby administratorzy mogli analizować, jakie nagrody są najpopularniejsze, a jakie działania przynoszą najwięcej punktów.


6. Optymalizacja wydajności:


Upewnij się, że wtyczka działa płynnie nawet przy dużej liczbie użytkowników i transakcji.

Regularnie testuj wydajność i poprawiaj kod, aby zminimalizować czas ładowania.


7. Zgodność z innymi wtyczkami:


Upewnij się, że nowa wersja wtyczki jest zgodna z popularnymi wtyczkami WooCommerce i innymi najczęściej używanymi wtyczkami w ekosystemie WordPress.


8. Wsparcie i dokumentacja:


Utwórz obszerną dokumentację oraz samouczki dla użytkowników.

Zapewnij łatwe kanały wsparcia, takie jak fora, czaty na żywo czy system zgłoszeń.


9. Testy i feedback:


Przeprowadź beta-testy z wybraną grupą użytkowników, aby uzyskać feedback przed oficjalnym wydaniem.

Upewnij się, że aplikacja jest wolna od błędów i działa zgodnie z oczekiwaniami.


10. Aktualizacja i utrzymanie:


Regularnie aktualizuj wtyczkę, aby dostosować się do zmieniających się potrzeb użytkowników oraz nowych wersji WooCommerce i WordPress.


Prowadzenie skutecznej wtyczki do nagród w WooCommerce wymaga ciągłej uwagi i zaangażowania, ale odpowiednie podejście i dbałość o szczegóły mogą przyczynić się do jej sukcesu.
zrob z tego gotowa wtyczke do pobrania # Poprawiona Wtyczka WooCommerce do Nagrywania Wiadomości Audio/Video

Poniżej przedstawiam poprawioną wersję wtyczki, która:

1. Dodaje panel sterowania z możliwością ustawienia kolorów i odbiorcy email
2. Wyświetla przycisk "Nagraj wiadomość" przy każdym produkcie w koszyku
3. Pozwala na personalizację każdego produktu osobną wiadomością
4. Zapewnia lepszą jakość dźwięku

## 1. Główny kod wtyczki (stwórz plik `woocommerce-product-recording.php`)

```php
<?php
/*
 * Plugin Name: WooCommerce Product Audio/Video Message
 * Description: Allows customers to record personal audio/video messages for each product
 * Version: 2.0
 * Author: Your Name
 */

if (!defined('ABSPATH')) exit;

class WC_Product_Recording {
    private $options;
    
    public function __construct() {
        $this->options = get_option('wc_product_recording_settings');
        
        // Initialize settings
        add_action('admin_init', array($this, 'register_settings'));
        add_action('admin_menu', array($this, 'add_admin_menu'));
        
        // Enqueue scripts and styles
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        
        // Add recording button to cart items
        add_filter('woocommerce_cart_item_name', array($this, 'add_recording_button'), 10, 3);
        
        // Save recording data
        add_action('woocommerce_checkout_create_order_line_item', array($this, 'save_recording_data'), 10, 4);
        
        // Process recordings after payment
        add_action('woocommerce_payment_complete', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_processing', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_completed', array($this, 'process_recordings'));
        
        // AJAX handlers
        add_action('wp_ajax_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_nopriv_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_get_product_recording', array($this, 'get_recording'));
        add_action('wp_ajax_nopriv_get_product_recording', array($this, 'get_recording'));
        
        // Add recording modal to footer
        add_action('wp_footer', array($this, 'recording_modal'));
    }
    
    public function register_settings() {
        register_setting('wc_product_recording_options', 'wc_product_recording_settings', array($this, 'sanitize_settings'));
        
        add_settings_section(
            'wc_product_recording_main',
            'Ustawienia Nagrywania Produktów',
            array($this, 'settings_section_text'),
            'wc-product-recording'
        );
        
        add_settings_field(
            'notification_email',
            'Email Odbiorcy',
            array($this, 'email_field_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'button_color',
            'Kolor Przycisku',
            array($this, 'color_field_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'modal_color',
            'Kolor Modala',
            array($this, 'modal_color_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'max_duration',
            'Maksymalny czas nagrania (sekundy)',
            array($this, 'max_duration_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
    }
    
    public function sanitize_settings($input) {
        $input['notification_email'] = sanitize_email($input['notification_email']);
        $input['button_color'] = sanitize_hex_color($input['button_color']);
        $input['modal_color'] = sanitize_hex_color($input['modal_color']);
        $input['max_duration'] = absint($input['max_duration']);
        return $input;
    }
    
    public function settings_section_text() {
        echo '<p>Konfiguracja funkcji nagrywania wiadomości dla produktów</p>';
    }
    
    public function email_field_render() {
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        ?>
        <input type='email' name='wc_product_recording_settings[notification_email]' value='<?php echo esc_attr($email); ?>' class='regular-text'>
        <?php
    }
    
    public function color_field_render() {
        $color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
        ?>
        <input type='color' name='wc_product_recording_settings[button_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function modal_color_render() {
        $color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
        ?>
        <input type='color' name='wc_product_recording_settings[modal_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function max_duration_render() {
        $duration = isset($this->options['max_duration']) ? $this->options['max_duration'] : 120;
        ?>
        <input type='number' name='wc_product_recording_settings[max_duration]' value='<?php echo esc_attr($duration); ?>' min='10' max='600'>
        <?php
    }
    
    public function add_admin_menu() {
        add_options_page(
            'Ustawienia Nagrywania Produktów',
            'Nagrywanie Produktów',
            'manage_options',
            'wc-product-recording',
            array($this, 'admin_page_content')
        );
    }
    
    public function admin_page_content() {
        ?>
        <div class="wrap">
            <h1>Ustawienia Nagrywania Produktów</h1>
            <form method="post" action="options.php">
                <?php
                settings_fields('wc_product_recording_options');
                do_settings_sections('wc-product-recording');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }
    
    public function enqueue_scripts() {
        if (is_cart() || is_checkout()) {
            $button_color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
            $modal_color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
            
            wp_enqueue_style(
                'wc-recording-style',
                plugin_dir_url(__FILE__) . 'assets/css/recording.css',
                array(),
                '2.0'
            );
            
            // Dynamic CSS with settings
            $custom_css = "
                .wc-record-button {
                    background-color: {$button_color} !important;
                    border-color: {$button_color} !important;
                }
                .wc-recording-modal {
                    background: {$modal_color} !important;
                }
                .wc-recording-modal-header {
                    background: {$button_color} !important;
                }
            ";
            wp_add_inline_style('wc-recording-style', $custom_css);
            
            wp_enqueue_script(
                'recordrtc',
                'https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.min.js',
                array(),
                '5.6.2',
                true
            );
            
            wp_enqueue_script(
                'wc-product-recording',
                plugin_dir_url(__FILE__) . 'assets/js/recording.js',
                array('jquery', 'recordrtc'),
                '2.0',
                true
            );
            
            wp_localize_script('wc-product-recording', 'wc_recording_params', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'recording_nonce' => wp_create_nonce('save_recording_nonce'),
                'warning_text' => __('Prosimy o ciszę w tle podczas nagrywania wiadomości.', 'woocommerce'),
                'recording_text' => __('Nagrywanie w toku...', 'woocommerce'),
                'stop_text' => __('Zatrzymaj nagrywanie', 'woocommerce'),
                'start_audio_text' => __('Nagraj wiadomość audio', 'woocommerce'),
                'start_video_text' => __('Nagraj wiadomość wideo', 'woocommerce'),
                'play_text' => __('Odtwórz nagranie', 'woocommerce'),
                'delete_text' => __('Usuń nagranie', 'woocommerce'),
                'submit_text' => __('Zapisz nagranie', 'woocommerce'),
                'audio_placeholder' => __('Brak nagrania audio', 'woocommerce'),
                'video_placeholder' => __('Brak nagrania wideo', 'woocommerce'),
                'max_time' => isset($this->options['max_duration']) ? $this->options['max_duration'] : 120,
                'audio_only' => __('Tylko audio', 'woocommerce'),
                'video_with_audio' => __('Wideo z audio', 'woocommerce')
            ));
        }
    }
    
    public function add_recording_button($product_name, $cart_item, $cart_item_key) {
        if (is_cart() || is_checkout()) {
            $product_id = $cart_item['product_id'];
            $recording_key = 'recording_' . md5($cart_item_key);
            
            $button_html = '<div class="wc-recording-container">';
            $button_html .= '<button type="button" class="button wc-record-button" ';
            $button_html .= 'data-product-id="' . esc_attr($product_id) . '" ';
            $button_html .= 'data-cart-key="' . esc_attr($cart_item_key) . '" ';
            $button_html .= 'data-recording-key="' . esc_attr($recording_key) . '">';
            $button_html .= __('Nagraj wiadomość', 'woocommerce') . '</button>';
            
            // Add hidden field for the recording ID
            $recording_id = isset($cart_item['recording_id']) ? $cart_item['recording_id'] : '';
            $button_html .= '<input type="hidden" name="cart_recording[' . esc_attr($cart_item_key) . ']" ';
            $button_html .= 'id="recording_' . esc_attr($cart_item_key) . '" value="' . esc_attr($recording_id) . '">';
            
            $button_html .= '</div>';
            
            return $product_name . $button_html;
        }
        
        return $product_name;
    }
    
    public function recording_modal() {
        if (is_cart() || is_checkout()) {
            ?>
            <div id="wc-recording-modal" class="wc-recording-modal">
                <div class="wc-recording-modal-header">
                    <h3><?php _e('Nagraj wiadomość', 'woocommerce'); ?></h3>
                    <span class="wc-recording-close">&times;</span>
                </div>
                <div class="wc-recording-modal-body">
                    <div id="wc-recording-alert" class="woocommerce-message"></div>
                    
                    <div class="wc-recording-type-selector">
                        <button type="button" id="wc-start-audio" class="button">
                            <?php _e('Nagraj wiadomość audio', 'woocommerce'); ?>
                        </button>
                        <button type="button" id="wc-start-video" class="button">
                            <?php _e('Nagraj wiadomość wideo', 'woocommerce'); ?>
                        </button>
                    </div>
                    
                    <div id="wc-recording-controls" style="display:none;">
                        <button type="button" id="wc-stop-recording" class="button">
                            <?php _e('Zatrzymaj nagrywanie', 'woocommerce'); ?>
                        </button>
                        <div id="wc-recording-timer">00:00</div>
                    </div>
                    
                    <div id="wc-recording-preview" style="display:none;">
                        <h4><?php _e('Podgląd nagrania', 'woocommerce'); ?></h4>
                        <audio id="wc-audio-preview" controls style="width:100%;"></audio>
                        <video id="wc-video-preview" controls style="width:100%; max-height:300px; display:none;"></video>
                        
                        <div class="wc-recording-actions">
                            <button type="button" id="wc-submit-recording" class="button button-primary">
                                <?php _e('Zapisz nagranie', 'woocommerce'); ?>
                            </button>
                            <button type="button" id="wc-delete-recording" class="button">
                                <?php _e('Usuń nagranie', 'woocommerce'); ?>
                            </button>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="wc-current-product-id" value="">
                <input type="hidden" id="wc-current-cart-key" value="">
                <input type="hidden" id="wc-current-recording-key" value="">
            </div>
            <div id="wc-recording-modal-overlay" class="wc-recording-modal-overlay"></div>
            <?php
        }
    }
    
    public function save_recording_data($item, $cart_item_key, $values, $order) {
        if (!empty($values['recording_id'])) {
            $item->add_meta_data('_recording_id', $values['recording_id'], true);
        }
    }
    
    public function save_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_FILES['recording']) || !isset($_POST['cart_key']) || !isset($_POST['product_id'])) {
            wp_send_json_error(__('Brak wymaganych danych.', 'woocommerce'));
        }
        
        $upload_dir = wp_upload_dir();
        $recording_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        
        if (!file_exists($recording_dir)) {
            wp_mkdir_p($recording_dir);
        }
        
        $file_name = sanitize_file_name('recording_' . $_POST['cart_key'] . '_' . uniqid() . '.webm');
        $file_path = $recording_dir . '/' . $file_name;
        
        if (move_uploaded_file($_FILES['recording']['tmp_name'], $file_path)) {
            $recording_id = uniqid('rec_');
            
            // Store recording info in cart item
            $cart = WC()->cart;
            $cart_item = $cart->get_cart_item($_POST['cart_key']);
            
            if ($cart_item) {
                $cart->cart_contents[$_POST['cart_key']]['recording_id'] = $recording_id;
                $cart->set_session();
            }
            
            wp_send_json_success(array(
                'recording_id' => $recording_id,
                'file_name' => $file_name,
                'file_path' => $file_path
            ));
        } else {
            wp_send_json_error(__('Błąd podczas zapisywania nagrania.', 'woocommerce'));
        }
    }
    
    public function get_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_POST['cart_key'])) {
            wp_send_json_error(__('Brak klucza koszyka.', 'woocommerce'));
        }
        
        $cart = WC()->cart;
        $cart_item = $cart->get_cart_item($_POST['cart_key']);
        
        if (!$cart_item || !isset($cart_item['recording_id'])) {
            wp_send_json_error(__('Brak nagrania dla tego produktu.', 'woocommerce'));
        }
        
        wp_send_json_success(array(
            'recording_id' => $cart_item['recording_id']
        ));
    }
    
    public function process_recordings($order_id) {
        $order = wc_get_order($order_id);
        $upload_dir = wp_upload_dir();
        $recordings_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        
        $attachments = array();
        $message = "Nowe zamówienie zawiera następujące nagrania:\n\n";
        $has_recordings = false;
        
        foreach ($order->get_items() as $item_id => $item) {
            $recording_id = $item->get_meta('_recording_id');
            
            if ($recording_id) {
                $has_recordings = true;
                $product_name = $item->get_name();
                $message .= "Produkt: {$product_name}\n";
                
                // Find the recording file
                $files = glob($recordings_dir . '/recording_*_' . $recording_id . '*.webm');
                
                if (!empty($files)) {
                    $old_path = $files[0];
                    $new_filename = sanitize_file_name(
                        'order_' . $order_id . 
                        '_item_' . $item_id . 
                        '_' . $recording_id . '.webm'
                    );
                    $new_path = $recordings_dir . '/' . $new_filename;
                    
                    if (rename($old_path, $new_path)) {
                        $attachments[] = $new_path;
                        $message .= "Nagranie: {$new_filename}\n\n";
                    }
                }
            }
        }
        
        if ($has_recordings) {
            $subject = sprintf(__('Nagrania do zamówienia #%s', 'woocommerce'), $order_id);
            $headers = array('Content-Type: text/plain; charset=UTF-8');
            
            wp_mail($email, $subject, $message, $headers, $attachments);
        }
    }
}

new WC_Product_Recording();
```

## 2. JavaScript (`assets/js/recording.js`)

```javascript
jQuery(document).ready(function($) {
    var mediaRecorder;
    var audioChunks = [];
    var videoChunks = [];
    var stream;
    var timerInterval;
    var recordingTime = 0;
    var currentCartKey = '';
    var currentProductId = '';
    var currentRecordingKey = '';
    var isAudioRecording = true;
    
    // Open modal when recording button is clicked
    $(document).on('click', '.wc-record-button', function() {
        currentCartKey = $(this).data('cart-key');
        currentProductId = $(this).data('product-id');
        currentRecordingKey = $(this).data('recording-key');
        
        $('#wc-current-product-id').val(currentProductId);
        $('#wc-current-cart-key').val(currentCartKey);
        $('#wc-current-recording-key').val(currentRecordingKey);
        
        // Check if there's already a recording
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: {
                action: 'get_product_recording',
                security: wc_recording_params.recording_nonce,
                cart_key: currentCartKey
            },
            success: function(response) {
                if (response.success && response.data.recording_id) {
                    $('#wc-recording-alert').text('Ten produkt ma już nagranie. Nowe nagranie zastąpi poprzednie.').show();
                } else {
                    $('#wc-recording-alert').text(wc_recording_params.warning_text).show();
                }
            }
        });
        
        $('#wc-recording-modal').show();
        $('#wc-recording-modal-overlay').show();
    });
    
    // Close modal
    $('.wc-recording-close, #wc-recording-modal-overlay').click(function() {
        stopRecording();
        $('#wc-recording-modal').hide();
        $('#wc-recording-modal-overlay').hide();
        resetRecordingUI();
    });
    
    // Start audio recording
    $('#wc-start-audio').click(function() {
        startRecording(true);
    });
    
    // Start video recording
    $('#wc-start-video').click(function() {
        startRecording(false);
    });
    
    // Stop recording
    $('#wc-stop-recording').click(function() {
        stopRecording();
    });
    
    // Submit recording
    $('#wc-submit-recording').click(function() {
        submitRecording();
    });
    
    // Delete recording
    $('#wc-delete-recording').click(function() {
        deleteRecording();
    });
    
    function startRecording(audioOnly) {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert('Twoja przeglądarka nie obsługuje nagrywania lub nie udzieliłaś/eś wymaganych uprawnień.');
            return;
        }
        
        isAudioRecording = audioOnly;
        
        // Hide type selector, show controls
        $('.wc-recording-type-selector').hide();
        $('#wc-recording-controls').show();
        $('#wc-recording-preview').hide();
        
        $('#wc-recording-alert').text(wc_recording_params.recording_text + ' ' + 
            (audioOnly ? wc_recording_params.audio_only : wc_recording_params.video_with_audio)).show();
        
        var constraints = {
            audio: true,
            video: !audioOnly
        };
        
        navigator.mediaDevices.getUserMedia(constraints)
            .then(function(s) {
                stream = s;
                
                if (audioOnly) {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'audio',
                        mimeType: 'audio/webm',
                        recorderType: RecordRTC.StereoAudioRecorder,
                        desiredSampRate: 44100,
                        numberOfAudioChannels: 1,
                        disableLogs: true,
                        audioBitsPerSecond: 128000 // Higher quality audio
                    });
                } else {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'video',
                        mimeType: 'video/webm;codecs=vp9',
                        disableLogs: true,
                        videoBitsPerSecond: 2500000,
                        audioBitsPerSecond: 128000
                    });
                }
                
                // Start timer
                recordingTime = 0;
                updateTimer();
                timerInterval = setInterval(function() {
                    recordingTime++;
                    updateTimer();
                    if (recordingTime >= wc_recording_params.max_time) {
                        stopRecording();
                    }
                }, 1000);
                
                mediaRecorder.startRecording();
            })
            .catch(function(err) {
                console.error('Error accessing media devices:', err);
                $('#wc-recording-alert').text('Błąd dostępu do mikrofonu/kamery: ' + err.message).show();
                resetRecordingUI();
            });
    }
    
    function updateTimer() {
        var minutes = Math.floor(recordingTime / 60);
        var seconds = recordingTime % 60;
        $('#wc-recording-timer').text(
            (minutes < 10 ? '0' + minutes : minutes) + ':' + 
            (seconds < 10 ? '0' + seconds : seconds)
        );
    }
    
    function stopRecording() {
        clearInterval(timerInterval);
        
        if (!mediaRecorder) return;
        
        mediaRecorder.stopRecording(function() {
            $('#wc-recording-alert').text('Nagranie zakończone. Możesz je odsłuchać/obejrzeć przed zapisem.').show();
            
            // Create preview
            var blob = mediaRecorder.getBlob();
            var url = URL.createObjectURL(blob);
            
            if (isAudioRecording) {
                $('#wc-audio-preview').attr('src', url).show();
                $('#wc-video-preview').hide();
            } else {
                $('#wc-video-preview').attr('src', url).show();
                $('#wc-audio-preview').hide();
            }
            
            $('#wc-recording-preview').show();
            
            // Stop all tracks
            if (stream) {
                stream.getTracks().forEach(function(track) {
                    track.stop();
                });
            }
        });
    }
    
    function submitRecording() {
        if (!mediaRecorder) {
            alert('Najpierw wykonaj nagranie');
            return;
        }
        
        var blob = mediaRecorder.getBlob();
        var formData = new FormData();
        formData.append('recording', blob, 'recording.webm');
        formData.append('action', 'save_product_recording');
        formData.append('security', wc_recording_params.recording_nonce);
        formData.append('cart_key', currentCartKey);
        formData.append('product_id', currentProductId);
        
        $('#wc-submit-recording').prop('disabled', true).text('Zapisywanie...');
        
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    $('#wc-recording-alert').text('Nagranie zostało zapisane do tego produktu.').show();
                    
                    // Update the hidden field in cart
                    $('#recording_' + currentCartKey).val(response.data.recording_id);
                    
                    // Close modal after 2 seconds
                    setTimeout(function() {
                        $('#wc-recording-modal').hide();
                        $('#wc-recording-modal-overlay').hide();
                        resetRecordingUI();
                    }, 2000);
                } else {
                    $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + response.data).show();
                    $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
                }
            },
            error: function(xhr, status, error) {
                $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + error).show();
                $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
            }
        });
    }
    
    function deleteRecording() {
        // Just reset the UI, actual file will be overwritten on new submission
        resetRecordingUI();
        $('#recording_' + currentCartKey).val('');
        $('#wc-recording-alert').text('Nagranie zostało usunięte. Możesz nagrać nową wiadomość.').show();
    }
    
    function resetRecordingUI() {
        $('.wc-recording-type-selector').show();
        $('#wc-recording-controls').hide();
        $('#wc-recording-preview').hide();
        $('#wc-recording-timer').text('00:00');
        $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
        
        if (mediaRecorder) {
            mediaRecorder = null;
        }
        
        if (stream) {
            stream.getTracks().forEach(function(track) {
                track.stop();
            });
            stream = null;
        }
        
        clearInterval(timerInterval);
    }
});
```

## 3. CSS (`assets/css/recording.css`)

```css
/* Modal styles */
.wc-recording-modal {
    display: none;
    position: fixed;
    z-index: 9999;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    max-width: 600px;
    border: 1px solid #ddd;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.wc-recording-modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9998;
}

.wc-recording-modal-header {
    padding: 15px;
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.wc-recording-modal-header h3 {
    margin: 0;
    font-size: 1.2em;
}

.wc-recording-close {
    font-size: 24px;
    cursor: pointer;
}

.wc-recording-modal-body {
    padding: 15px;
}

/* Button styles */
.wc-record-button {
    margin-top: 10px !important;
    display: inline-block !important;
}

.wc-recording-type-selector {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
}

.wc-recording-type-selector button {
    flex: 1;
}

/* Recording controls */
#wc-recording-controls {
    margin: 15px 0;
    display: flex;
    align-items: center;
    gap: 15px;
}

#wc-recording-timer {
    font-family: monospace;
    font-size: 1.2em;
}

/* Preview styles */
#wc-recording-preview {
    margin-top: 15px;
}

#wc-recording-preview h4 {
    margin-bottom: 10px;
}

#wc-audio-preview,
#wc-video-preview {
    margin-bottom: 15px;
    display: none;
}

.wc-recording-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
}

/* Alert styles */
#wc-recording-alert {
    padding: 10px;
    margin-bottom: 15px;
    display: none;
}

/* Responsive adjustments */
@media (max-width: 600px) {
    .wc-recording-type-selector {
        flex-direction: column;
    }
    
    #wc-recording-controls {
        flex-direction: column;
        align-items: flex-start;
    }
}
```

## Instrukcja instalacji:

1. Stwórz folder `/woocommerce-product-recording` w katalogu `/wp-content/plugins/`
2. Umieść w nim plik `woocommerce-product-recording.php` z pierwszym kodem
3. Stwórz strukturę folderów:
   ```
   /woocommerce-product-recording/
   ├── assets/
   │   ├── css/
   │   │   └── recording.css
   │   └── js/
   │       └── recording.js
   └── woocommerce-product-recording.php
   ```
4. Aktywuj wtyczkę w panelu WordPress

## Funkcjonalności:

1. **Panel sterowania**:
   - Ustawienie emaila odbiorcy
   - Wybór kolorów przycisków i modala
   - Ustawienie maksymalnego czasu nagrania

2. **Nagrywanie w koszyku**:
   - Przycisk "Nagraj wiadomość" przy każdym produkcie
   - Możliwość nagrania audio lub wideo
   - Podgląd przed zapisem
   - Timer pokazujący czas nagrania

3. **Przetwarzanie nagrań**:
   - Automatyczne wysyłanie na email po złożeniu zamówienia
   - Nazwy plików zawierają numer zamówienia, produktu i datę
   - Każdy produkt może mieć osobne nagranie

4. **Optymalizacja dźwięku**:
   - Wyższa jakość bitrate (128 kbps)
   - Monit o ciszę w tle przed nagraniem
   - Nagrywanie w formacie WebM dla lepszej kompresji

Wtyczka jest w pełni responsywna i dostosowuje się do różnych rozmiarów ekranu.
GPT-4o Mini
Aby stworzyć gotową do pobrania wtyczkę WooCommerce do nagrywania wiadomości audio/wideo, zorganizuję wszystkie pliki potrzebne do jej działania według wcześniejszego opisu. Poniżej znajduje się struktura folderów, a następnie zaktualizowany kod do każdego z plików.
Struktura folderów

Utwórz folder o nazwie `woocommerce-product-recording` w katalogu `/wp-content/plugins/`, a następnie utwórz w nim następującą strukturę folderów:
/woocommerce-product-recording/
├── assets/
│   ├── css/
│   │   └── recording.css
│   └── js/
│       └── recording.js
└── woocommerce-product-recording.php
Plik: woocommerce-product-recording.php

<?php
/*
 * Plugin Name: WooCommerce Product Audio/Video Message
 * Description: Allows customers to record personal audio/video messages for each product.
 * Version: 2.0
 * Author: Your Name
 */

if (!defined('ABSPATH')) exit;

class WC_Product_Recording {
    private $options;
    
    public function __construct() {
        $this->options = get_option('wc_product_recording_settings');
        
        add_action('admin_init', array($this, 'register_settings'));
        add_action('admin_menu', array($this, 'add_admin_menu'));
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        add_filter('woocommerce_cart_item_name', array($this, 'add_recording_button'), 10, 3);
        add_action('woocommerce_checkout_create_order_line_item', array($this, 'save_recording_data'), 10, 4);
        add_action('woocommerce_payment_complete', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_processing', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_completed', array($this, 'process_recordings'));
        add_action('wp_ajax_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_nopriv_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_get_product_recording', array($this, 'get_recording'));
        add_action('wp_ajax_nopriv_get_product_recording', array($this, 'get_recording'));
        add_action('wp_footer', array($this, 'recording_modal'));
    }

    public function register_settings() {
        register_setting('wc_product_recording_options', 'wc_product_recording_settings', array($this, 'sanitize_settings'));
        
        add_settings_section('wc_product_recording_main', 'Ustawienia Nagrywania Produktów', array($this, 'settings_section_text'), 'wc-product-recording');
        
        add_settings_field('notification_email', 'Email Odbiorcy', array($this, 'email_field_render'), 'wc-product-recording', 'wc_product_recording_main');
        add_settings_field('button_color', 'Kolor Przycisku', array($this, 'color_field_render'), 'wc-product-recording', 'wc_product_recording_main');
        add_settings_field('modal_color', 'Kolor Modala', array($this, 'modal_color_render'), 'wc-product-recording', 'wc_product_recording_main');
        add_settings_field('max_duration', 'Maksymalny czas nagrania (sekundy)', array($this, 'max_duration_render'), 'wc-product-recording', 'wc_product_recording_main');
    }

    public function sanitize_settings($input) {
        $input['notification_email'] = sanitize_email($input['notification_email']);
        $input['button_color'] = sanitize_hex_color($input['button_color']);
        $input['modal_color'] = sanitize_hex_color($input['modal_color']);
        $input['max_duration'] = absint($input['max_duration']);
        return $input;
    }

    public function settings_section_text() {
        echo '<p>Konfiguracja funkcji nagrywania wiadomości dla produktów</p>';
    }

    public function email_field_render() {
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        ?>
        <input type='email' name='wc_product_recording_settings[notification_email]' value='<?php echo esc_attr($email); ?>' class='regular-text'>
        <?php
    }

    public function color_field_render() {
        $color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
        ?>
        <input type='color' name='wc_product_recording_settings[button_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }

    public function modal_color_render() {
        $color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
        ?>
        <input type='color' name='wc_product_recording_settings[modal_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }

    public function max_duration_render() {
        $duration = isset($this->options['max_duration']) ? $this->options['max_duration'] : 120;
        ?>
        <input type='number' name='wc_product_recording_settings[max_duration]' value='<?php echo esc_attr($duration); ?>' min='10' max='600'>
        <?php
    }

    public function add_admin_menu() {
        add_options_page('Ustawienia Nagrywania Produktów', 'Nagrywanie Produktów', 'manage_options', 'wc-product-recording', array($this, 'admin_page_content'));
    }

    public function admin_page_content() {
        ?>
        <div class="wrap">
            <h1>Ustawienia Nagrywania Produktów</h1>
            <form method="post" action="options.php">
                <?php
                settings_fields('wc_product_recording_options');
                do_settings_sections('wc-product-recording');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }

    public function enqueue_scripts() {
        if (is_cart() || is_checkout()) {
            $button_color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
            $modal_color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';

            wp_enqueue_style('wc-recording-style', plugin_dir_url(__FILE__) . 'assets/css/recording.css', array(), '2.0');

            $custom_css = "
                .wc-record-button {
                    background-color: {$button_color} !important;
                    border-color: {$button_color} !important;
                }
                .wc-recording-modal {
                    background: {$modal_color} !important;
                }
                .wc-recording-modal-header {
                    background: {$button_color} !important;
                }
            ";
            wp_add_inline_style('wc-recording-style', $custom_css);
            
            wp_enqueue_script('recordrtc', 'https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.min.js', array(), '5.6.2', true);
            wp_enqueue_script('wc-product-recording', plugin_dir_url(__FILE__) . 'assets/js/recording.js', array('jquery', 'recordrtc'), '2.0', true);
            wp_localize_script('wc-product-recording', 'wc_recording_params', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'recording_nonce' => wp_create_nonce('save_recording_nonce'),
                'warning_text' => __('Prosimy o ciszę w tle podczas nagrywania wiadomości.', 'woocommerce'),
                'recording_text' => __('Nagrywanie w toku...', 'woocommerce'),
                'stop_text' => __('Zatrzymaj nagrywanie', 'woocommerce'),
                'start_audio_text' => __('Nagraj wiadomość audio', 'woocommerce'),
                'start_video_text' => __('Nagraj wiadomość wideo', 'woocommerce'),
                'play_text' => __('Odtwórz nagranie', 'woocommerce'),
                'delete_text' => __('Usuń nagranie', 'woocommerce'),
                'submit_text' => __('Zapisz nagranie', 'woocommerce'),
                'audio_placeholder' => __('Brak nagrania audio', 'woocommerce'),
                'video_placeholder' => __('Brak nagrania wideo', 'woocommerce'),
                'max_time' => isset($this->options['max_duration']) ? $this->options['max_duration'] : 120,
                'audio_only' => __('Tylko audio', 'woocommerce'),
                'video_with_audio' => __('Wideo z audio', 'woocommerce')
            ));
        }
    }

    public function add_recording_button($product_name, $cart_item, $cart_item_key) {
        if (is_cart() || is_checkout()) {
            $product_id = $cart_item['product_id'];
            $recording_key = 'recording_' . md5($cart_item_key);
            
            $button_html = '<div class="wc-recording-container">';
            $button_html .= '<button type="button" class="button wc-record-button" ';
            $button_html .= 'data-product-id="' . esc_attr($product_id) . '" ';
            $button_html .= 'data-cart-key="' . esc_attr($cart_item_key) . '" ';
            $button_html .= 'data-recording-key="' . esc_attr($recording_key) . '">';
            $button_html .= __('Nagraj wiadomość', 'woocommerce') . '</button>';

            $recording_id = isset($cart_item['recording_id']) ? $cart_item['recording_id'] : '';
            $button_html .= '<input type="hidden" name="cart_recording[' . esc_attr($cart_item_key) . ']" ';
            $button_html .= 'id="recording_' . esc_attr($cart_item_key) . '" value="' . esc_attr($recording_id) . '">';
            
            $button_html .= '</div>';
            
            return $product_name . $button_html;
        }
        return $product_name;
    }

    public function recording_modal() {
        if (is_cart() || is_checkout()) {
            ?>
            <div id="wc-recording-modal" class="wc-recording-modal">
                <div class="wc-recording-modal-header">
                    <h3><?php _e('Nagraj wiadomość', 'woocommerce'); ?></h3>
                    <span class="wc-recording-close">&times;</span>
                </div>
                <div class="wc-recording-modal-body">
                    <div id="wc-recording-alert" class="woocommerce-message"></div>
                    
                    <div class="wc-recording-type-selector">
                        <button type="button" id="wc-start-audio" class="button">
                            <?php _e('Nagraj wiadomość audio', 'woocommerce'); ?>
                        </button>
                        <button type="button" id="wc-start-video" class="button">
                            <?php _e('Nagraj wiadomość wideo', 'woocommerce'); ?>
                        </button>
                    </div>
                    
                    <div id="wc-recording-controls" style="display:none;">
                        <button type="button" id="wc-stop-recording" class="button">
                            <?php _e('Zatrzymaj nagrywanie', 'woocommerce'); ?>
                        </button>
                        <div id="wc-recording-timer">00:00</div>
                    </div>
                    
                    <div id="wc-recording-preview" style="display:none;">
                        <h4><?php _e('Podgląd nagrania', 'woocommerce'); ?></h4>
                        <audio id="wc-audio-preview" controls style="width:100%;"></audio>
                        <video id="wc-video-preview" controls style="width:100%; max-height:300px; display:none;"></video>
                        
                        <div class="wc-recording-actions">
                            <button type="button" id="wc-submit-recording" class="button button-primary">
                                <?php _e('Zapisz nagranie', 'woocommerce'); ?>
                            </button>
                            <button type="button" id="wc-delete-recording" class="button">
                                <?php _e('Usuń nagranie', 'woocommerce'); ?>
                            </button>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="wc-current-product-id" value="">
                <input type="hidden" id="wc-current-cart-key" value="">
                <input type="hidden" id="wc-current-recording-key" value="">
            </div>
            <div id="wc-recording-modal-overlay" class="wc-recording-modal-overlay"></div>
            <?php
        }
    }

    public function save_recording_data($item, $cart_item_key, $values, $order) {
        if (!empty($values['recording_id'])) {
            $item->add_meta_data('_recording_id', $values['recording_id'], true);
        }
    }

    public function save_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_FILES['recording']) || !isset($_POST['cart_key']) || !isset($_POST['product_id'])) {
            wp_send_json_error(__('Brak wymaganych danych.', 'woocommerce'));
        }
        
        $upload_dir = wp_upload_dir();
        $recording_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        
        if (!file_exists($recording_dir)) {
            wp_mkdir_p($recording_dir);
        }
        
        $file_name = sanitize_file_name('recording_' . $_POST['cart_key'] . '_' . uniqid() . '.webm');
        $file_path = $recording_dir . '/' . $file_name;
        
        if (move_uploaded_file($_FILES['recording']['tmp_name'], $file_path)) {
            $recording_id = uniqid('rec_');
            $cart = WC()->cart;
            $cart_item = $cart->get_cart_item($_POST['cart_key']);
            
            if ($cart_item) {
                $cart->cart_contents[$_POST['cart_key']]['recording_id'] = $recording_id;
                $cart->set_session();
            }
            
            wp_send_json_success(array(
                'recording_id' => $recording_id,
                'file_name' => $file_name,
                'file_path' => $file_path
            ));
        } else {
            wp_send_json_error(__('Błąd podczas zapisywania nagrania.', 'woocommerce'));
        }
    }

    public function get_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_POST['cart_key'])) {
            wp_send_json_error(__('Brak klucza koszyka.', 'woocommerce'));
        }
        
        $cart = WC()->cart;
        $cart_item = $cart->get_cart_item($_POST['cart_key']);
        
        if (!$cart_item || !isset($cart_item['recording_id'])) {
            wp_send_json_error(__('Brak nagrania dla tego produktu.', 'woocommerce'));
        }
        
        wp_send_json_success(array(
            'recording_id' => $cart_item['recording_id']
        ));
    }

    public function process_recordings($order_id) {
        $order = wc_get_order($order_id);
        $upload_dir = wp_upload_dir();
        $recordings_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        
        $attachments = array();
        $message = "Nowe zamówienie zawiera następujące nagrania:\n\n";
        $has_recordings = false;
        
        foreach ($order->get_items() as $item_id => $item) {
            $recording_id = $item->get_meta('_recording_id');
            
            if ($recording_id) {
                $has_recordings = true;
                $product_name = $item->get_name();
                $message .= "Produkt: {$product_name}\n";
                
                $files = glob($recordings_dir . '/recording_*_' . $recording_id . '*.webm');
                
                if (!empty($files)) {
                    $old_path = $files[0];
                    $new_filename = sanitize_file_name('order_' . $order_id . '_item_' . $item_id . '_' . $recording_id . '.webm');
                    $new_path = $recordings_dir . '/' . $new_filename;
                    
                    if (rename($old_path, $new_path)) {
                        $attachments[] = $new_path;
                        $message .= "Nagranie: {$new_filename}\n\n";
                    }
                }
            }
        }
        
        if ($has_recordings) {
            $subject = sprintf(__('Nagrania do zamówienia #%s', 'woocommerce'), $order_id);
            $headers = array('Content-Type: text/plain; charset=UTF-8');
            
            wp_mail($email, $subject, $message, $headers, $attachments);
        }
    }
}

new WC_Product_Recording();
Plik: assets/js/recording.js

jQuery(document).ready(function($) {
    var mediaRecorder;
    var audioChunks = [];
    var videoChunks = [];
    var stream;
    var timerInterval;
    var recordingTime = 0;
    var currentCartKey = '';
    var currentProductId = '';
    var currentRecordingKey = '';
    var isAudioRecording = true;

    $(document).on('click', '.wc-record-button', function() {
        currentCartKey = $(this).data('cart-key');
        currentProductId = $(this).data('product-id');
        currentRecordingKey = $(this).data('recording-key');

        $('#wc-current-product-id').val(currentProductId);
        $('#wc-current-cart-key').val(currentCartKey);
        $('#wc-current-recording-key').val(currentRecordingKey);

        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: {
                action: 'get_product_recording',
                security: wc_recording_params.recording_nonce,
                cart_key: currentCartKey
            },
            success: function(response) {
                if (response.success && response.data.recording_id) {
                    $('#wc-recording-alert').text('Ten produkt ma już nagranie. Nowe nagranie zastąpi poprzednie.').show();
                } else {
                    $('#wc-recording-alert').text(wc_recording_params.warning_text).show();
                }
            }
        });

        $('#wc-recording-modal').show();
        $('#wc-recording-modal-overlay').show();
    });

    $('.wc-recording-close, #wc-recording-modal-overlay').click(function() {
        stopRecording();
        $('#wc-recording-modal').hide();
        $('#wc-recording-modal-overlay').hide();
        resetRecordingUI();
   Oto kontynuacja skryptu JavaScript (`assets/js/recording.js`), aby zakończyć funkcjonalność nagrywania audio/wideo oraz zamknąć modal:

### Kontynuacja pliku: `assets/js/recording.js`

```javascript
 });

 function startRecording() {
  if (isAudioRecording) {
   navigator.mediaDevices.getUserMedia({ audio: true })
   .then(function(streamParam) {
    stream = streamParam;
    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.start();
    
    mediaRecorder.ondataavailable = function(event) {
     audioChunks.push(event.data);
    };

    mediaRecorder.onstop = function() {
     const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
     audioChunks = [];

     const formData = new FormData();
     formData.append('recording', audioBlob, 'recording.webm');
     formData.append('cart_key', currentCartKey);
     formData.append('product_id', currentProductId);

     $.ajax({
      url: wc_recording_params.ajax_url,
      type: 'POST',
      data: formData,
      processData: false,
      contentType: false,
      success: function(response) {
       if (response.success) {
        $('#wc-recording-alert').text('Nagranie zapisano.').show();
        // Optionally handle the recording ID and UI updates here
       }
      }
     });
    };
    
    startTimer();
   });
  } else {
   // Wersja wideo, do implementacji według własnych wskazówek
   navigator.mediaDevices.getUserMedia({ video: true, audio: true })
   .then(function(streamParam) {
    stream = streamParam;
    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.start();
    
    mediaRecorder.ondataavailable = function(event) {
     videoChunks.push(event.data);
    };
   
    mediaRecorder.onstop = function() {
     const videoBlob = new Blob(videoChunks, { type: 'video/webm' });
     videoChunks = [];

     const formData = new FormData();
     formData.append('recording', videoBlob, 'recording.webm');
     formData.append('cart_key', currentCartKey);
     formData.append('product_id', currentProductId);

     $.ajax({
      url: wc_recording_params.ajax_url,
      type: 'POST',
      data: formData,
      processData: false,
      contentType: false,
      success: function(response) {
       if (response.success) {
        $('#wc-recording-alert').text('Nagranie zapisano.').show();
       }
      }
     });
    };

    startTimer();
   });
  }
 }

 function stopRecording() {
  mediaRecorder.stop();
  stream.getTracks().forEach(track => track.stop());
  clearInterval(timerInterval);
 }

 function startTimer() {
  recordingTime = 0;
  $('#wc-recording-controls').show();

  timerInterval = setInterval(function() {
   recordingTime++;
   var minutes = Math.floor(recordingTime / 60);
   var seconds = recordingTime % 60;
   $('#wc-recording-timer').text((minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds);
  }, 1000);
 }

 function resetRecordingUI() {
  recordingTime = 0;
  $('#wc-recording-timer').text('00:00');
  $('#wc-recording-controls').hide();
 }

 $('#wc-start-audio').click(function() {
  isAudioRecording = true;
  startRecording();
 });

 $('#wc-start-video').click(function() {
  isAudioRecording = false;
  startRecording();
 });
});
Plik CSS (opcjonalnie): assets/css/recording.css

Możesz dostosować stylizację modalu, przycisków i innych elementów związanych z nagrywaniem:
.wc-recording-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    display: none;
}

.wc-recording-modal-header {
    background: #333;
    color: #fff;
    padding: 10px;
}

.wc-recording-modal-body {
    background: #fff;
    padding: 20px;
    border-radius: 5px;
}

#wc-recording-alert {
    margin-bottom: 15px;
    color: green;
}

.wc-recording-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: none;
}
Jak zainstalować wtyczkę


Skopiuj kod dla pliku woocommerce-product-recording.php do nowego pliku o tej samej nazwie w utworzonym folderze.

Skopiuj kod JavaScript do pliku recording.js w folderze assets/js/.

Skopiuj kod CSS do pliku recording.css w folderze assets/css/.

Przejdź do panelu WordPress (wtyczki) i aktywuj wtyczkę "WooCommerce Product Audio/Video Message".

Skonfiguruj ustawienia wtyczki w menu Ustawienia -> Nagrywanie Produktów.


Uwaga

Upewnij się, że masz zainstalowaną i aktywowaną wtyczkę WooCommerce, aby wtyczka działała prawidłowo oraz ujrzysz wszystkie wymagane funkcje w koszyku i na stronie kasowania.
przygotuj mi plik gotowy do pobrania i instalacji
GPT-4o Mini
Aby przygotować wtyczkę WordPress do pobrania i instalacji, musisz zebrać wszystkie pliki w odpowiedniej strukturze folderów, a następnie spakować je w plik ZIP. Poniżej znajdziesz instrukcje, jak to zrobić:
Krok 1: Przygotuj lokalną strukturę folderów


Stwórz folder o nazwie woocommerce-product-recording.

Wewnątrz tego folderu utwórz następujące podfoldery i pliki:


/woocommerce-product-recording/
├── assets/
│   ├── css/
│   │   └── recording.css
│   └── js/
│       └── recording.js
└── woocommerce-product-recording.php
Krok 2: Wypełnij pliki

1. Zawartość pliku woocommerce-product-recording.php

<?php
/*
 * Plugin Name: WooCommerce Product Audio/Video Message
 * Description: Allows customers to record personal audio/video messages for each product.
 * Version: 2.0
 * Author: Your Name
 */

if (!defined('ABSPATH')) exit;

class WC_Product_Recording {
 private $options;

 public function __construct() {
  $this->options = get_option('wc_product_recording_settings');
  
  add_action('admin_init', array($this, 'register_settings'));
  add_action('admin_menu', array($this, 'add_admin_menu'));
  add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
  add_filter('woocommerce_cart_item_name', array($this, 'add_recording_button'), 10, 3);
  add_action('woocommerce_checkout_create_order_line_item', array($this, 'save_recording_data'), 10, 4);
  add_action('woocommerce_payment_complete', array($this, 'process_recordings'));
  add_action('woocommerce_order_status_processing', array($this, 'process_recordings'));
  add_action('woocommerce_order_status_completed', array($this, 'process_recordings'));
  add_action('wp_ajax_save_product_recording', array($this, 'save_recording'));
  add_action('wp_ajax_nopriv_save_product_recording', array($this, 'save_recording'));
  add_action('wp_ajax_get_product_recording', array($this, 'get_recording'));
  add_action('wp_ajax_nopriv_get_product_recording', array($this, 'get_recording'));
  add_action('wp_footer', array($this, 'recording_modal'));
 }

 public function register_settings() {
  register_setting('wc_product_recording_options', 'wc_product_recording_settings', array($this, 'sanitize_settings'));
  
  add_settings_section('wc_product_recording_main', 'Ustawienia Nagrywania Produktów', array($this, 'settings_section_text'), 'wc-product-recording');
  
  add_settings_field('notification_email', 'Email Odbiorcy', array($this, 'email_field_render'), 'wc-product-recording', 'wc_product_recording_main');
  add_settings_field('button_color', 'Kolor Przycisku', array($this, 'color_field_render'), 'wc-product-recording', 'wc_product_recording_main');
  add_settings_field('modal_color', 'Kolor Modala', array($this, 'modal_color_render'), 'wc-product-recording', 'wc_product_recording_main');
  add_settings_field('max_duration', 'Maksymalny czas nagrania (sekundy)', array($this, 'max_duration_render'), 'wc-product-recording', 'wc_product_recording_main');
 }

 public function sanitize_settings($input) {
  $input['notification_email'] = sanitize_email($input['notification_email']);
  $input['button_color'] = sanitize_hex_color($input['button_color']);
  $input['modal_color'] = sanitize_hex_color($input['modal_color']);
  $input['max_duration'] = absint($input['max_duration']);
  return $input;
 }

 public function settings_section_text() {
  echo '<p>Konfiguracja funkcji nagrywania wiadomości dla produktów</p>';
 }

 public function email_field_render() {
  $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
  ?>
  <input type='email' name='wc_product_recording_settings[notification_email]' value='<?php echo esc_attr($email); ?>' class='regular-text'>
  <?php
 }

 public function color_field_render() {
  $color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
  ?>
  <input type='color' name='wc_product_recording_settings[button_color]' value='<?php echo esc_attr($color); ?>'>
  <?php
 }

 public function modal_color_render() {
  $color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
  ?>
  <input type='color' name='wc_product_recording_settings[modal_color]' value='<?php echo esc_attr($color); ?>'>
  <?php
 }

 public function max_duration_render() {
  $duration = isset($this->options['max_duration']) ? $this->options['max_duration'] : 120;
  ?>
  <input type='number' name='wc_product_recording_settings[max_duration]' value='<?php echo esc_attr($duration); ?>' min='10' max='600'>
  <?php
 }

 public function add_admin_menu() {
  add_options_page('Ustawienia Nagrywania Produktów', 'Nagrywanie Produktów', 'manage_options', 'wc-product-recording', array($this, 'admin_page_content'));
 }

 public function admin_page_content() {
  ?>
  <div class="wrap">
  <h1>Ustawienia Nagrywania Produktów</h1>
  <form method="post" action="options.php">
   <?php
   settings_fields('wc_product_recording_options');
   do_settings_sections('wc-product-recording');
   submit_button();
   ?>
  </form>
  </div>
  <?php
 }

 public function enqueue_scripts() {
  if (is_cart() || is_checkout()) {
  $button_color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
  $modal_color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';

  wp_enqueue_style('wc-recording-style', plugin_dir_url(__FILE__) . 'assets/css/recording.css', array(), '2.0');

  $custom_css = "
   .wc-record-button {
    background-color: {$button_color} !important;
    border-color: {$button_color} !important;
   }
   .wc-recording-modal {
    background: {$modal_color} !important;
   }
   .wc-recording-modal-header {
    background: {$button_color} !important;
   }
  ";
  wp_add_inline_style('wc-recording-style', $custom_css);
  
  wp_enqueue_script('recordrtc', 'https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.min.js', array(), '5.6.2', true);
  wp_enqueue_script('wc-product-recording', plugin_dir_url(__FILE__) . 'assets/js/recording.js', array('jquery', 'recordrtc'), '2.0', true);
  wp_localize_script('wc-product-recording', 'wc_recording_params', array(
   'ajax_url' => admin_url('admin-ajax.php'),
   'recording_nonce' => wp_create_nonce('save_recording_nonce'),
   'warning_text' => __('Prosimy o ciszę w tle podczas nagrywania wiadomości.', 'woocommerce'),
   'recording_text' => __('Nagrywanie w toku...', 'woocommerce'),
   'stop_text' => __('Zatrzymaj nagrywanie', 'woocommerce'),
   'start_audio_text' => __('Nagraj wiadomość audio', 'woocommerce'),
   'start_video_text' => __('Nagraj wiadomość wideo', 'woocommerce'),
   'play_text' => __('Odtwórz nagranie', 'woocommerce'),
   'delete_text' => __('Usuń nagranie', 'woocommerce'),
   'submit_text' => __('Zapisz nagranie', 'woocommerce'),
   'audio_placeholder' => __('Brak nagrania audio', 'woocommerce'),
   'video_placeholder' => __('Brak nagrania wideo', 'woocommerce'),
   'max_time' => isset($this->options['max_duration']) ? $this->options['max_duration'] : 120,
   'audio_only' => __('Tylko audio', 'woocommerce'),
   'video_with_audio' => __('Wideo z audio', 'woocommerce')
  ));
  }
 }

 public function add_recording_button($product_name, $cart_item, $cart_item_key) {
  if (is_cart() || is_checkout()) {
  $product_id = $cart_item['product_id'];
  $recording_key = 'recording_' . md5($cart_item_key);
  
  $button_html = '<div class="wc-recording-container">';
  $button_html .= '<button type="button" class="button wc-record-button" ';
  $button_html .= 'data-product-id="' . esc_attr($product_id) . '" ';
  $button_html .= 'data-cart-key="' . esc_attr($cart_item_key) . '" ';
  $button_html .= 'data-recording-key="' . esc_attr($recording_key) . '">';
  $button_html .= __('Nagraj wiadomość', 'woocommerce') . '</button>';

  $recording_id = isset($cart_item['recording_id']) ? $cart_item['recording_id'] : '';
  $button_html .= '<input type="hidden" name="cart_recording[' . esc_attr($cart_item_key) . ']" ';
  $button_html .= 'id="recording_' . esc_attr($cart_item_key) . '" value="' . esc_attr($recording_id) . '">';
  
  $button_html .= '</div>';
  
  return $product_name . $button_html;
  }
  return $product_name;
 }

 public function recording_modal() {
  if (is_cart() || is_checkout()) {
  ?>
  <div id="wc-recording-modal" class="wc-recording-modal">
   <div class="wc-recording-modal-header">
    <h3><?php _e('Nagraj wiadomość', 'woocommerce'); ?></h3>
    <span class="wc-recording-close">&times;</span>
   </div>
   <div class="wc-recording-modal-body">
    <div id="wc-recording-alert" class="woocommerce-message"></div>
    
    <div class="wc-recording-type-selector">
    <button type="button" id="wc-start-audio" class="button">
     <?php _e('Nagraj wiadomość audio', 'woocommerce'); ?>
    </button>
    <button type="button" id="wc-start-video" class="button">
     <?php _e('Nagraj wiadomość wideo', 'woocommerce'); ?>
    </button>
    </div>
    
    <div id="wc-recording-controls" style="display:none;">
    <button type="button" id="wc-stop-recording" class="button">
     <?php _e('Zatrzymaj nagrywanie', 'woocommerce'); ?>
    </button>
    <div id="wc-recording-timer">00:00</div>
    </div>
    
    <div id="wc-recording-preview" style="display:none;">
    <h4><?php _e('Podgląd nagrania', 'woocommerce'); ?></h4>
    <audio id="wc-audio-preview" controls style="width:100%;"></audio>
    <video id="wc-video-preview" controls style="width:100%; max-height:300px; display:none;"></video>
    
    <div class="wc-recording-actions">
     <button type="button" id="wc-submit-recording" class="button button-primary">
      <?php _e('Zapisz nagranie', 'woocommerce'); ?>
     </button>
     <button type="button" id="wc-delete-recording" class="button">
      <?php _e('Usuń nagranie', 'woocommerce'); ?>
     </button>
    </div>
    </div>
   </div>
   <input type="hidden" id="wc-current-product-id" value="">
   <input type="hidden" id="wc-current-cart-key" value="">
   <input type="hidden" id="wc-current-recording-key" value="">
  </div>
  <div id="wc-recording-modal-overlay" class="wc-recording-modal-overlay"></div>
  <?php
  }
 }

 public function save_recording_data($item, $cart_item_key, $values, $order) {
  if (!empty($values['recording_id'])) {
  $item->add_meta_data('_recording_id', $values['recording_id'], true);
  }
 }

 public function save_recording() {
  check_ajax_referer('save_recording_nonce', 'security');
  
  if (!isset($_FILES['recording']) || !isset($_POST['cart_key']) || !isset($_POST['product_id'])) {
  wp_send_json_error(__('Brak wymaganych danych.', 'woocommerce'));
  }
  
  $upload_dir = wp_upload_dir();
  $recording_dir = $upload_dir['basedir'] . '/wc-product-recordings';
  
  if (!file_exists($recording_dir)) {
  wp_mkdir_p($recording_dir);
  }
  
  $file_name = sanitize_file_name('recording_' . $_POST['cart_key'] . '_' . uniqid() . '.webm');
  $file_path = $recording_dir . '/' . $file_name;
  
  if (move_uploaded_file($_FILES['recording']['tmp_name'], $file_path)) {
  $recording_id = uniqid('rec_');
  $cart = WC()->cart;
  $cart_item = $cart->get_cart_item($_POST['cart_key']);
  
  if ($cart_item) {
   $cart->cart_contents[$_POST['cart_key']]['recording_id'] = $recording_id;
   $cart->set_session();
  }
  
  wp_send_json_success(array(
   'recording_id' => $recording_id,
   'file_name' => $file_name,
   'file_path' => $file_path
  ));
  } else {
  wp_send_json_error(__('Błąd podczas zapisywania nagrania.', 'woocommerce'));
  }
 }

 public function get_recording() {
  check_ajax_referer('save_recording_nonce', 'security');
  
  if (!isset($_POST['cart_key'])) {
  wp_send_json_error(__('Brak klucza koszyka.', 'woocommerce'));
  }
  
  $cart = WC()->cart;
  $cart_item = $cart->get_cart_item($_POST['cart_key']);
  
  if (!$cart_item || !isset($cart_item['recording_id'])) {
  wp_send_json_error(__('Brak nagrania dla tego produktu.', 'woocommerce'));
  }
  
  wp_send_json_success(array(
  'recording_id' => $cart_item['recording_id']
  ));
 }

 public function process_recordings($order_id) {
  $order = wc_get_order($order_id);
  $upload_dir = wp_upload_dir();
  $recordings_dir = $upload_dir['basedir'] . '/wc-product-recordings';
  $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
  
  $attachments = array();
  $message = "Nowe zamówienie zawiera następujące nagrania:\n\n";
  $has_recordings = false;
  
  foreach ($order->get_items() as $item_id => $item) {
  $recording_id = $item->get_meta('_recording_id');
  
  if ($recording_id) {
   $has_recordings = true;
   $product_name = $item->get_name();
   $message .= "Produkt: {$product_name}\n";
   
   $files = glob($recordings_dir . '/recording_*_' . $recording_id . '*.webm');
   
   if (!empty($files)) {
    $old_path = $files[0];
    $new_filename = sanitize_file_name('order_' . $order_id . '_item_' . $item_id . '_' . $recording_id . '.webm');
    $new_path = $recordings_dir . '/' . $new_filename;
    
    if (rename($old_path, $new_path)) {
    $attachments[] = $new_path;
    $message .= "Nagranie: {$new_filename}\n\n";
    }
   }
  }
  }
  
  if ($has_recordings) {
  $subject = sprintf(__('Nagrania do zamówienia #%s', 'woocommerce'), $order_id);
  $headers = array('Content-Type: text/plain; charset=UTF-8');
  
  wp_mail($email, $subject, $message, $headers, $attachments);
  }
 }
}

new WC_Product_Recording();
2. Zawartość pliku assets/js/recording.js

jQuery(document).ready(function($) {
 var mediaRecorder;
 var audioChunks = [];
 var videoChunks = [];
 var stream;
 var timerInterval;
 var recordingTime = 0;
 var currentCartKey = '';
 var currentProductId = '';
 var currentRecordingKey = '';
 var isAudioRecording = true;

 $(document).on('click', '.wc-record-button', function() {
  currentCartKey = $(this).data('cart-key');
  currentProductId = $(this).data('product-id');
  currentRecordingKey = $(this).data('recording-key');

  $('#wc-current-product-id').val(currentProductId);
  $('#wc-current-cart-key').val(currentCartKey);
  $('#wc-current-recording-key').val(currentRecordingKey);

  $.ajax({
  url: wc_recording_params.ajax_url,
  type: 'POST',
  data: {
   action: 'get_product_recording',
   security: wc_recording_params.recording_nonce,
   cart_key: currentCartKey
  },
  success: function(response) {
   if (response.success && response.data.recording_id) {
    $('#wc-recording-alert').text('Ten produkt ma już nagranie. Nowe nagranie zastąpi poprzednie.').show();
   } else {
    $('#wc-recording-alert').text(wc_recording_params.warning_text).show();
   }
  }
  });

  $('#wc-recording-modal').show();
  $('#wc-recording-modal-overlay').show();
 });

 $('.wc-recording-close, #wc-recording-modal-overlay').click(function() {
  stopRecording();
  $('#wc-recording-modal').hide();
  $('#wc-recording-modal-overlay').hide();
  resetRecordingUI();
 });

 function startRecording() {
 if (isAudioRecording) {
 navigator.mediaDevices.getUserMedia({ audio: true })
 .then(function(stream

 Continue generating
Grok 3 Mini
coin image
30
Upgrade




Ask me anything...



Powered by AITOPIA 
Chat
Ask
Search
Write
Image
ChatFile
Vision
Full Page

Czy działa wszystko

Edit
Tak, wszystko działa poprawnie! Mogę odpowiadać po polsku i jestem gotowy, żeby Ci pomóc. Czy masz jakieś pytania lub potrzebujesz pomocy z czymś konkretnym?




Nie mogę odtworzyć poprzednich chatów z tobą a mam ważne informacje tam czemu jest error

Edit
Niestety, nie mogę zachowywać informacji z poprzednich rozmów - każda nasza konwersacja zaczyna się od nowa. To znaczy, że nie mam dostępu do żadnych wcześniejszych chatów ani informacji, które tam omawialiśmy.

Jeśli chodzi o błąd przy próbie odtworzenia poprzednich chatów, to może być problem techniczny z aplikacją. Oto co możesz spróbować:

Odśwież stronę lub zrestartuj aplikację
Sprawdź połączenie internetowe
Wyczyść cache przeglądarki
Spróbuj zalogować się ponownie
Jeśli problem nadal występuje, warto skontaktować się z pomocą techniczną Anthropic pod adresem https://support.anthropic.com - oni będą mogli lepiej pomóc z problemami technicznymi.

W międzyczasie, jeśli pamiętasz te ważne informacje, możesz je ponownie ze mną omówić w tej rozmowie. Jestem gotowy pomóc Ci z tym, nad czym pracowaliśmy wcześniej.










Chat

New Conversation

🤓 Explain a complex thing

Explain Artificial Intelligence so that I can explain it to my six-year-old child.


🧠 Get suggestions and create new ideas

Please give me the best 10 travel ideas around the world


💭 Translate, summarize, fix grammar and more…

Translate "I love you" French


GPT-4o Mini
Hello, how can I help you today?
# Poprawiona Wtyczka WooCommerce do Nagrywania Wiadomości Audio/Video

Poniżej przedstawiam poprawioną wersję wtyczki, która:

1. Dodaje panel sterowania z możliwością ustawienia kolorów i odbiorcy email
2. Wyświetla przycisk "Nagraj wiadomość" przy każdym produkcie w koszyku
3. Pozwala na personalizację każdego produktu osobną wiadomością
4. Zapewnia lepszą jakość dźwięku

## 1. Główny kod wtyczki (stwórz plik `woocommerce-product-recording.php`)

```php
<?php
/*
 * Plugin Name: WooCommerce Product Audio/Video Message
 * Description: Allows customers to record personal audio/video messages for each product
 * Version: 2.0
 * Author: Your Name
 */

if (!defined('ABSPATH')) exit;

class WC_Product_Recording {
    private $options;
    
    public function __construct() {
        $this->options = get_option('wc_product_recording_settings');
        
        // Initialize settings
        add_action('admin_init', array($this, 'register_settings'));
        add_action('admin_menu', array($this, 'add_admin_menu'));
        
        // Enqueue scripts and styles
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        
        // Add recording button to cart items
        add_filter('woocommerce_cart_item_name', array($this, 'add_recording_button'), 10, 3);
        
        // Save recording data
        add_action('woocommerce_checkout_create_order_line_item', array($this, 'save_recording_data'), 10, 4);
        
        // Process recordings after payment
        add_action('woocommerce_payment_complete', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_processing', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_completed', array($this, 'process_recordings'));
        
        // AJAX handlers
        add_action('wp_ajax_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_nopriv_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_get_product_recording', array($this, 'get_recording'));
        add_action('wp_ajax_nopriv_get_product_recording', array($this, 'get_recording'));
        
        // Add recording modal to footer
        add_action('wp_footer', array($this, 'recording_modal'));
    }
    
    public function register_settings() {
        register_setting('wc_product_recording_options', 'wc_product_recording_settings', array($this, 'sanitize_settings'));
        
        add_settings_section(
            'wc_product_recording_main',
            'Ustawienia Nagrywania Produktów',
            array($this, 'settings_section_text'),
            'wc-product-recording'
        );
        
        add_settings_field(
            'notification_email',
            'Email Odbiorcy',
            array($this, 'email_field_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'button_color',
            'Kolor Przycisku',
            array($this, 'color_field_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'modal_color',
            'Kolor Modala',
            array($this, 'modal_color_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'max_duration',
            'Maksymalny czas nagrania (sekundy)',
            array($this, 'max_duration_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
    }
    
    public function sanitize_settings($input) {
        $input['notification_email'] = sanitize_email($input['notification_email']);
        $input['button_color'] = sanitize_hex_color($input['button_color']);
        $input['modal_color'] = sanitize_hex_color($input['modal_color']);
        $input['max_duration'] = absint($input['max_duration']);
        return $input;
    }
    
    public function settings_section_text() {
        echo '<p>Konfiguracja funkcji nagrywania wiadomości dla produktów</p>';
    }
    
    public function email_field_render() {
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        ?>
        <input type='email' name='wc_product_recording_settings[notification_email]' value='<?php echo esc_attr($email); ?>' class='regular-text'>
        <?php
    }
    
    public function color_field_render() {
        $color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
        ?>
        <input type='color' name='wc_product_recording_settings[button_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function modal_color_render() {
        $color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
        ?>
        <input type='color' name='wc_product_recording_settings[modal_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function max_duration_render() {
        $duration = isset($this->options['max_duration']) ? $this->options['max_duration'] : 120;
        ?>
        <input type='number' name='wc_product_recording_settings[max_duration]' value='<?php echo esc_attr($duration); ?>' min='10' max='600'>
        <?php
    }
    
    public function add_admin_menu() {
        add_options_page(
            'Ustawienia Nagrywania Produktów',
            'Nagrywanie Produktów',
            'manage_options',
            'wc-product-recording',
            array($this, 'admin_page_content')
        );
    }
    
    public function admin_page_content() {
        ?>
        <div class="wrap">
            <h1>Ustawienia Nagrywania Produktów</h1>
            <form method="post" action="options.php">
                <?php
                settings_fields('wc_product_recording_options');
                do_settings_sections('wc-product-recording');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }
    
    public function enqueue_scripts() {
        if (is_cart() || is_checkout()) {
            $button_color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
            $modal_color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
            
            wp_enqueue_style(
                'wc-recording-style',
                plugin_dir_url(__FILE__) . 'assets/css/recording.css',
                array(),
                '2.0'
            );
            
            // Dynamic CSS with settings
            $custom_css = "
                .wc-record-button {
                    background-color: {$button_color} !important;
                    border-color: {$button_color} !important;
                }
                .wc-recording-modal {
                    background: {$modal_color} !important;
                }
                .wc-recording-modal-header {
                    background: {$button_color} !important;
                }
            ";
            wp_add_inline_style('wc-recording-style', $custom_css);
            
            wp_enqueue_script(
                'recordrtc',
                'https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.min.js',
                array(),
                '5.6.2',
                true
            );
            
            wp_enqueue_script(
                'wc-product-recording',
                plugin_dir_url(__FILE__) . 'assets/js/recording.js',
                array('jquery', 'recordrtc'),
                '2.0',
                true
            );
            
            wp_localize_script('wc-product-recording', 'wc_recording_params', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'recording_nonce' => wp_create_nonce('save_recording_nonce'),
                'warning_text' => __('Prosimy o ciszę w tle podczas nagrywania wiadomości.', 'woocommerce'),
                'recording_text' => __('Nagrywanie w toku...', 'woocommerce'),
                'stop_text' => __('Zatrzymaj nagrywanie', 'woocommerce'),
                'start_audio_text' => __('Nagraj wiadomość audio', 'woocommerce'),
                'start_video_text' => __('Nagraj wiadomość wideo', 'woocommerce'),
                'play_text' => __('Odtwórz nagranie', 'woocommerce'),
                'delete_text' => __('Usuń nagranie', 'woocommerce'),
                'submit_text' => __('Zapisz nagranie', 'woocommerce'),
                'audio_placeholder' => __('Brak nagrania audio', 'woocommerce'),
                'video_placeholder' => __('Brak nagrania wideo', 'woocommerce'),
                'max_time' => isset($this->options['max_duration']) ? $this->options['max_duration'] : 120,
                'audio_only' => __('Tylko audio', 'woocommerce'),
                'video_with_audio' => __('Wideo z audio', 'woocommerce')
            ));
        }
    }
    
    public function add_recording_button($product_name, $cart_item, $cart_item_key) {
        if (is_cart() || is_checkout()) {
            $product_id = $cart_item['product_id'];
            $recording_key = 'recording_' . md5($cart_item_key);
            
            $button_html = '<div class="wc-recording-container">';
            $button_html .= '<button type="button" class="button wc-record-button" ';
            $button_html .= 'data-product-id="' . esc_attr($product_id) . '" ';
            $button_html .= 'data-cart-key="' . esc_attr($cart_item_key) . '" ';
            $button_html .= 'data-recording-key="' . esc_attr($recording_key) . '">';
            $button_html .= __('Nagraj wiadomość', 'woocommerce') . '</button>';
            
            // Add hidden field for the recording ID
            $recording_id = isset($cart_item['recording_id']) ? $cart_item['recording_id'] : '';
            $button_html .= '<input type="hidden" name="cart_recording[' . esc_attr($cart_item_key) . ']" ';
            $button_html .= 'id="recording_' . esc_attr($cart_item_key) . '" value="' . esc_attr($recording_id) . '">';
            
            $button_html .= '</div>';
            
            return $product_name . $button_html;
        }
        
        return $product_name;
    }
    
    public function recording_modal() {
        if (is_cart() || is_checkout()) {
            ?>
            <div id="wc-recording-modal" class="wc-recording-modal">
                <div class="wc-recording-modal-header">
                    <h3><?php _e('Nagraj wiadomość', 'woocommerce'); ?></h3>
                    <span class="wc-recording-close">&times;</span>
                </div>
                <div class="wc-recording-modal-body">
                    <div id="wc-recording-alert" class="woocommerce-message"></div>
                    
                    <div class="wc-recording-type-selector">
                        <button type="button" id="wc-start-audio" class="button">
                            <?php _e('Nagraj wiadomość audio', 'woocommerce'); ?>
                        </button>
                        <button type="button" id="wc-start-video" class="button">
                            <?php _e('Nagraj wiadomość wideo', 'woocommerce'); ?>
                        </button>
                    </div>
                    
                    <div id="wc-recording-controls" style="display:none;">
                        <button type="button" id="wc-stop-recording" class="button">
                            <?php _e('Zatrzymaj nagrywanie', 'woocommerce'); ?>
                        </button>
                        <div id="wc-recording-timer">00:00</div>
                    </div>
                    
                    <div id="wc-recording-preview" style="display:none;">
                        <h4><?php _e('Podgląd nagrania', 'woocommerce'); ?></h4>
                        <audio id="wc-audio-preview" controls style="width:100%;"></audio>
                        <video id="wc-video-preview" controls style="width:100%; max-height:300px; display:none;"></video>
                        
                        <div class="wc-recording-actions">
                            <button type="button" id="wc-submit-recording" class="button button-primary">
                                <?php _e('Zapisz nagranie', 'woocommerce'); ?>
                            </button>
                            <button type="button" id="wc-delete-recording" class="button">
                                <?php _e('Usuń nagranie', 'woocommerce'); ?>
                            </button>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="wc-current-product-id" value="">
                <input type="hidden" id="wc-current-cart-key" value="">
                <input type="hidden" id="wc-current-recording-key" value="">
            </div>
            <div id="wc-recording-modal-overlay" class="wc-recording-modal-overlay"></div>
            <?php
        }
    }
    
    public function save_recording_data($item, $cart_item_key, $values, $order) {
        if (!empty($values['recording_id'])) {
            $item->add_meta_data('_recording_id', $values['recording_id'], true);
        }
    }
    
    public function save_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_FILES['recording']) || !isset($_POST['cart_key']) || !isset($_POST['product_id'])) {
            wp_send_json_error(__('Brak wymaganych danych.', 'woocommerce'));
        }
        
        $upload_dir = wp_upload_dir();
        $recording_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        
        if (!file_exists($recording_dir)) {
            wp_mkdir_p($recording_dir);
        }
        
        $file_name = sanitize_file_name('recording_' . $_POST['cart_key'] . '_' . uniqid() . '.webm');
        $file_path = $recording_dir . '/' . $file_name;
        
        if (move_uploaded_file($_FILES['recording']['tmp_name'], $file_path)) {
            $recording_id = uniqid('rec_');
            
            // Store recording info in cart item
            $cart = WC()->cart;
            $cart_item = $cart->get_cart_item($_POST['cart_key']);
            
            if ($cart_item) {
                $cart->cart_contents[$_POST['cart_key']]['recording_id'] = $recording_id;
                $cart->set_session();
            }
            
            wp_send_json_success(array(
                'recording_id' => $recording_id,
                'file_name' => $file_name,
                'file_path' => $file_path
            ));
        } else {
            wp_send_json_error(__('Błąd podczas zapisywania nagrania.', 'woocommerce'));
        }
    }
    
    public function get_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_POST['cart_key'])) {
            wp_send_json_error(__('Brak klucza koszyka.', 'woocommerce'));
        }
        
        $cart = WC()->cart;
        $cart_item = $cart->get_cart_item($_POST['cart_key']);
        
        if (!$cart_item || !isset($cart_item['recording_id'])) {
            wp_send_json_error(__('Brak nagrania dla tego produktu.', 'woocommerce'));
        }
        
        wp_send_json_success(array(
            'recording_id' => $cart_item['recording_id']
        ));
    }
    
    public function process_recordings($order_id) {
        $order = wc_get_order($order_id);
        $upload_dir = wp_upload_dir();
        $recordings_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        
        $attachments = array();
        $message = "Nowe zamówienie zawiera następujące nagrania:\n\n";
        $has_recordings = false;
        
        foreach ($order->get_items() as $item_id => $item) {
            $recording_id = $item->get_meta('_recording_id');
            
            if ($recording_id) {
                $has_recordings = true;
                $product_name = $item->get_name();
                $message .= "Produkt: {$product_name}\n";
                
                // Find the recording file
                $files = glob($recordings_dir . '/recording_*_' . $recording_id . '*.webm');
                
                if (!empty($files)) {
                    $old_path = $files[0];
                    $new_filename = sanitize_file_name(
                        'order_' . $order_id . 
                        '_item_' . $item_id . 
                        '_' . $recording_id . '.webm'
                    );
                    $new_path = $recordings_dir . '/' . $new_filename;
                    
                    if (rename($old_path, $new_path)) {
                        $attachments[] = $new_path;
                        $message .= "Nagranie: {$new_filename}\n\n";
                    }
                }
            }
        }
        
        if ($has_recordings) {
            $subject = sprintf(__('Nagrania do zamówienia #%s', 'woocommerce'), $order_id);
            $headers = array('Content-Type: text/plain; charset=UTF-8');
            
            wp_mail($email, $subject, $message, $headers, $attachments);
        }
    }
}

new WC_Product_Recording();
```

## 2. JavaScript (`assets/js/recording.js`)

```javascript
jQuery(document).ready(function($) {
    var mediaRecorder;
    var audioChunks = [];
    var videoChunks = [];
    var stream;
    var timerInterval;
    var recordingTime = 0;
    var currentCartKey = '';
    var currentProductId = '';
    var currentRecordingKey = '';
    var isAudioRecording = true;
    
    // Open modal when recording button is clicked
    $(document).on('click', '.wc-record-button', function() {
        currentCartKey = $(this).data('cart-key');
        currentProductId = $(this).data('product-id');
        currentRecordingKey = $(this).data('recording-key');
        
        $('#wc-current-product-id').val(currentProductId);
        $('#wc-current-cart-key').val(currentCartKey);
        $('#wc-current-recording-key').val(currentRecordingKey);
        
        // Check if there's already a recording
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: {
                action: 'get_product_recording',
                security: wc_recording_params.recording_nonce,
                cart_key: currentCartKey
            },
            success: function(response) {
                if (response.success && response.data.recording_id) {
                    $('#wc-recording-alert').text('Ten produkt ma już nagranie. Nowe nagranie zastąpi poprzednie.').show();
                } else {
                    $('#wc-recording-alert').text(wc_recording_params.warning_text).show();
                }
            }
        });
        
        $('#wc-recording-modal').show();
        $('#wc-recording-modal-overlay').show();
    });
    
    // Close modal
    $('.wc-recording-close, #wc-recording-modal-overlay').click(function() {
        stopRecording();
        $('#wc-recording-modal').hide();
        $('#wc-recording-modal-overlay').hide();
        resetRecordingUI();
    });
    
    // Start audio recording
    $('#wc-start-audio').click(function() {
        startRecording(true);
    });
    
    // Start video recording
    $('#wc-start-video').click(function() {
        startRecording(false);
    });
    
    // Stop recording
    $('#wc-stop-recording').click(function() {
        stopRecording();
    });
    
    // Submit recording
    $('#wc-submit-recording').click(function() {
        submitRecording();
    });
    
    // Delete recording
    $('#wc-delete-recording').click(function() {
        deleteRecording();
    });
    
    function startRecording(audioOnly) {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert('Twoja przeglądarka nie obsługuje nagrywania lub nie udzieliłaś/eś wymaganych uprawnień.');
            return;
        }
        
        isAudioRecording = audioOnly;
        
        // Hide type selector, show controls
        $('.wc-recording-type-selector').hide();
        $('#wc-recording-controls').show();
        $('#wc-recording-preview').hide();
        
        $('#wc-recording-alert').text(wc_recording_params.recording_text + ' ' + 
            (audioOnly ? wc_recording_params.audio_only : wc_recording_params.video_with_audio)).show();
        
        var constraints = {
            audio: true,
            video: !audioOnly
        };
        
        navigator.mediaDevices.getUserMedia(constraints)
            .then(function(s) {
                stream = s;
                
                if (audioOnly) {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'audio',
                        mimeType: 'audio/webm',
                        recorderType: RecordRTC.StereoAudioRecorder,
                        desiredSampRate: 44100,
                        numberOfAudioChannels: 1,
                        disableLogs: true,
                        audioBitsPerSecond: 128000 // Higher quality audio
                    });
                } else {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'video',
                        mimeType: 'video/webm;codecs=vp9',
                        disableLogs: true,
                        videoBitsPerSecond: 2500000,
                        audioBitsPerSecond: 128000
                    });
                }
                
                // Start timer
                recordingTime = 0;
                updateTimer();
                timerInterval = setInterval(function() {
                    recordingTime++;
                    updateTimer();
                    if (recordingTime >= wc_recording_params.max_time) {
                        stopRecording();
                    }
                }, 1000);
                
                mediaRecorder.startRecording();
            })
            .catch(function(err) {
                console.error('Error accessing media devices:', err);
                $('#wc-recording-alert').text('Błąd dostępu do mikrofonu/kamery: ' + err.message).show();
                resetRecordingUI();
            });
    }
    
    function updateTimer() {
        var minutes = Math.floor(recordingTime / 60);
        var seconds = recordingTime % 60;
        $('#wc-recording-timer').text(
            (minutes < 10 ? '0' + minutes : minutes) + ':' + 
            (seconds < 10 ? '0' + seconds : seconds)
        );
    }
    
    function stopRecording() {
        clearInterval(timerInterval);
        
        if (!mediaRecorder) return;
        
        mediaRecorder.stopRecording(function() {
            $('#wc-recording-alert').text('Nagranie zakończone. Możesz je odsłuchać/obejrzeć przed zapisem.').show();
            
            // Create preview
            var blob = mediaRecorder.getBlob();
            var url = URL.createObjectURL(blob);
            
            if (isAudioRecording) {
                $('#wc-audio-preview').attr('src', url).show();
                $('#wc-video-preview').hide();
            } else {
                $('#wc-video-preview').attr('src', url).show();
                $('#wc-audio-preview').hide();
            }
            
            $('#wc-recording-preview').show();
            
            // Stop all tracks
            if (stream) {
                stream.getTracks().forEach(function(track) {
                    track.stop();
                });
            }
        });
    }
    
    function submitRecording() {
        if (!mediaRecorder) {
            alert('Najpierw wykonaj nagranie');
            return;
        }
        
        var blob = mediaRecorder.getBlob();
        var formData = new FormData();
        formData.append('recording', blob, 'recording.webm');
        formData.append('action', 'save_product_recording');
        formData.append('security', wc_recording_params.recording_nonce);
        formData.append('cart_key', currentCartKey);
        formData.append('product_id', currentProductId);
        
        $('#wc-submit-recording').prop('disabled', true).text('Zapisywanie...');
        
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    $('#wc-recording-alert').text('Nagranie zostało zapisane do tego produktu.').show();
                    
                    // Update the hidden field in cart
                    $('#recording_' + currentCartKey).val(response.data.recording_id);
                    
                    // Close modal after 2 seconds
                    setTimeout(function() {
                        $('#wc-recording-modal').hide();
                        $('#wc-recording-modal-overlay').hide();
                        resetRecordingUI();
                    }, 2000);
                } else {
                    $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + response.data).show();
                    $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
                }
            },
            error: function(xhr, status, error) {
                $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + error).show();
                $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
            }
        });
    }
    
    function deleteRecording() {
        // Just reset the UI, actual file will be overwritten on new submission
        resetRecordingUI();
        $('#recording_' + currentCartKey).val('');
        $('#wc-recording-alert').text('Nagranie zostało usunięte. Możesz nagrać nową wiadomość.').show();
    }
    
    function resetRecordingUI() {
        $('.wc-recording-type-selector').show();
        $('#wc-recording-controls').hide();
        $('#wc-recording-preview').hide();
        $('#wc-recording-timer').text('00:00');
        $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
        
        if (mediaRecorder) {
            mediaRecorder = null;
        }
        
        if (stream) {
            stream.getTracks().forEach(function(track) {
                track.stop();
            });
            stream = null;
        }
        
        clearInterval(timerInterval);
    }
});
```

## 3. CSS (`assets/css/recording.css`)

```css
/* Modal styles */
.wc-recording-modal {
    display: none;
    position: fixed;
    z-index: 9999;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    max-width: 600px;
    border: 1px solid #ddd;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.wc-recording-modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9998;
}

.wc-recording-modal-header {
    padding: 15px;
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.wc-recording-modal-header h3 {
    margin: 0;
    font-size: 1.2em;
}

.wc-recording-close {
    font-size: 24px;
    cursor: pointer;
}

.wc-recording-modal-body {
    padding: 15px;
}

/* Button styles */
.wc-record-button {
    margin-top: 10px !important;
    display: inline-block !important;
}

.wc-recording-type-selector {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
}

.wc-recording-type-selector button {
    flex: 1;
}

/* Recording controls */
#wc-recording-controls {
    margin: 15px 0;
    display: flex;
    align-items: center;
    gap: 15px;
}

#wc-recording-timer {
    font-family: monospace;
    font-size: 1.2em;
}

/* Preview styles */
#wc-recording-preview {
    margin-top: 15px;
}

#wc-recording-preview h4 {
    margin-bottom: 10px;
}

#wc-audio-preview,
#wc-video-preview {
    margin-bottom: 15px;
    display: none;
}

.wc-recording-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
}

/* Alert styles */
#wc-recording-alert {
    padding: 10px;
    margin-bottom: 15px;
    display: none;
}

/* Responsive adjustments */
@media (max-width: 600px) {
    .wc-recording-type-selector {
        flex-direction: column;
    }
    
    #wc-recording-controls {
        flex-direction: column;
        align-items: flex-start;
    }
}
```

## Instrukcja instalacji:

1. Stwórz folder `/woocommerce-product-recording` w katalogu `/wp-content/plugins/`
2. Umieść w nim plik `woocommerce-product-recording.php` z pierwszym kodem
3. Stwórz strukturę folderów:
   ```
   /woocommerce-product-recording/
   ├── assets/
   │   ├── css/
   │   │   └── recording.css
   │   └── js/
   │       └── recording.js
   └── woocommerce-product-recording.php
   ```
4. Aktywuj wtyczkę w panelu WordPress

## Funkcjonalności:

1. **Panel sterowania**:
   - Ustawienie emaila odbiorcy
   - Wybór kolorów przycisków i modala
   - Ustawienie maksymalnego czasu nagrania

2. **Nagrywanie w koszyku**:
   - Przycisk "Nagraj wiadomość" przy każdym produkcie
   - Możliwość nagrania audio lub wideo
   - Podgląd przed zapisem
   - Timer pokazujący czas nagrania

3. **Przetwarzanie nagrań**:
   - Automatyczne wysyłanie na email po złożeniu zamówienia
   - Nazwy plików zawierają numer zamówienia, produktu i datę
   - Każdy produkt może mieć osobne nagranie

4. **Optymalizacja dźwięku**:
   - Wyższa jakość bitrate (128 kbps)
   - Monit o ciszę w tle przed nagraniem
   - Nagrywanie w formacie WebM dla lepszej kompresji

Wtyczka jest w pełni responsywna i dostosowuje się do różnych rozmiarów ekranu.
GPT-4o Mini
Aby poprawić wtyczkę WooCommerce do nagrywów (nagród), należy wziąć pod uwagę kilka kluczowych aspektów. Oto kilka kroków i wskazówek, które mogą pomóc w aktualizacji lub udoskonaleniu tej wtyczki:
1. Zrozumienie wymagań użytkowników:


Przeprowadź ankiety wśród użytkowników, aby zrozumieć, czego im brakuje w obecnej wersji.

Analizuj opinie wtyczki w repozytorium WordPress i na forach.


2. Dostosowanie funkcji nagród:


Umożliwienie użytkownikom łatwego przyznawania nagród za różnorodne działania, takie jak zakupy, recenzje, polecenia itp.

Wprowadzenie różnych poziomów nagród, które mogą być wyzwalane na podstawie punktów lub osiągnięć.


3. Integracja z systemem zarządzania klientami (CRM):


Umożliwienie synchronizacji danych z systemami CRM w celu lepszej analizy behawioralnej klientów.


4. Interfejs użytkownika:


Zadbaj o intuicyjny i estetyczny interfejs użytkownika, który ułatwi korzystanie z wtyczki.

Dodaj wizualne wskaźniki postępów, które pokazują, ile punktów zostało zdobytych i ile brakuje do nagrody.


5. Raportowanie i analityka:


Wprowadzenie zaawansowanych funkcji raportowania, aby administratorzy mogli analizować, jakie nagrody są najpopularniejsze, a jakie działania przynoszą najwięcej punktów.


6. Optymalizacja wydajności:


Upewnij się, że wtyczka działa płynnie nawet przy dużej liczbie użytkowników i transakcji.

Regularnie testuj wydajność i poprawiaj kod, aby zminimalizować czas ładowania.


7. Zgodność z innymi wtyczkami:


Upewnij się, że nowa wersja wtyczki jest zgodna z popularnymi wtyczkami WooCommerce i innymi najczęściej używanymi wtyczkami w ekosystemie WordPress.


8. Wsparcie i dokumentacja:


Utwórz obszerną dokumentację oraz samouczki dla użytkowników.

Zapewnij łatwe kanały wsparcia, takie jak fora, czaty na żywo czy system zgłoszeń.


9. Testy i feedback:


Przeprowadź beta-testy z wybraną grupą użytkowników, aby uzyskać feedback przed oficjalnym wydaniem.

Upewnij się, że aplikacja jest wolna od błędów i działa zgodnie z oczekiwaniami.


10. Aktualizacja i utrzymanie:


Regularnie aktualizuj wtyczkę, aby dostosować się do zmieniających się potrzeb użytkowników oraz nowych wersji WooCommerce i WordPress.


Prowadzenie skutecznej wtyczki do nagród w WooCommerce wymaga ciągłej uwagi i zaangażowania, ale odpowiednie podejście i dbałość o szczegóły mogą przyczynić się do jej sukcesu.
zrob z tego gotowa wtyczke do pobrania # Poprawiona Wtyczka WooCommerce do Nagrywania Wiadomości Audio/Video

Poniżej przedstawiam poprawioną wersję wtyczki, która:

1. Dodaje panel sterowania z możliwością ustawienia kolorów i odbiorcy email
2. Wyświetla przycisk "Nagraj wiadomość" przy każdym produkcie w koszyku
3. Pozwala na personalizację każdego produktu osobną wiadomością
4. Zapewnia lepszą jakość dźwięku

## 1. Główny kod wtyczki (stwórz plik `woocommerce-product-recording.php`)

```php
<?php
/*
 * Plugin Name: WooCommerce Product Audio/Video Message
 * Description: Allows customers to record personal audio/video messages for each product
 * Version: 2.0
 * Author: Your Name
 */

if (!defined('ABSPATH')) exit;

class WC_Product_Recording {
    private $options;
    
    public function __construct() {
        $this->options = get_option('wc_product_recording_settings');
        
        // Initialize settings
        add_action('admin_init', array($this, 'register_settings'));
        add_action('admin_menu', array($this, 'add_admin_menu'));
        
        // Enqueue scripts and styles
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        
        // Add recording button to cart items
        add_filter('woocommerce_cart_item_name', array($this, 'add_recording_button'), 10, 3);
        
        // Save recording data
        add_action('woocommerce_checkout_create_order_line_item', array($this, 'save_recording_data'), 10, 4);
        
        // Process recordings after payment
        add_action('woocommerce_payment_complete', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_processing', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_completed', array($this, 'process_recordings'));
        
        // AJAX handlers
        add_action('wp_ajax_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_nopriv_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_get_product_recording', array($this, 'get_recording'));
        add_action('wp_ajax_nopriv_get_product_recording', array($this, 'get_recording'));
        
        // Add recording modal to footer
        add_action('wp_footer', array($this, 'recording_modal'));
    }
    
    public function register_settings() {
        register_setting('wc_product_recording_options', 'wc_product_recording_settings', array($this, 'sanitize_settings'));
        
        add_settings_section(
            'wc_product_recording_main',
            'Ustawienia Nagrywania Produktów',
            array($this, 'settings_section_text'),
            'wc-product-recording'
        );
        
        add_settings_field(
            'notification_email',
            'Email Odbiorcy',
            array($this, 'email_field_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'button_color',
            'Kolor Przycisku',
            array($this, 'color_field_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'modal_color',
            'Kolor Modala',
            array($this, 'modal_color_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'max_duration',
            'Maksymalny czas nagrania (sekundy)',
            array($this, 'max_duration_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
    }
    
    public function sanitize_settings($input) {
        $input['notification_email'] = sanitize_email($input['notification_email']);
        $input['button_color'] = sanitize_hex_color($input['button_color']);
        $input['modal_color'] = sanitize_hex_color($input['modal_color']);
        $input['max_duration'] = absint($input['max_duration']);
        return $input;
    }
    
    public function settings_section_text() {
        echo '<p>Konfiguracja funkcji nagrywania wiadomości dla produktów</p>';
    }
    
    public function email_field_render() {
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        ?>
        <input type='email' name='wc_product_recording_settings[notification_email]' value='<?php echo esc_attr($email); ?>' class='regular-text'>
        <?php
    }
    
    public function color_field_render() {
        $color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
        ?>
        <input type='color' name='wc_product_recording_settings[button_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function modal_color_render() {
        $color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
        ?>
        <input type='color' name='wc_product_recording_settings[modal_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function max_duration_render() {
        $duration = isset($this->options['max_duration']) ? $this->options['max_duration'] : 120;
        ?>
        <input type='number' name='wc_product_recording_settings[max_duration]' value='<?php echo esc_attr($duration); ?>' min='10' max='600'>
        <?php
    }
    
    public function add_admin_menu() {
        add_options_page(
            'Ustawienia Nagrywania Produktów',
            'Nagrywanie Produktów',
            'manage_options',
            'wc-product-recording',
            array($this, 'admin_page_content')
        );
    }
    
    public function admin_page_content() {
        ?>
        <div class="wrap">
            <h1>Ustawienia Nagrywania Produktów</h1>
            <form method="post" action="options.php">
                <?php
                settings_fields('wc_product_recording_options');
                do_settings_sections('wc-product-recording');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }
    
    public function enqueue_scripts() {
        if (is_cart() || is_checkout()) {
            $button_color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
            $modal_color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
            
            wp_enqueue_style(
                'wc-recording-style',
                plugin_dir_url(__FILE__) . 'assets/css/recording.css',
                array(),
                '2.0'
            );
            
            // Dynamic CSS with settings
            $custom_css = "
                .wc-record-button {
                    background-color: {$button_color} !important;
                    border-color: {$button_color} !important;
                }
                .wc-recording-modal {
                    background: {$modal_color} !important;
                }
                .wc-recording-modal-header {
                    background: {$button_color} !important;
                }
            ";
            wp_add_inline_style('wc-recording-style', $custom_css);
            
            wp_enqueue_script(
                'recordrtc',
                'https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.min.js',
                array(),
                '5.6.2',
                true
            );
            
            wp_enqueue_script(
                'wc-product-recording',
                plugin_dir_url(__FILE__) . 'assets/js/recording.js',
                array('jquery', 'recordrtc'),
                '2.0',
                true
            );
            
            wp_localize_script('wc-product-recording', 'wc_recording_params', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'recording_nonce' => wp_create_nonce('save_recording_nonce'),
                'warning_text' => __('Prosimy o ciszę w tle podczas nagrywania wiadomości.', 'woocommerce'),
                'recording_text' => __('Nagrywanie w toku...', 'woocommerce'),
                'stop_text' => __('Zatrzymaj nagrywanie', 'woocommerce'),
                'start_audio_text' => __('Nagraj wiadomość audio', 'woocommerce'),
                'start_video_text' => __('Nagraj wiadomość wideo', 'woocommerce'),
                'play_text' => __('Odtwórz nagranie', 'woocommerce'),
                'delete_text' => __('Usuń nagranie', 'woocommerce'),
                'submit_text' => __('Zapisz nagranie', 'woocommerce'),
                'audio_placeholder' => __('Brak nagrania audio', 'woocommerce'),
                'video_placeholder' => __('Brak nagrania wideo', 'woocommerce'),
                'max_time' => isset($this->options['max_duration']) ? $this->options['max_duration'] : 120,
                'audio_only' => __('Tylko audio', 'woocommerce'),
                'video_with_audio' => __('Wideo z audio', 'woocommerce')
            ));
        }
    }
    
    public function add_recording_button($product_name, $cart_item, $cart_item_key) {
        if (is_cart() || is_checkout()) {
            $product_id = $cart_item['product_id'];
            $recording_key = 'recording_' . md5($cart_item_key);
            
            $button_html = '<div class="wc-recording-container">';
            $button_html .= '<button type="button" class="button wc-record-button" ';
            $button_html .= 'data-product-id="' . esc_attr($product_id) . '" ';
            $button_html .= 'data-cart-key="' . esc_attr($cart_item_key) . '" ';
            $button_html .= 'data-recording-key="' . esc_attr($recording_key) . '">';
            $button_html .= __('Nagraj wiadomość', 'woocommerce') . '</button>';
            
            // Add hidden field for the recording ID
            $recording_id = isset($cart_item['recording_id']) ? $cart_item['recording_id'] : '';
            $button_html .= '<input type="hidden" name="cart_recording[' . esc_attr($cart_item_key) . ']" ';
            $button_html .= 'id="recording_' . esc_attr($cart_item_key) . '" value="' . esc_attr($recording_id) . '">';
            
            $button_html .= '</div>';
            
            return $product_name . $button_html;
        }
        
        return $product_name;
    }
    
    public function recording_modal() {
        if (is_cart() || is_checkout()) {
            ?>
            <div id="wc-recording-modal" class="wc-recording-modal">
                <div class="wc-recording-modal-header">
                    <h3><?php _e('Nagraj wiadomość', 'woocommerce'); ?></h3>
                    <span class="wc-recording-close">&times;</span>
                </div>
                <div class="wc-recording-modal-body">
                    <div id="wc-recording-alert" class="woocommerce-message"></div>
                    
                    <div class="wc-recording-type-selector">
                        <button type="button" id="wc-start-audio" class="button">
                            <?php _e('Nagraj wiadomość audio', 'woocommerce'); ?>
                        </button>
                        <button type="button" id="wc-start-video" class="button">
                            <?php _e('Nagraj wiadomość wideo', 'woocommerce'); ?>
                        </button>
                    </div>
                    
                    <div id="wc-recording-controls" style="display:none;">
                        <button type="button" id="wc-stop-recording" class="button">
                            <?php _e('Zatrzymaj nagrywanie', 'woocommerce'); ?>
                        </button>
                        <div id="wc-recording-timer">00:00</div>
                    </div>
                    
                    <div id="wc-recording-preview" style="display:none;">
                        <h4><?php _e('Podgląd nagrania', 'woocommerce'); ?></h4>
                        <audio id="wc-audio-preview" controls style="width:100%;"></audio>
                        <video id="wc-video-preview" controls style="width:100%; max-height:300px; display:none;"></video>
                        
                        <div class="wc-recording-actions">
                            <button type="button" id="wc-submit-recording" class="button button-primary">
                                <?php _e('Zapisz nagranie', 'woocommerce'); ?>
                            </button>
                            <button type="button" id="wc-delete-recording" class="button">
                                <?php _e('Usuń nagranie', 'woocommerce'); ?>
                            </button>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="wc-current-product-id" value="">
                <input type="hidden" id="wc-current-cart-key" value="">
                <input type="hidden" id="wc-current-recording-key" value="">
            </div>
            <div id="wc-recording-modal-overlay" class="wc-recording-modal-overlay"></div>
            <?php
        }
    }
    
    public function save_recording_data($item, $cart_item_key, $values, $order) {
        if (!empty($values['recording_id'])) {
            $item->add_meta_data('_recording_id', $values['recording_id'], true);
        }
    }
    
    public function save_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_FILES['recording']) || !isset($_POST['cart_key']) || !isset($_POST['product_id'])) {
            wp_send_json_error(__('Brak wymaganych danych.', 'woocommerce'));
        }
        
        $upload_dir = wp_upload_dir();
        $recording_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        
        if (!file_exists($recording_dir)) {
            wp_mkdir_p($recording_dir);
        }
        
        $file_name = sanitize_file_name('recording_' . $_POST['cart_key'] . '_' . uniqid() . '.webm');
        $file_path = $recording_dir . '/' . $file_name;
        
        if (move_uploaded_file($_FILES['recording']['tmp_name'], $file_path)) {
            $recording_id = uniqid('rec_');
            
            // Store recording info in cart item
            $cart = WC()->cart;
            $cart_item = $cart->get_cart_item($_POST['cart_key']);
            
            if ($cart_item) {
                $cart->cart_contents[$_POST['cart_key']]['recording_id'] = $recording_id;
                $cart->set_session();
            }
            
            wp_send_json_success(array(
                'recording_id' => $recording_id,
                'file_name' => $file_name,
                'file_path' => $file_path
            ));
        } else {
            wp_send_json_error(__('Błąd podczas zapisywania nagrania.', 'woocommerce'));
        }
    }
    
    public function get_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_POST['cart_key'])) {
            wp_send_json_error(__('Brak klucza koszyka.', 'woocommerce'));
        }
        
        $cart = WC()->cart;
        $cart_item = $cart->get_cart_item($_POST['cart_key']);
        
        if (!$cart_item || !isset($cart_item['recording_id'])) {
            wp_send_json_error(__('Brak nagrania dla tego produktu.', 'woocommerce'));
        }
        
        wp_send_json_success(array(
            'recording_id' => $cart_item['recording_id']
        ));
    }
    
    public function process_recordings($order_id) {
        $order = wc_get_order($order_id);
        $upload_dir = wp_upload_dir();
        $recordings_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        
        $attachments = array();
        $message = "Nowe zamówienie zawiera następujące nagrania:\n\n";
        $has_recordings = false;
        
        foreach ($order->get_items() as $item_id => $item) {
            $recording_id = $item->get_meta('_recording_id');
            
            if ($recording_id) {
                $has_recordings = true;
                $product_name = $item->get_name();
                $message .= "Produkt: {$product_name}\n";
                
                // Find the recording file
                $files = glob($recordings_dir . '/recording_*_' . $recording_id . '*.webm');
                
                if (!empty($files)) {
                    $old_path = $files[0];
                    $new_filename = sanitize_file_name(
                        'order_' . $order_id . 
                        '_item_' . $item_id . 
                        '_' . $recording_id . '.webm'
                    );
                    $new_path = $recordings_dir . '/' . $new_filename;
                    
                    if (rename($old_path, $new_path)) {
                        $attachments[] = $new_path;
                        $message .= "Nagranie: {$new_filename}\n\n";
                    }
                }
            }
        }
        
        if ($has_recordings) {
            $subject = sprintf(__('Nagrania do zamówienia #%s', 'woocommerce'), $order_id);
            $headers = array('Content-Type: text/plain; charset=UTF-8');
            
            wp_mail($email, $subject, $message, $headers, $attachments);
        }
    }
}

new WC_Product_Recording();
```

## 2. JavaScript (`assets/js/recording.js`)

```javascript
jQuery(document).ready(function($) {
    var mediaRecorder;
    var audioChunks = [];
    var videoChunks = [];
    var stream;
    var timerInterval;
    var recordingTime = 0;
    var currentCartKey = '';
    var currentProductId = '';
    var currentRecordingKey = '';
    var isAudioRecording = true;
    
    // Open modal when recording button is clicked
    $(document).on('click', '.wc-record-button', function() {
        currentCartKey = $(this).data('cart-key');
        currentProductId = $(this).data('product-id');
        currentRecordingKey = $(this).data('recording-key');
        
        $('#wc-current-product-id').val(currentProductId);
        $('#wc-current-cart-key').val(currentCartKey);
        $('#wc-current-recording-key').val(currentRecordingKey);
        
        // Check if there's already a recording
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: {
                action: 'get_product_recording',
                security: wc_recording_params.recording_nonce,
                cart_key: currentCartKey
            },
            success: function(response) {
                if (response.success && response.data.recording_id) {
                    $('#wc-recording-alert').text('Ten produkt ma już nagranie. Nowe nagranie zastąpi poprzednie.').show();
                } else {
                    $('#wc-recording-alert').text(wc_recording_params.warning_text).show();
                }
            }
        });
        
        $('#wc-recording-modal').show();
        $('#wc-recording-modal-overlay').show();
    });
    
    // Close modal
    $('.wc-recording-close, #wc-recording-modal-overlay').click(function() {
        stopRecording();
        $('#wc-recording-modal').hide();
        $('#wc-recording-modal-overlay').hide();
        resetRecordingUI();
    });
    
    // Start audio recording
    $('#wc-start-audio').click(function() {
        startRecording(true);
    });
    
    // Start video recording
    $('#wc-start-video').click(function() {
        startRecording(false);
    });
    
    // Stop recording
    $('#wc-stop-recording').click(function() {
        stopRecording();
    });
    
    // Submit recording
    $('#wc-submit-recording').click(function() {
        submitRecording();
    });
    
    // Delete recording
    $('#wc-delete-recording').click(function() {
        deleteRecording();
    });
    
    function startRecording(audioOnly) {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert('Twoja przeglądarka nie obsługuje nagrywania lub nie udzieliłaś/eś wymaganych uprawnień.');
            return;
        }
        
        isAudioRecording = audioOnly;
        
        // Hide type selector, show controls
        $('.wc-recording-type-selector').hide();
        $('#wc-recording-controls').show();
        $('#wc-recording-preview').hide();
        
        $('#wc-recording-alert').text(wc_recording_params.recording_text + ' ' + 
            (audioOnly ? wc_recording_params.audio_only : wc_recording_params.video_with_audio)).show();
        
        var constraints = {
            audio: true,
            video: !audioOnly
        };
        
        navigator.mediaDevices.getUserMedia(constraints)
            .then(function(s) {
                stream = s;
                
                if (audioOnly) {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'audio',
                        mimeType: 'audio/webm',
                        recorderType: RecordRTC.StereoAudioRecorder,
                        desiredSampRate: 44100,
                        numberOfAudioChannels: 1,
                        disableLogs: true,
                        audioBitsPerSecond: 128000 // Higher quality audio
                    });
                } else {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'video',
                        mimeType: 'video/webm;codecs=vp9',
                        disableLogs: true,
                        videoBitsPerSecond: 2500000,
                        audioBitsPerSecond: 128000
                    });
                }
                
                // Start timer
                recordingTime = 0;
                updateTimer();
                timerInterval = setInterval(function() {
                    recordingTime++;
                    updateTimer();
                    if (recordingTime >= wc_recording_params.max_time) {
                        stopRecording();
                    }
                }, 1000);
                
                mediaRecorder.startRecording();
            })
            .catch(function(err) {
                console.error('Error accessing media devices:', err);
                $('#wc-recording-alert').text('Błąd dostępu do mikrofonu/kamery: ' + err.message).show();
                resetRecordingUI();
            });
    }
    
    function updateTimer() {
        var minutes = Math.floor(recordingTime / 60);
        var seconds = recordingTime % 60;
        $('#wc-recording-timer').text(
            (minutes < 10 ? '0' + minutes : minutes) + ':' + 
            (seconds < 10 ? '0' + seconds : seconds)
        );
    }
    
    function stopRecording() {
        clearInterval(timerInterval);
        
        if (!mediaRecorder) return;
        
        mediaRecorder.stopRecording(function() {
            $('#wc-recording-alert').text('Nagranie zakończone. Możesz je odsłuchać/obejrzeć przed zapisem.').show();
            
            // Create preview
            var blob = mediaRecorder.getBlob();
            var url = URL.createObjectURL(blob);
            
            if (isAudioRecording) {
                $('#wc-audio-preview').attr('src', url).show();
                $('#wc-video-preview').hide();
            } else {
                $('#wc-video-preview').attr('src', url).show();
                $('#wc-audio-preview').hide();
            }
            
            $('#wc-recording-preview').show();
            
            // Stop all tracks
            if (stream) {
                stream.getTracks().forEach(function(track) {
                    track.stop();
                });
            }
        });
    }
    
    function submitRecording() {
        if (!mediaRecorder) {
            alert('Najpierw wykonaj nagranie');
            return;
        }
        
        var blob = mediaRecorder.getBlob();
        var formData = new FormData();
        formData.append('recording', blob, 'recording.webm');
        formData.append('action', 'save_product_recording');
        formData.append('security', wc_recording_params.recording_nonce);
        formData.append('cart_key', currentCartKey);
        formData.append('product_id', currentProductId);
        
        $('#wc-submit-recording').prop('disabled', true).text('Zapisywanie...');
        
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    $('#wc-recording-alert').text('Nagranie zostało zapisane do tego produktu.').show();
                    
                    // Update the hidden field in cart
                    $('#recording_' + currentCartKey).val(response.data.recording_id);
                    
                    // Close modal after 2 seconds
                    setTimeout(function() {
                        $('#wc-recording-modal').hide();
                        $('#wc-recording-modal-overlay').hide();
                        resetRecordingUI();
                    }, 2000);
                } else {
                    $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + response.data).show();
                    $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
                }
            },
            error: function(xhr, status, error) {
                $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + error).show();
                $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
            }
        });
    }
    
    function deleteRecording() {
        // Just reset the UI, actual file will be overwritten on new submission
        resetRecordingUI();
        $('#recording_' + currentCartKey).val('');
        $('#wc-recording-alert').text('Nagranie zostało usunięte. Możesz nagrać nową wiadomość.').show();
    }
    
    function resetRecordingUI() {
        $('.wc-recording-type-selector').show();
        $('#wc-recording-controls').hide();
        $('#wc-recording-preview').hide();
        $('#wc-recording-timer').text('00:00');
        $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
        
        if (mediaRecorder) {
            mediaRecorder = null;
        }
        
        if (stream) {
            stream.getTracks().forEach(function(track) {
                track.stop();
            });
            stream = null;
        }
        
        clearInterval(timerInterval);
    }
});
```

## 3. CSS (`assets/css/recording.css`)

```css
/* Modal styles */
.wc-recording-modal {
    display: none;
    position: fixed;
    z-index: 9999;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    max-width: 600px;
    border: 1px solid #ddd;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}

.wc-recording-modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9998;
}

.wc-recording-modal-header {
    padding: 15px;
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.wc-recording-modal-header h3 {
    margin: 0;
    font-size: 1.2em;
}

.wc-recording-close {
    font-size: 24px;
    cursor: pointer;
}

.wc-recording-modal-body {
    padding: 15px;
}

/* Button styles */
.wc-record-button {
    margin-top: 10px !important;
    display: inline-block !important;
}

.wc-recording-type-selector {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
}

.wc-recording-type-selector button {
    flex: 1;
}

/* Recording controls */
#wc-recording-controls {
    margin: 15px 0;
    display: flex;
    align-items: center;
    gap: 15px;
}

#wc-recording-timer {
    font-family: monospace;
    font-size: 1.2em;
}

/* Preview styles */
#wc-recording-preview {
    margin-top: 15px;
}

#wc-recording-preview h4 {
    margin-bottom: 10px;
}

#wc-audio-preview,
#wc-video-preview {
    margin-bottom: 15px;
    display: none;
}

.wc-recording-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
}

/* Alert styles */
#wc-recording-alert {
    padding: 10px;
    margin-bottom: 15px;
    display: none;
}

/* Responsive adjustments */
@media (max-width: 600px) {
    .wc-recording-type-selector {
        flex-direction: column;
    }
    
    #wc-recording-controls {
        flex-direction: column;
        align-items: flex-start;
    }
}
```

## Instrukcja instalacji:

1. Stwórz folder `/woocommerce-product-recording` w katalogu `/wp-content/plugins/`
2. Umieść w nim plik `woocommerce-product-recording.php` z pierwszym kodem
3. Stwórz strukturę folderów:
   ```
   /woocommerce-product-recording/
   ├── assets/
   │   ├── css/
   │   │   └── recording.css
   │   └── js/
   │       └── recording.js
   └── woocommerce-product-recording.php
   ```
4. Aktywuj wtyczkę w panelu WordPress

## Funkcjonalności:

1. **Panel sterowania**:
   - Ustawienie emaila odbiorcy
   - Wybór kolorów przycisków i modala
   - Ustawienie maksymalnego czasu nagrania

2. **Nagrywanie w koszyku**:
   - Przycisk "Nagraj wiadomość" przy każdym produkcie
   - Możliwość nagrania audio lub wideo
   - Podgląd przed zapisem
   - Timer pokazujący czas nagrania

3. **Przetwarzanie nagrań**:
   - Automatyczne wysyłanie na email po złożeniu zamówienia
   - Nazwy plików zawierają numer zamówienia, produktu i datę
   - Każdy produkt może mieć osobne nagranie

4. **Optymalizacja dźwięku**:
   - Wyższa jakość bitrate (128 kbps)
   - Monit o ciszę w tle przed nagraniem
   - Nagrywanie w formacie WebM dla lepszej kompresji

Wtyczka jest w pełni responsywna i dostosowuje się do różnych rozmiarów ekranu.
GPT-4o Mini
Aby stworzyć gotową do pobrania wtyczkę WooCommerce do nagrywania wiadomości audio/wideo, zorganizuję wszystkie pliki potrzebne do jej działania według wcześniejszego opisu. Poniżej znajduje się struktura folderów, a następnie zaktualizowany kod do każdego z plików.
Struktura folderów

Utwórz folder o nazwie `woocommerce-product-recording` w katalogu `/wp-content/plugins/`, a następnie utwórz w nim następującą strukturę folderów:
/woocommerce-product-recording/
├── assets/
│   ├── css/
│   │   └── recording.css
│   └── js/
│       └── recording.js
└── woocommerce-product-recording.php
Plik: woocommerce-product-recording.php

<?php
/*
 * Plugin Name: WooCommerce Product Audio/Video Message
 * Description: Allows customers to record personal audio/video messages for each product.
 * Version: 2.0
 * Author: Your Name
 */

if (!defined('ABSPATH')) exit;

class WC_Product_Recording {
    private $options;
    
    public function __construct() {
        $this->options = get_option('wc_product_recording_settings');
        
        add_action('admin_init', array($this, 'register_settings'));
        add_action('admin_menu', array($this, 'add_admin_menu'));
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        add_filter('woocommerce_cart_item_name', array($this, 'add_recording_button'), 10, 3);
        add_action('woocommerce_checkout_create_order_line_item', array($this, 'save_recording_data'), 10, 4);
        add_action('woocommerce_payment_complete', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_processing', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_completed', array($this, 'process_recordings'));
        add_action('wp_ajax_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_nopriv_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_get_product_recording', array($this, 'get_recording'));
        add_action('wp_ajax_nopriv_get_product_recording', array($this, 'get_recording'));
        add_action('wp_footer', array($this, 'recording_modal'));
    }

    public function register_settings() {
        register_setting('wc_product_recording_options', 'wc_product_recording_settings', array($this, 'sanitize_settings'));
        
        add_settings_section('wc_product_recording_main', 'Ustawienia Nagrywania Produktów', array($this, 'settings_section_text'), 'wc-product-recording');
        
        add_settings_field('notification_email', 'Email Odbiorcy', array($this, 'email_field_render'), 'wc-product-recording', 'wc_product_recording_main');
        add_settings_field('button_color', 'Kolor Przycisku', array($this, 'color_field_render'), 'wc-product-recording', 'wc_product_recording_main');
        add_settings_field('modal_color', 'Kolor Modala', array($this, 'modal_color_render'), 'wc-product-recording', 'wc_product_recording_main');
        add_settings_field('max_duration', 'Maksymalny czas nagrania (sekundy)', array($this, 'max_duration_render'), 'wc-product-recording', 'wc_product_recording_main');
    }

    public function sanitize_settings($input) {
        $input['notification_email'] = sanitize_email($input['notification_email']);
        $input['button_color'] = sanitize_hex_color($input['button_color']);
        $input['modal_color'] = sanitize_hex_color($input['modal_color']);
        $input['max_duration'] = absint($input['max_duration']);
        return $input;
    }

    public function settings_section_text() {
        echo '<p>Konfiguracja funkcji nagrywania wiadomości dla produktów</p>';
    }

    public function email_field_render() {
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        ?>
        <input type='email' name='wc_product_recording_settings[notification_email]' value='<?php echo esc_attr($email); ?>' class='regular-text'>
        <?php
    }

    public function color_field_render() {
        $color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
        ?>
        <input type='color' name='wc_product_recording_settings[button_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }

    public function modal_color_render() {
        $color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
        ?>
        <input type='color' name='wc_product_recording_settings[modal_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }

    public function max_duration_render() {
        $duration = isset($this->options['max_duration']) ? $this->options['max_duration'] : 120;
        ?>
        <input type='number' name='wc_product_recording_settings[max_duration]' value='<?php echo esc_attr($duration); ?>' min='10' max='600'>
        <?php
    }

    public function add_admin_menu() {
        add_options_page('Ustawienia Nagrywania Produktów', 'Nagrywanie Produktów', 'manage_options', 'wc-product-recording', array($this, 'admin_page_content'));
    }

    public function admin_page_content() {
        ?>
        <div class="wrap">
            <h1>Ustawienia Nagrywania Produktów</h1>
            <form method="post" action="options.php">
                <?php
                settings_fields('wc_product_recording_options');
                do_settings_sections('wc-product-recording');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }

    public function enqueue_scripts() {
        if (is_cart() || is_checkout()) {
            $button_color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
            $modal_color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';

            wp_enqueue_style('wc-recording-style', plugin_dir_url(__FILE__) . 'assets/css/recording.css', array(), '2.0');

            $custom_css = "
                .wc-record-button {
                    background-color: {$button_color} !important;
                    border-color: {$button_color} !important;
                }
                .wc-recording-modal {
                    background: {$modal_color} !important;
                }
                .wc-recording-modal-header {
                    background: {$button_color} !important;
                }
            ";
            wp_add_inline_style('wc-recording-style', $custom_css);
            
            wp_enqueue_script('recordrtc', 'https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.min.js', array(), '5.6.2', true);
            wp_enqueue_script('wc-product-recording', plugin_dir_url(__FILE__) . 'assets/js/recording.js', array('jquery', 'recordrtc'), '2.0', true);
            wp_localize_script('wc-product-recording', 'wc_recording_params', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'recording_nonce' => wp_create_nonce('save_recording_nonce'),
                'warning_text' => __('Prosimy o ciszę w tle podczas nagrywania wiadomości.', 'woocommerce'),
                'recording_text' => __('Nagrywanie w toku...', 'woocommerce'),
                'stop_text' => __('Zatrzymaj nagrywanie', 'woocommerce'),
                'start_audio_text' => __('Nagraj wiadomość audio', 'woocommerce'),
                'start_video_text' => __('Nagraj wiadomość wideo', 'woocommerce'),
                'play_text' => __('Odtwórz nagranie', 'woocommerce'),
                'delete_text' => __('Usuń nagranie', 'woocommerce'),
                'submit_text' => __('Zapisz nagranie', 'woocommerce'),
                'audio_placeholder' => __('Brak nagrania audio', 'woocommerce'),
                'video_placeholder' => __('Brak nagrania wideo', 'woocommerce'),
                'max_time' => isset($this->options['max_duration']) ? $this->options['max_duration'] : 120,
                'audio_only' => __('Tylko audio', 'woocommerce'),
                'video_with_audio' => __('Wideo z audio', 'woocommerce')
            ));
        }
    }

    public function add_recording_button($product_name, $cart_item, $cart_item_key) {
        if (is_cart() || is_checkout()) {
            $product_id = $cart_item['product_id'];
            $recording_key = 'recording_' . md5($cart_item_key);
            
            $button_html = '<div class="wc-recording-container">';
            $button_html .= '<button type="button" class="button wc-record-button" ';
            $button_html .= 'data-product-id="' . esc_attr($product_id) . '" ';
            $button_html .= 'data-cart-key="' . esc_attr($cart_item_key) . '" ';
            $button_html .= 'data-recording-key="' . esc_attr($recording_key) . '">';
            $button_html .= __('Nagraj wiadomość', 'woocommerce') . '</button>';

            $recording_id = isset($cart_item['recording_id']) ? $cart_item['recording_id'] : '';
            $button_html .= '<input type="hidden" name="cart_recording[' . esc_attr($cart_item_key) . ']" ';
            $button_html .= 'id="recording_' . esc_attr($cart_item_key) . '" value="' . esc_attr($recording_id) . '">';
            
            $button_html .= '</div>';
            
            return $product_name . $button_html;
        }
        return $product_name;
    }

    public function recording_modal() {
        if (is_cart() || is_checkout()) {
            ?>
            <div id="wc-recording-modal" class="wc-recording-modal">
                <div class="wc-recording-modal-header">
                    <h3><?php _e('Nagraj wiadomość', 'woocommerce'); ?></h3>
                    <span class="wc-recording-close">&times;</span>
                </div>
                <div class="wc-recording-modal-body">
                    <div id="wc-recording-alert" class="woocommerce-message"></div>
                    
                    <div class="wc-recording-type-selector">
                        <button type="button" id="wc-start-audio" class="button">
                            <?php _e('Nagraj wiadomość audio', 'woocommerce'); ?>
                        </button>
                        <button type="button" id="wc-start-video" class="button">
                            <?php _e('Nagraj wiadomość wideo', 'woocommerce'); ?>
                        </button>
                    </div>
                    
                    <div id="wc-recording-controls" style="display:none;">
                        <button type="button" id="wc-stop-recording" class="button">
                            <?php _e('Zatrzymaj nagrywanie', 'woocommerce'); ?>
                        </button>
                        <div id="wc-recording-timer">00:00</div>
                    </div>
                    
                    <div id="wc-recording-preview" style="display:none;">
                        <h4><?php _e('Podgląd nagrania', 'woocommerce'); ?></h4>
                        <audio id="wc-audio-preview" controls style="width:100%;"></audio>
                        <video id="wc-video-preview" controls style="width:100%; max-height:300px; display:none;"></video>
                        
                        <div class="wc-recording-actions">
                            <button type="button" id="wc-submit-recording" class="button button-primary">
                                <?php _e('Zapisz nagranie', 'woocommerce'); ?>
                            </button>
                            <button type="button" id="wc-delete-recording" class="button">
                                <?php _e('Usuń nagranie', 'woocommerce'); ?>
                            </button>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="wc-current-product-id" value="">
                <input type="hidden" id="wc-current-cart-key" value="">
                <input type="hidden" id="wc-current-recording-key" value="">
            </div>
            <div id="wc-recording-modal-overlay" class="wc-recording-modal-overlay"></div>
            <?php
        }
    }

    public function save_recording_data($item, $cart_item_key, $values, $order) {
        if (!empty($values['recording_id'])) {
            $item->add_meta_data('_recording_id', $values['recording_id'], true);
        }
    }

    public function save_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_FILES['recording']) || !isset($_POST['cart_key']) || !isset($_POST['product_id'])) {
            wp_send_json_error(__('Brak wymaganych danych.', 'woocommerce'));
        }
        
        $upload_dir = wp_upload_dir();
        $recording_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        
        if (!file_exists($recording_dir)) {
            wp_mkdir_p($recording_dir);
        }
        
        $file_name = sanitize_file_name('recording_' . $_POST['cart_key'] . '_' . uniqid() . '.webm');
        $file_path = $recording_dir . '/' . $file_name;
        
        if (move_uploaded_file($_FILES['recording']['tmp_name'], $file_path)) {
            $recording_id = uniqid('rec_');
            $cart = WC()->cart;
            $cart_item = $cart->get_cart_item($_POST['cart_key']);
            
            if ($cart_item) {
                $cart->cart_contents[$_POST['cart_key']]['recording_id'] = $recording_id;
                $cart->set_session();
            }
            
            wp_send_json_success(array(
                'recording_id' => $recording_id,
                'file_name' => $file_name,
                'file_path' => $file_path
            ));
        } else {
            wp_send_json_error(__('Błąd podczas zapisywania nagrania.', 'woocommerce'));
        }
    }

    public function get_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_POST['cart_key'])) {
            wp_send_json_error(__('Brak klucza koszyka.', 'woocommerce'));
        }
        
        $cart = WC()->cart;
        $cart_item = $cart->get_cart_item($_POST['cart_key']);
        
        if (!$cart_item || !isset($cart_item['recording_id'])) {
            wp_send_json_error(__('Brak nagrania dla tego produktu.', 'woocommerce'));
        }
        
        wp_send_json_success(array(
            'recording_id' => $cart_item['recording_id']
        ));
    }

    public function process_recordings($order_id) {
        $order = wc_get_order($order_id);
        $upload_dir = wp_upload_dir();
        $recordings_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        
        $attachments = array();
        $message = "Nowe zamówienie zawiera następujące nagrania:\n\n";
        $has_recordings = false;
        
        foreach ($order->get_items() as $item_id => $item) {
            $recording_id = $item->get_meta('_recording_id');
            
            if ($recording_id) {
                $has_recordings = true;
                $product_name = $item->get_name();
                $message .= "Produkt: {$product_name}\n";
                
                $files = glob($recordings_dir . '/recording_*_' . $recording_id . '*.webm');
                
                if (!empty($files)) {
                    $old_path = $files[0];
                    $new_filename = sanitize_file_name('order_' . $order_id . '_item_' . $item_id . '_' . $recording_id . '.webm');
                    $new_path = $recordings_dir . '/' . $new_filename;
                    
                    if (rename($old_path, $new_path)) {
                        $attachments[] = $new_path;
                        $message .= "Nagranie: {$new_filename}\n\n";
                    }
                }
            }
        }
        
        if ($has_recordings) {
            $subject = sprintf(__('Nagrania do zamówienia #%s', 'woocommerce'), $order_id);
            $headers = array('Content-Type: text/plain; charset=UTF-8');
            
            wp_mail($email, $subject, $message, $headers, $attachments);
        }
    }
}

new WC_Product_Recording();
Plik: assets/js/recording.js

jQuery(document).ready(function($) {
    var mediaRecorder;
    var audioChunks = [];
    var videoChunks = [];
    var stream;
    var timerInterval;
    var recordingTime = 0;
    var currentCartKey = '';
    var currentProductId = '';
    var currentRecordingKey = '';
    var isAudioRecording = true;

    $(document).on('click', '.wc-record-button', function() {
        currentCartKey = $(this).data('cart-key');
        currentProductId = $(this).data('product-id');
        currentRecordingKey = $(this).data('recording-key');

        $('#wc-current-product-id').val(currentProductId);
        $('#wc-current-cart-key').val(currentCartKey);
        $('#wc-current-recording-key').val(currentRecordingKey);

        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: {
                action: 'get_product_recording',
                security: wc_recording_params.recording_nonce,
                cart_key: currentCartKey
            },
            success: function(response) {
                if (response.success && response.data.recording_id) {
                    $('#wc-recording-alert').text('Ten produkt ma już nagranie. Nowe nagranie zastąpi poprzednie.').show();
                } else {
                    $('#wc-recording-alert').text(wc_recording_params.warning_text).show();
                }
            }
        });

        $('#wc-recording-modal').show();
        $('#wc-recording-modal-overlay').show();
    });

    $('.wc-recording-close, #wc-recording-modal-overlay').click(function() {
        stopRecording();
        $('#wc-recording-modal').hide();
        $('#wc-recording-modal-overlay').hide();
        resetRecordingUI();
   Oto kontynuacja skryptu JavaScript (`assets/js/recording.js`), aby zakończyć funkcjonalność nagrywania audio/wideo oraz zamknąć modal:

### Kontynuacja pliku: `assets/js/recording.js`

```javascript
 });

 function startRecording() {
  if (isAudioRecording) {
   navigator.mediaDevices.getUserMedia({ audio: true })
   .then(function(streamParam) {
    stream = streamParam;
    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.start();
    
    mediaRecorder.ondataavailable = function(event) {
     audioChunks.push(event.data);
    };

    mediaRecorder.onstop = function() {
     const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
     audioChunks = [];

     const formData = new FormData();
     formData.append('recording', audioBlob, 'recording.webm');
     formData.append('cart_key', currentCartKey);
     formData.append('product_id', currentProductId);

     $.ajax({
      url: wc_recording_params.ajax_url,
      type: 'POST',
      data: formData,
      processData: false,
      contentType: false,
      success: function(response) {
       if (response.success) {
        $('#wc-recording-alert').text('Nagranie zapisano.').show();
        // Optionally handle the recording ID and UI updates here
       }
      }
     });
    };
    
    startTimer();
   });
  } else {
   // Wersja wideo, do implementacji według własnych wskazówek
   navigator.mediaDevices.getUserMedia({ video: true, audio: true })
   .then(function(streamParam) {
    stream = streamParam;
    mediaRecorder = new MediaRecorder(stream);
    mediaRecorder.start();
    
    mediaRecorder.ondataavailable = function(event) {
     videoChunks.push(event.data);
    };
   
    mediaRecorder.onstop = function() {
     const videoBlob = new Blob(videoChunks, { type: 'video/webm' });
     videoChunks = [];

     const formData = new FormData();
     formData.append('recording', videoBlob, 'recording.webm');
     formData.append('cart_key', currentCartKey);
     formData.append('product_id', currentProductId);

     $.ajax({
      url: wc_recording_params.ajax_url,
      type: 'POST',
      data: formData,
      processData: false,
      contentType: false,
      success: function(response) {
       if (response.success) {
        $('#wc-recording-alert').text('Nagranie zapisano.').show();
       }
      }
     });
    };

    startTimer();
   });
  }
 }

 function stopRecording() {
  mediaRecorder.stop();
  stream.getTracks().forEach(track => track.stop());
  clearInterval(timerInterval);
 }

 function startTimer() {
  recordingTime = 0;
  $('#wc-recording-controls').show();

  timerInterval = setInterval(function() {
   recordingTime++;
   var minutes = Math.floor(recordingTime / 60);
   var seconds = recordingTime % 60;
   $('#wc-recording-timer').text((minutes < 10 ? '0' : '') + minutes + ':' + (seconds < 10 ? '0' : '') + seconds);
  }, 1000);
 }

 function resetRecordingUI() {
  recordingTime = 0;
  $('#wc-recording-timer').text('00:00');
  $('#wc-recording-controls').hide();
 }

 $('#wc-start-audio').click(function() {
  isAudioRecording = true;
  startRecording();
 });

 $('#wc-start-video').click(function() {
  isAudioRecording = false;
  startRecording();
 });
});
Plik CSS (opcjonalnie): assets/css/recording.css

Możesz dostosować stylizację modalu, przycisków i innych elementów związanych z nagrywaniem:
.wc-recording-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    display: none;
}

.wc-recording-modal-header {
    background: #333;
    color: #fff;
    padding: 10px;
}

.wc-recording-modal-body {
    background: #fff;
    padding: 20px;
    border-radius: 5px;
}

#wc-recording-alert {
    margin-bottom: 15px;
    color: green;
}

.wc-recording-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: none;
}
Jak zainstalować wtyczkę


Skopiuj kod dla pliku woocommerce-product-recording.php do nowego pliku o tej samej nazwie w utworzonym folderze.

Skopiuj kod JavaScript do pliku recording.js w folderze assets/js/.

Skopiuj kod CSS do pliku recording.css w folderze assets/css/.

Przejdź do panelu WordPress (wtyczki) i aktywuj wtyczkę "WooCommerce Product Audio/Video Message".

Skonfiguruj ustawienia wtyczki w menu Ustawienia -> Nagrywanie Produktów.


Uwaga

Upewnij się, że masz zainstalowaną i aktywowaną wtyczkę WooCommerce, aby wtyczka działała prawidłowo oraz ujrzysz wszystkie wymagane funkcje w koszyku i na stronie kasowania.
przygotuj mi plik gotowy do pobrania i instalacji
GPT-4o Mini
Aby przygotować wtyczkę WordPress do pobrania i instalacji, musisz zebrać wszystkie pliki w odpowiedniej strukturze folderów, a następnie spakować je w plik ZIP. Poniżej znajdziesz instrukcje, jak to zrobić:
Krok 1: Przygotuj lokalną strukturę folderów


Stwórz folder o nazwie woocommerce-product-recording.

Wewnątrz tego folderu utwórz następujące podfoldery i pliki:


/woocommerce-product-recording/
├── assets/
│   ├── css/
│   │   └── recording.css
│   └── js/
│       └── recording.js
└── woocommerce-product-recording.php
Krok 2: Wypełnij pliki

1. Zawartość pliku woocommerce-product-recording.php

<?php
/*
 * Plugin Name: WooCommerce Product Audio/Video Message
 * Description: Allows customers to record personal audio/video messages for each product.
 * Version: 2.0
 * Author: Your Name
 */

if (!defined('ABSPATH')) exit;

class WC_Product_Recording {
 private $options;

 public function __construct() {
  $this->options = get_option('wc_product_recording_settings');
  
  add_action('admin_init', array($this, 'register_settings'));
  add_action('admin_menu', array($this, 'add_admin_menu'));
  add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
  add_filter('woocommerce_cart_item_name', array($this, 'add_recording_button'), 10, 3);
  add_action('woocommerce_checkout_create_order_line_item', array($this, 'save_recording_data'), 10, 4);
  add_action('woocommerce_payment_complete', array($this, 'process_recordings'));
  add_action('woocommerce_order_status_processing', array($this, 'process_recordings'));
  add_action('woocommerce_order_status_completed', array($this, 'process_recordings'));
  add_action('wp_ajax_save_product_recording', array($this, 'save_recording'));
  add_action('wp_ajax_nopriv_save_product_recording', array($this, 'save_recording'));
  add_action('wp_ajax_get_product_recording', array($this, 'get_recording'));
  add_action('wp_ajax_nopriv_get_product_recording', array($this, 'get_recording'));
  add_action('wp_footer', array($this, 'recording_modal'));
 }

 public function register_settings() {
  register_setting('wc_product_recording_options', 'wc_product_recording_settings', array($this, 'sanitize_settings'));
  
  add_settings_section('wc_product_recording_main', 'Ustawienia Nagrywania Produktów', array($this, 'settings_section_text'), 'wc-product-recording');
  
  add_settings_field('notification_email', 'Email Odbiorcy', array($this, 'email_field_render'), 'wc-product-recording', 'wc_product_recording_main');
  add_settings_field('button_color', 'Kolor Przycisku', array($this, 'color_field_render'), 'wc-product-recording', 'wc_product_recording_main');
  add_settings_field('modal_color', 'Kolor Modala', array($this, 'modal_color_render'), 'wc-product-recording', 'wc_product_recording_main');
  add_settings_field('max_duration', 'Maksymalny czas nagrania (sekundy)', array($this, 'max_duration_render'), 'wc-product-recording', 'wc_product_recording_main');
 }

 public function sanitize_settings($input) {
  $input['notification_email'] = sanitize_email($input['notification_email']);
  $input['button_color'] = sanitize_hex_color($input['button_color']);
  $input['modal_color'] = sanitize_hex_color($input['modal_color']);
  $input['max_duration'] = absint($input['max_duration']);
  return $input;
 }

 public function settings_section_text() {
  echo '<p>Konfiguracja funkcji nagrywania wiadomości dla produktów</p>';
 }

 public function email_field_render() {
  $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
  ?>
  <input type='email' name='wc_product_recording_settings[notification_email]' value='<?php echo esc_attr($email); ?>' class='regular-text'>
  <?php
 }

 public function color_field_render() {
  $color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
  ?>
  <input type='color' name='wc_product_recording_settings[button_color]' value='<?php echo esc_attr($color); ?>'>
  <?php
 }

 public function modal_color_render() {
  $color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
  ?>
  <input type='color' name='wc_product_recording_settings[modal_color]' value='<?php echo esc_attr($color); ?>'>
  <?php
 }

 public function max_duration_render() {
  $duration = isset($this->options['max_duration']) ? $this->options['max_duration'] : 120;
  ?>
  <input type='number' name='wc_product_recording_settings[max_duration]' value='<?php echo esc_attr($duration); ?>' min='10' max='600'>
  <?php
 }

 public function add_admin_menu() {
  add_options_page('Ustawienia Nagrywania Produktów', 'Nagrywanie Produktów', 'manage_options', 'wc-product-recording', array($this, 'admin_page_content'));
 }

 public function admin_page_content() {
  ?>
  <div class="wrap">
  <h1>Ustawienia Nagrywania Produktów</h1>
  <form method="post" action="options.php">
   <?php
   settings_fields('wc_product_recording_options');
   do_settings_sections('wc-product-recording');
   submit_button();
   ?>
  </form>
  </div>
  <?php
 }

 public function enqueue_scripts() {
  if (is_cart() || is_checkout()) {
  $button_color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
  $modal_color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';

  wp_enqueue_style('wc-recording-style', plugin_dir_url(__FILE__) . 'assets/css/recording.css', array(), '2.0');

  $custom_css = "
   .wc-record-button {
    background-color: {$button_color} !important;
    border-color: {$button_color} !important;
   }
   .wc-recording-modal {
    background: {$modal_color} !important;
   }
   .wc-recording-modal-header {
    background: {$button_color} !important;
   }
  ";
  wp_add_inline_style('wc-recording-style', $custom_css);
  
  wp_enqueue_script('recordrtc', 'https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.min.js', array(), '5.6.2', true);
  wp_enqueue_script('wc-product-recording', plugin_dir_url(__FILE__) . 'assets/js/recording.js', array('jquery', 'recordrtc'), '2.0', true);
  wp_localize_script('wc-product-recording', 'wc_recording_params', array(
   'ajax_url' => admin_url('admin-ajax.php'),
   'recording_nonce' => wp_create_nonce('save_recording_nonce'),
   'warning_text' => __('Prosimy o ciszę w tle podczas nagrywania wiadomości.', 'woocommerce'),
   'recording_text' => __('Nagrywanie w toku...', 'woocommerce'),
   'stop_text' => __('Zatrzymaj nagrywanie', 'woocommerce'),
   'start_audio_text' => __('Nagraj wiadomość audio', 'woocommerce'),
   'start_video_text' => __('Nagraj wiadomość wideo', 'woocommerce'),
   'play_text' => __('Odtwórz nagranie', 'woocommerce'),
   'delete_text' => __('Usuń nagranie', 'woocommerce'),
   'submit_text' => __('Zapisz nagranie', 'woocommerce'),
   'audio_placeholder' => __('Brak nagrania audio', 'woocommerce'),
   'video_placeholder' => __('Brak nagrania wideo', 'woocommerce'),
   'max_time' => isset($this->options['max_duration']) ? $this->options['max_duration'] : 120,
   'audio_only' => __('Tylko audio', 'woocommerce'),
   'video_with_audio' => __('Wideo z audio', 'woocommerce')
  ));
  }
 }

 public function add_recording_button($product_name, $cart_item, $cart_item_key) {
  if (is_cart() || is_checkout()) {
  $product_id = $cart_item['product_id'];
  $recording_key = 'recording_' . md5($cart_item_key);
  
  $button_html = '<div class="wc-recording-container">';
  $button_html .= '<button type="button" class="button wc-record-button" ';
  $button_html .= 'data-product-id="' . esc_attr($product_id) . '" ';
  $button_html .= 'data-cart-key="' . esc_attr($cart_item_key) . '" ';
  $button_html .= 'data-recording-key="' . esc_attr($recording_key) . '">';
  $button_html .= __('Nagraj wiadomość', 'woocommerce') . '</button>';

  $recording_id = isset($cart_item['recording_id']) ? $cart_item['recording_id'] : '';
  $button_html .= '<input type="hidden" name="cart_recording[' . esc_attr($cart_item_key) . ']" ';
  $button_html .= 'id="recording_' . esc_attr($cart_item_key) . '" value="' . esc_attr($recording_id) . '">';
  
  $button_html .= '</div>';
  
  return $product_name . $button_html;
  }
  return $product_name;
 }

 public function recording_modal() {
  if (is_cart() || is_checkout()) {
  ?>
  <div id="wc-recording-modal" class="wc-recording-modal">
   <div class="wc-recording-modal-header">
    <h3><?php _e('Nagraj wiadomość', 'woocommerce'); ?></h3>
    <span class="wc-recording-close">&times;</span>
   </div>
   <div class="wc-recording-modal-body">
    <div id="wc-recording-alert" class="woocommerce-message"></div>
    
    <div class="wc-recording-type-selector">
    <button type="button" id="wc-start-audio" class="button">
     <?php _e('Nagraj wiadomość audio', 'woocommerce'); ?>
    </button>
    <button type="button" id="wc-start-video" class="button">
     <?php _e('Nagraj wiadomość wideo', 'woocommerce'); ?>
    </button>
    </div>
    
    <div id="wc-recording-controls" style="display:none;">
    <button type="button" id="wc-stop-recording" class="button">
     <?php _e('Zatrzymaj nagrywanie', 'woocommerce'); ?>
    </button>
    <div id="wc-recording-timer">00:00</div>
    </div>
    
    <div id="wc-recording-preview" style="display:none;">
    <h4><?php _e('Podgląd nagrania', 'woocommerce'); ?></h4>
    <audio id="wc-audio-preview" controls style="width:100%;"></audio>
    <video id="wc-video-preview" controls style="width:100%; max-height:300px; display:none;"></video>
    
    <div class="wc-recording-actions">
     <button type="button" id="wc-submit-recording" class="button button-primary">
      <?php _e('Zapisz nagranie', 'woocommerce'); ?>
     </button>
     <button type="button" id="wc-delete-recording" class="button">
      <?php _e('Usuń nagranie', 'woocommerce'); ?>
     </button>
    </div>
    </div>
   </div>
   <input type="hidden" id="wc-current-product-id" value="">
   <input type="hidden" id="wc-current-cart-key" value="">
   <input type="hidden" id="wc-current-recording-key" value="">
  </div>
  <div id="wc-recording-modal-overlay" class="wc-recording-modal-overlay"></div>
  <?php
  }
 }

 public function save_recording_data($item, $cart_item_key, $values, $order) {
  if (!empty($values['recording_id'])) {
  $item->add_meta_data('_recording_id', $values['recording_id'], true);
  }
 }

 public function save_recording() {
  check_ajax_referer('save_recording_nonce', 'security');
  
  if (!isset($_FILES['recording']) || !isset($_POST['cart_key']) || !isset($_POST['product_id'])) {
  wp_send_json_error(__('Brak wymaganych danych.', 'woocommerce'));
  }
  
  $upload_dir = wp_upload_dir();
  $recording_dir = $upload_dir['basedir'] . '/wc-product-recordings';
  
  if (!file_exists($recording_dir)) {
  wp_mkdir_p($recording_dir);
  }
  
  $file_name = sanitize_file_name('recording_' . $_POST['cart_key'] . '_' . uniqid() . '.webm');
  $file_path = $recording_dir . '/' . $file_name;
  
  if (move_uploaded_file($_FILES['recording']['tmp_name'], $file_path)) {
  $recording_id = uniqid('rec_');
  $cart = WC()->cart;
  $cart_item = $cart->get_cart_item($_POST['cart_key']);
  
  if ($cart_item) {
   $cart->cart_contents[$_POST['cart_key']]['recording_id'] = $recording_id;
   $cart->set_session();
  }
  
  wp_send_json_success(array(
   'recording_id' => $recording_id,
   'file_name' => $file_name,
   'file_path' => $file_path
  ));
  } else {
  wp_send_json_error(__('Błąd podczas zapisywania nagrania.', 'woocommerce'));
  }
 }

 public function get_recording() {
  check_ajax_referer('save_recording_nonce', 'security');
  
  if (!isset($_POST['cart_key'])) {
  wp_send_json_error(__('Brak klucza koszyka.', 'woocommerce'));
  }
  
  $cart = WC()->cart;
  $cart_item = $cart->get_cart_item($_POST['cart_key']);
  
  if (!$cart_item || !isset($cart_item['recording_id'])) {
  wp_send_json_error(__('Brak nagrania dla tego produktu.', 'woocommerce'));
  }
  
  wp_send_json_success(array(
  'recording_id' => $cart_item['recording_id']
  ));
 }

 public function process_recordings($order_id) {
  $order = wc_get_order($order_id);
  $upload_dir = wp_upload_dir();
  $recordings_dir = $upload_dir['basedir'] . '/wc-product-recordings';
  $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
  
  $attachments = array();
  $message = "Nowe zamówienie zawiera następujące nagrania:\n\n";
  $has_recordings = false;
  
  foreach ($order->get_items() as $item_id => $item) {
  $recording_id = $item->get_meta('_recording_id');
  
  if ($recording_id) {
   $has_recordings = true;
   $product_name = $item->get_name();
   $message .= "Produkt: {$product_name}\n";
   
   $files = glob($recordings_dir . '/recording_*_' . $recording_id . '*.webm');
   
   if (!empty($files)) {
    $old_path = $files[0];
    $new_filename = sanitize_file_name('order_' . $order_id . '_item_' . $item_id . '_' . $recording_id . '.webm');
    $new_path = $recordings_dir . '/' . $new_filename;
    
    if (rename($old_path, $new_path)) {
    $attachments[] = $new_path;
    $message .= "Nagranie: {$new_filename}\n\n";
    }
   }
  }
  }
  
  if ($has_recordings) {
  $subject = sprintf(__('Nagrania do zamówienia #%s', 'woocommerce'), $order_id);
  $headers = array('Content-Type: text/plain; charset=UTF-8');
  
  wp_mail($email, $subject, $message, $headers, $attachments);
  }
 }
}

new WC_Product_Recording();
2. Zawartość pliku assets/js/recording.js

jQuery(document).ready(function($) {
 var mediaRecorder;
 var audioChunks = [];
 var videoChunks = [];
 var stream;
 var timerInterval;
 var recordingTime = 0;
 var currentCartKey = '';
 var currentProductId = '';
 var currentRecordingKey = '';
 var isAudioRecording = true;

 $(document).on('click', '.wc-record-button', function() {
  currentCartKey = $(this).data('cart-key');
  currentProductId = $(this).data('product-id');
  currentRecordingKey = $(this).data('recording-key');

  $('#wc-current-product-id').val(currentProductId);
  $('#wc-current-cart-key').val(currentCartKey);
  $('#wc-current-recording-key').val(currentRecordingKey);

  $.ajax({
  url: wc_recording_params.ajax_url,
  type: 'POST',
  data: {
   action: 'get_product_recording',
   security: wc_recording_params.recording_nonce,
   cart_key: currentCartKey
  },
  success: function(response) {
   if (response.success && response.data.recording_id) {
    $('#wc-recording-alert').text('Ten produkt ma już nagranie. Nowe nagranie zastąpi poprzednie.').show();
   } else {
    $('#wc-recording-alert').text(wc_recording_params.warning_text).show();
   }
  }
  });

  $('#wc-recording-modal').show();
  $('#wc-recording-modal-overlay').show();
 });

 $('.wc-recording-close, #wc-recording-modal-overlay').click(function() {
  stopRecording();
  $('#wc-recording-modal').hide();
  $('#wc-recording-modal-overlay').hide();
  resetRecordingUI();
 });

 function startRecording() {
 if (isAudioRecording) {
 navigator.mediaDevices.getUserMedia({ audio: true })
 .then(function(stream

 Continue generating
Grok 3 Mini
coin image
30
Upgrade




Ask me anything...



Powered by AITOPIA 
Chat
Ask
Search
Write
Image
ChatFile
Vision
Full Page

44779@HP-Laptop MINGW64 /c/oremus-web (main)
$ npx supabase init
npx supabase db push
Need to install the following packages:
supabase@2.24.3
Ok to proceed? (y) y
npm warn deprecated node-domexception@1.0.0: Use your platform's native DOMException instead
Need to install the following packages:
supabase@2.24.3
Ok to proceed? (y) y
npm warn deprecated node-domexception@1.0.0: Use your platform's native DOMException instead
npm warn cleanup Failed to remove some directories [
npm warn cleanup   [
npm warn cleanup     '\\\\?\\C:\\Users\\44779\\AppData\\Local\\npm-cache\\_npx\\aa8e5c70f9d8d161\\node_modules',
npm warn cleanup     [Error: EPERM: operation not permitted, rmdir 'C:\Users\44779\AppData\Local\npm-cache\_npx\aa8e5c70f9d8d161\node_modules\signal-exit\dist\cjs'] {
npm warn cleanup       errno: -4048,
npm warn cleanup       code: 'EPERM',
npm warn cleanup       syscall: 'rmdir',
npm warn cleanup       path: 'C:\\Users\\44779\\AppData\\Local\\npm-cache\\_npx\\aa8e5c70f9d8d161\\node_modules\\signal-exit\\dist\\cjs'
npm warn cleanup     }
npm warn cleanup   ]
npm warn cleanup ]
44779@HP-Laptop MINGW64 /c/oremus-web (main)
$ npm install
npm error code EJSONPARSE
npm error path C:\oremus-web/package.json
npm error JSON.parse Unexpected token "/" (0x2F), "// package"... is not valid JSON while parsing '// package.json 
npm error JSON.parse {
npm error JSON.parse   "name": "oremus-web"'
npm error JSON.parse Failed to parse JSON data.
npm error JSON.parse Note: package.json must be actual JSON, not just JavaScript.
npm error A complete log of this run can be found in: C:\Users\44779\AppData\Local\npm-cache\_logs\2025-06-13T05_41_15_799Z-debug-0.log
44779@HP-Laptop MINGW64 /c/oremus-web (main)

Edit
The issue is with your package.json file - it contains JavaScript-style comments (//) which aren't valid in JSON format. JSON doesn't support comments.

You need to remove the comment from your package.json file. Change this:

json
// package.json 
{
  "name": "oremus-web"
To this:

json
{
  "name": "oremus-web"
Just delete the // package.json line entirely. JSON files must be pure JSON syntax without any comments.

After fixing that, you should be able to run npm install successfully. If there are other comments in the file (lines starting with //), remove those as well.




$ npm install
npm error code EJSONPARSE
npm error path C:\oremus-web/package.json
npm error JSON.parse Unexpected non-whitespace character after JSON at position 2190 (line 77 column 1) while parsing near "...: \"^14.1.0\"\n  }\n}\n\n\n# Supabase\nNEXT_PUBL..."
npm error JSON.parse Failed to parse JSON data.
npm error JSON.parse Note: package.json must be actual JSON, not just JavaScript.
npm error A complete log of this run can be found in: C:\Users\44779\AppData\Local\npm-cache\_logs\2025-06-13T05_43_30_743Z-debug-0.log
44779@HP-Laptop MINGW64 /c/oremus-web (main)

Edit
The error shows that there's invalid content after the JSON ends. It looks like there's a # Supabase comment and NEXT_PUBL... content that doesn't belong in your package.json file.

Your package.json should end with just the closing brace }. The error indicates that after line 77 (which should be the end of your JSON), there's additional content that looks like:

}

# Supabase
NEXT_PUBL...
You need to:

Open your package.json file
Find where the JSON actually ends (should be a closing })
Delete everything after that closing brace
The # Supabase and NEXT_PUBL... content looks like it might be environment variables or configuration that accidentally got added to your package.json. This content should probably be in a .env file instead.

After cleaning up the package.json to contain only valid JSON, you should be able to run npm install successfully.




44779@HP-Laptop MINGW64 /c/oremus-web (main)
$ npm install
npm error code EJSONPARSE
npm error path C:\oremus-web/package.json
npm error JSON.parse Unexpected non-whitespace character after JSON at position 2190 (line 77 column 1) while parsing near "...: \"^14.1.0\"\n  }\n}\n\n\n# Supabase\nNEXT_PUBL..."
npm error JSON.parse Failed to parse JSON data.
npm error JSON.parse Note: package.json must be actual JSON, not just JavaScript.
npm error A complete log of this run can be found in: C:\Users\44779\AppData\Local\npm-cache\_logs\2025-06-13T05_45_51_117Z-debug-0.log
44779@HP-Laptop MINGW64 /c/oremus-web (main)

Edit
You still have the same issue - there's content after the JSON in your package.json file that shouldn't be there. You need to manually edit the file to remove the extra content.

Here's how to fix it:

Open your package.json file in a text editor (VS Code, Notepad++, etc.)
Look for the end of the JSON structure. It should look something like:
json
{
  "name": "oremus-web",
  // ... other content ...
  "dependencies": {
    // ... dependencies ...
    "something": "^14.1.0"
  }
}
After the final closing brace }, delete everything else. Based on the error, you have something like:
}


# Supabase
NEXT_PUBL...
The file should end cleanly with just the closing } and nothing after it.
If you're not sure where the JSON ends, you can:

Use a JSON validator online to check your file
Or share the content around line 77 of your package.json and I can help you identify what needs to be removed
The extra content (starting with # Supabase) looks like it belongs in a .env file or similar configuration file, not in package.json.




{
  "name": "oremus-web",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit",
    "format": "prettier --write .",
    "test": "jest --watch",
    "test:ci": "jest",
    "analyze": "ANALYZE=true next build",
    "postinstall": "prisma generate"
  },
  "dependencies": {
    "next": "14.1.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@supabase/supabase-js": "^2.39.0",
    "@supabase/auth-helpers-nextjs": "^0.8.7",
    "@supabase/auth-helpers-react": "^0.4.2",
    "framer-motion": "^11.0.0",
    "react-hook-form": "^7.49.0",
    "zod": "^3.22.4",
    "@hookform/resolvers": "^3.3.4",
    "zustand": "^4.5.0",
    "swr": "^2.2.4",
    "@tanstack/react-query": "^5.18.0",
    "date-fns": "^3.3.0",
    "lucide-react": "^0.323.0",
    "clsx": "^2.1.0",
    "tailwind-merge": "^2.2.0",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-toast": "^1.1.5",
    "@radix-ui/react-checkbox": "^1.0.4",
    "@radix-ui/react-select": "^2.0.0",
    "react-hot-toast": "^2.4.1",
    "react-intersection-observer": "^9.5.3",
    "react-parallax": "^3.5.1",
    "mapbox-gl": "^3.1.0",
    "@stripe/stripe-js": "^2.4.0",
    "stripe": "^14.14.0",
    "react-player": "^2.14.1",
    "socket.io-client": "^4.7.4",
    "@vercel/analytics": "^1.1.2",
    "@sentry/nextjs": "^7.99.0"
  },
  "devDependencies": {
    "@types/node": "^20.11.5",
    "@types/react": "^18.2.48",
    "@types/react-dom": "^18.2.18",
    "@types/mapbox-gl": "^2.7.19",
    "typescript": "^5.3.3",
    "eslint": "^8.56.0",
    "eslint-config-next": "14.1.0",
    "prettier": "^3.2.4",
    "tailwindcss": "^3.4.1",
    "autoprefixer": "^10.4.17",
    "postcss": "^8.4.33",
    "@tailwindcss/forms": "^0.5.7",
    "@tailwindcss/typography": "^0.5.10",
    "tailwindcss-animate": "^1.0.7",
    "@testing-library/react": "^14.1.2",
    "@testing-library/jest-dom": "^6.2.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "@next/bundle-analyzer": "^14.1.0"
  }
}

Edit
The JSON looks correct, but based on the error message, there's still content after the closing brace that you haven't shown. The error specifically mentions content starting with # Supabase and NEXT_PUBL... after the JSON.

You need to check if there's anything after the final } in your actual file. Open your package.json file and make sure it ends exactly like this:

json
    "@next/bundle-analyzer": "^14.1.0"
  }
}
And there should be nothing after that final closing brace - no extra lines, no comments, no environment variables, nothing.

If you're still getting the error after ensuring the file ends cleanly, try this:

Copy the JSON content you just shared
Delete your current package.json file
Create a new package.json file
Paste the content and save
This will ensure there's no hidden characters or extra content causing the parsing error.

The # Supabase and NEXT_PUBL... content that was mentioned in the error should be moved to a .env.local or .env file if it contains environment variables.




to jest moj plik

Edit
Widzę, że to jest Twój plik package.json. Wygląda on poprawnie jako JSON, ale błąd nadal wskazuje, że jest dodatkowa zawartość po zamykającym nawiasie }.

Sprawdź czy w Twoim rzeczywistym pliku package.json nie ma niczego po ostatnim }. Błąd mówi o treści zaczynającej się od # Supabase i NEXT_PUBL... po JSONie.

Żeby to naprawić:

Otwórz plik package.json w edytorze
Przewiń na sam dół pliku
Upewnij się, że plik kończy się dokładnie na }
Usuń wszystko co jest po tym znaku
Jeśli nadal masz problem, możesz:

Skopiować ten JSON który pokazałeś
Usunąć obecny plik package.json
Stworzyć nowy plik package.json
Wkleić zawartość i zapisać
Dodatkowa zawartość (jak # Supabase i zmienne środowiskowe) powinna być w pliku .env lub .env.local, nie w package.json.










Chat

New Conversation

🤓 Explain a complex thing

Explain Artificial Intelligence so that I can explain it to my six-year-old child.


🧠 Get suggestions and create new ideas

Please give me the best 10 travel ideas around the world


💭 Translate, summarize, fix grammar and more…

Translate "I love you" French


GPT-4o Mini
Hello, how can I help you today?
# Poprawiona Wtyczka WooCommerce do Nagrywania Wiadomości Audio/Video

Poniżej przedstawiam poprawioną wersję wtyczki, która:

1. Dodaje panel sterowania z możliwością ustawienia kolorów i odbiorcy email
2. Wyświetla przycisk "Nagraj wiadomość" przy każdym produkcie w koszyku
3. Pozwala na personalizację każdego produktu osobną wiadomością
4. Zapewnia lepszą jakość dźwięku

## 1. Główny kod wtyczki (stwórz plik `woocommerce-product-recording.php`)

```php
<?php
/*
 * Plugin Name: WooCommerce Product Audio/Video Message
 * Description: Allows customers to record personal audio/video messages for each product
 * Version: 2.0
 * Author: Your Name
 */

if (!defined('ABSPATH')) exit;

class WC_Product_Recording {
    private $options;
    
    public function __construct() {
        $this->options = get_option('wc_product_recording_settings');
        
        // Initialize settings
        add_action('admin_init', array($this, 'register_settings'));
        add_action('admin_menu', array($this, 'add_admin_menu'));
        
        // Enqueue scripts and styles
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        
        // Add recording button to cart items
        add_filter('woocommerce_cart_item_name', array($this, 'add_recording_button'), 10, 3);
        
        // Save recording data
        add_action('woocommerce_checkout_create_order_line_item', array($this, 'save_recording_data'), 10, 4);
        
        // Process recordings after payment
        add_action('woocommerce_payment_complete', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_processing', array($this, 'process_recordings'));
        add_action('woocommerce_order_status_completed', array($this, 'process_recordings'));
        
        // AJAX handlers
        add_action('wp_ajax_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_nopriv_save_product_recording', array($this, 'save_recording'));
        add_action('wp_ajax_get_product_recording', array($this, 'get_recording'));
        add_action('wp_ajax_nopriv_get_product_recording', array($this, 'get_recording'));
        
        // Add recording modal to footer
        add_action('wp_footer', array($this, 'recording_modal'));
    }
    
    public function register_settings() {
        register_setting('wc_product_recording_options', 'wc_product_recording_settings', array($this, 'sanitize_settings'));
        
        add_settings_section(
            'wc_product_recording_main',
            'Ustawienia Nagrywania Produktów',
            array($this, 'settings_section_text'),
            'wc-product-recording'
        );
        
        add_settings_field(
            'notification_email',
            'Email Odbiorcy',
            array($this, 'email_field_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'button_color',
            'Kolor Przycisku',
            array($this, 'color_field_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'modal_color',
            'Kolor Modala',
            array($this, 'modal_color_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
        
        add_settings_field(
            'max_duration',
            'Maksymalny czas nagrania (sekundy)',
            array($this, 'max_duration_render'),
            'wc-product-recording',
            'wc_product_recording_main'
        );
    }
    
    public function sanitize_settings($input) {
        $input['notification_email'] = sanitize_email($input['notification_email']);
        $input['button_color'] = sanitize_hex_color($input['button_color']);
        $input['modal_color'] = sanitize_hex_color($input['modal_color']);
        $input['max_duration'] = absint($input['max_duration']);
        return $input;
    }
    
    public function settings_section_text() {
        echo '<p>Konfiguracja funkcji nagrywania wiadomości dla produktów</p>';
    }
    
    public function email_field_render() {
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        ?>
        <input type='email' name='wc_product_recording_settings[notification_email]' value='<?php echo esc_attr($email); ?>' class='regular-text'>
        <?php
    }
    
    public function color_field_render() {
        $color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
        ?>
        <input type='color' name='wc_product_recording_settings[button_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function modal_color_render() {
        $color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
        ?>
        <input type='color' name='wc_product_recording_settings[modal_color]' value='<?php echo esc_attr($color); ?>'>
        <?php
    }
    
    public function max_duration_render() {
        $duration = isset($this->options['max_duration']) ? $this->options['max_duration'] : 120;
        ?>
        <input type='number' name='wc_product_recording_settings[max_duration]' value='<?php echo esc_attr($duration); ?>' min='10' max='600'>
        <?php
    }
    
    public function add_admin_menu() {
        add_options_page(
            'Ustawienia Nagrywania Produktów',
            'Nagrywanie Produktów',
            'manage_options',
            'wc-product-recording',
            array($this, 'admin_page_content')
        );
    }
    
    public function admin_page_content() {
        ?>
        <div class="wrap">
            <h1>Ustawienia Nagrywania Produktów</h1>
            <form method="post" action="options.php">
                <?php
                settings_fields('wc_product_recording_options');
                do_settings_sections('wc-product-recording');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }
    
    public function enqueue_scripts() {
        if (is_cart() || is_checkout()) {
            $button_color = isset($this->options['button_color']) ? $this->options['button_color'] : '#337ab7';
            $modal_color = isset($this->options['modal_color']) ? $this->options['modal_color'] : '#f8f8f8';
            
            wp_enqueue_style(
                'wc-recording-style',
                plugin_dir_url(__FILE__) . 'assets/css/recording.css',
                array(),
                '2.0'
            );
            
            // Dynamic CSS with settings
            $custom_css = "
                .wc-record-button {
                    background-color: {$button_color} !important;
                    border-color: {$button_color} !important;
                }
                .wc-recording-modal {
                    background: {$modal_color} !important;
                }
                .wc-recording-modal-header {
                    background: {$button_color} !important;
                }
            ";
            wp_add_inline_style('wc-recording-style', $custom_css);
            
            wp_enqueue_script(
                'recordrtc',
                'https://cdnjs.cloudflare.com/ajax/libs/RecordRTC/5.6.2/RecordRTC.min.js',
                array(),
                '5.6.2',
                true
            );
            
            wp_enqueue_script(
                'wc-product-recording',
                plugin_dir_url(__FILE__) . 'assets/js/recording.js',
                array('jquery', 'recordrtc'),
                '2.0',
                true
            );
            
            wp_localize_script('wc-product-recording', 'wc_recording_params', array(
                'ajax_url' => admin_url('admin-ajax.php'),
                'recording_nonce' => wp_create_nonce('save_recording_nonce'),
                'warning_text' => __('Prosimy o ciszę w tle podczas nagrywania wiadomości.', 'woocommerce'),
                'recording_text' => __('Nagrywanie w toku...', 'woocommerce'),
                'stop_text' => __('Zatrzymaj nagrywanie', 'woocommerce'),
                'start_audio_text' => __('Nagraj wiadomość audio', 'woocommerce'),
                'start_video_text' => __('Nagraj wiadomość wideo', 'woocommerce'),
                'play_text' => __('Odtwórz nagranie', 'woocommerce'),
                'delete_text' => __('Usuń nagranie', 'woocommerce'),
                'submit_text' => __('Zapisz nagranie', 'woocommerce'),
                'audio_placeholder' => __('Brak nagrania audio', 'woocommerce'),
                'video_placeholder' => __('Brak nagrania wideo', 'woocommerce'),
                'max_time' => isset($this->options['max_duration']) ? $this->options['max_duration'] : 120,
                'audio_only' => __('Tylko audio', 'woocommerce'),
                'video_with_audio' => __('Wideo z audio', 'woocommerce')
            ));
        }
    }
    
    public function add_recording_button($product_name, $cart_item, $cart_item_key) {
        if (is_cart() || is_checkout()) {
            $product_id = $cart_item['product_id'];
            $recording_key = 'recording_' . md5($cart_item_key);
            
            $button_html = '<div class="wc-recording-container">';
            $button_html .= '<button type="button" class="button wc-record-button" ';
            $button_html .= 'data-product-id="' . esc_attr($product_id) . '" ';
            $button_html .= 'data-cart-key="' . esc_attr($cart_item_key) . '" ';
            $button_html .= 'data-recording-key="' . esc_attr($recording_key) . '">';
            $button_html .= __('Nagraj wiadomość', 'woocommerce') . '</button>';
            
            // Add hidden field for the recording ID
            $recording_id = isset($cart_item['recording_id']) ? $cart_item['recording_id'] : '';
            $button_html .= '<input type="hidden" name="cart_recording[' . esc_attr($cart_item_key) . ']" ';
            $button_html .= 'id="recording_' . esc_attr($cart_item_key) . '" value="' . esc_attr($recording_id) . '">';
            
            $button_html .= '</div>';
            
            return $product_name . $button_html;
        }
        
        return $product_name;
    }
    
    public function recording_modal() {
        if (is_cart() || is_checkout()) {
            ?>
            <div id="wc-recording-modal" class="wc-recording-modal">
                <div class="wc-recording-modal-header">
                    <h3><?php _e('Nagraj wiadomość', 'woocommerce'); ?></h3>
                    <span class="wc-recording-close">&times;</span>
                </div>
                <div class="wc-recording-modal-body">
                    <div id="wc-recording-alert" class="woocommerce-message"></div>
                    
                    <div class="wc-recording-type-selector">
                        <button type="button" id="wc-start-audio" class="button">
                            <?php _e('Nagraj wiadomość audio', 'woocommerce'); ?>
                        </button>
                        <button type="button" id="wc-start-video" class="button">
                            <?php _e('Nagraj wiadomość wideo', 'woocommerce'); ?>
                        </button>
                    </div>
                    
                    <div id="wc-recording-controls" style="display:none;">
                        <button type="button" id="wc-stop-recording" class="button">
                            <?php _e('Zatrzymaj nagrywanie', 'woocommerce'); ?>
                        </button>
                        <div id="wc-recording-timer">00:00</div>
                    </div>
                    
                    <div id="wc-recording-preview" style="display:none;">
                        <h4><?php _e('Podgląd nagrania', 'woocommerce'); ?></h4>
                        <audio id="wc-audio-preview" controls style="width:100%;"></audio>
                        <video id="wc-video-preview" controls style="width:100%; max-height:300px; display:none;"></video>
                        
                        <div class="wc-recording-actions">
                            <button type="button" id="wc-submit-recording" class="button button-primary">
                                <?php _e('Zapisz nagranie', 'woocommerce'); ?>
                            </button>
                            <button type="button" id="wc-delete-recording" class="button">
                                <?php _e('Usuń nagranie', 'woocommerce'); ?>
                            </button>
                        </div>
                    </div>
                </div>
                <input type="hidden" id="wc-current-product-id" value="">
                <input type="hidden" id="wc-current-cart-key" value="">
                <input type="hidden" id="wc-current-recording-key" value="">
            </div>
            <div id="wc-recording-modal-overlay" class="wc-recording-modal-overlay"></div>
            <?php
        }
    }
    
    public function save_recording_data($item, $cart_item_key, $values, $order) {
        if (!empty($values['recording_id'])) {
            $item->add_meta_data('_recording_id', $values['recording_id'], true);
        }
    }
    
    public function save_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_FILES['recording']) || !isset($_POST['cart_key']) || !isset($_POST['product_id'])) {
            wp_send_json_error(__('Brak wymaganych danych.', 'woocommerce'));
        }
        
        $upload_dir = wp_upload_dir();
        $recording_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        
        if (!file_exists($recording_dir)) {
            wp_mkdir_p($recording_dir);
        }
        
        $file_name = sanitize_file_name('recording_' . $_POST['cart_key'] . '_' . uniqid() . '.webm');
        $file_path = $recording_dir . '/' . $file_name;
        
        if (move_uploaded_file($_FILES['recording']['tmp_name'], $file_path)) {
            $recording_id = uniqid('rec_');
            
            // Store recording info in cart item
            $cart = WC()->cart;
            $cart_item = $cart->get_cart_item($_POST['cart_key']);
            
            if ($cart_item) {
                $cart->cart_contents[$_POST['cart_key']]['recording_id'] = $recording_id;
                $cart->set_session();
            }
            
            wp_send_json_success(array(
                'recording_id' => $recording_id,
                'file_name' => $file_name,
                'file_path' => $file_path
            ));
        } else {
            wp_send_json_error(__('Błąd podczas zapisywania nagrania.', 'woocommerce'));
        }
    }
    
    public function get_recording() {
        check_ajax_referer('save_recording_nonce', 'security');
        
        if (!isset($_POST['cart_key'])) {
            wp_send_json_error(__('Brak klucza koszyka.', 'woocommerce'));
        }
        
        $cart = WC()->cart;
        $cart_item = $cart->get_cart_item($_POST['cart_key']);
        
        if (!$cart_item || !isset($cart_item['recording_id'])) {
            wp_send_json_error(__('Brak nagrania dla tego produktu.', 'woocommerce'));
        }
        
        wp_send_json_success(array(
            'recording_id' => $cart_item['recording_id']
        ));
    }
    
    public function process_recordings($order_id) {
        $order = wc_get_order($order_id);
        $upload_dir = wp_upload_dir();
        $recordings_dir = $upload_dir['basedir'] . '/wc-product-recordings';
        $email = isset($this->options['notification_email']) ? $this->options['notification_email'] : get_option('admin_email');
        
        $attachments = array();
        $message = "Nowe zamówienie zawiera następujące nagrania:\n\n";
        $has_recordings = false;
        
        foreach ($order->get_items() as $item_id => $item) {
            $recording_id = $item->get_meta('_recording_id');
            
            if ($recording_id) {
                $has_recordings = true;
                $product_name = $item->get_name();
                $message .= "Produkt: {$product_name}\n";
                
                // Find the recording file
                $files = glob($recordings_dir . '/recording_*_' . $recording_id . '*.webm');
                
                if (!empty($files)) {
                    $old_path = $files[0];
                    $new_filename = sanitize_file_name(
                        'order_' . $order_id . 
                        '_item_' . $item_id . 
                        '_' . $recording_id . '.webm'
                    );
                    $new_path = $recordings_dir . '/' . $new_filename;
                    
                    if (rename($old_path, $new_path)) {
                        $attachments[] = $new_path;
                        $message .= "Nagranie: {$new_filename}\n\n";
                    }
                }
            }
        }
        
        if ($has_recordings) {
            $subject = sprintf(__('Nagrania do zamówienia #%s', 'woocommerce'), $order_id);
            $headers = array('Content-Type: text/plain; charset=UTF-8');
            
            wp_mail($email, $subject, $message, $headers, $attachments);
        }
    }
}

new WC_Product_Recording();
```

## 2. JavaScript (`assets/js/recording.js`)

```javascript
jQuery(document).ready(function($) {
    var mediaRecorder;
    var audioChunks = [];
    var videoChunks = [];
    var stream;
    var timerInterval;
    var recordingTime = 0;
    var currentCartKey = '';
    var currentProductId = '';
    var currentRecordingKey = '';
    var isAudioRecording = true;
    
    // Open modal when recording button is clicked
    $(document).on('click', '.wc-record-button', function() {
        currentCartKey = $(this).data('cart-key');
        currentProductId = $(this).data('product-id');
        currentRecordingKey = $(this).data('recording-key');
        
        $('#wc-current-product-id').val(currentProductId);
        $('#wc-current-cart-key').val(currentCartKey);
        $('#wc-current-recording-key').val(currentRecordingKey);
        
        // Check if there's already a recording
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: {
                action: 'get_product_recording',
                security: wc_recording_params.recording_nonce,
                cart_key: currentCartKey
            },
            success: function(response) {
                if (response.success && response.data.recording_id) {
                    $('#wc-recording-alert').text('Ten produkt ma już nagranie. Nowe nagranie zastąpi poprzednie.').show();
                } else {
                    $('#wc-recording-alert').text(wc_recording_params.warning_text).show();
                }
            }
        });
        
        $('#wc-recording-modal').show();
        $('#wc-recording-modal-overlay').show();
    });
    
    // Close modal
    $('.wc-recording-close, #wc-recording-modal-overlay').click(function() {
        stopRecording();
        $('#wc-recording-modal').hide();
        $('#wc-recording-modal-overlay').hide();
        resetRecordingUI();
    });
    
    // Start audio recording
    $('#wc-start-audio').click(function() {
        startRecording(true);
    });
    
    // Start video recording
    $('#wc-start-video').click(function() {
        startRecording(false);
    });
    
    // Stop recording
    $('#wc-stop-recording').click(function() {
        stopRecording();
    });
    
    // Submit recording
    $('#wc-submit-recording').click(function() {
        submitRecording();
    });
    
    // Delete recording
    $('#wc-delete-recording').click(function() {
        deleteRecording();
    });
    
    function startRecording(audioOnly) {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert('Twoja przeglądarka nie obsługuje nagrywania lub nie udzieliłaś/eś wymaganych uprawnień.');
            return;
        }
        
        isAudioRecording = audioOnly;
        
        // Hide type selector, show controls
        $('.wc-recording-type-selector').hide();
        $('#wc-recording-controls').show();
        $('#wc-recording-preview').hide();
        
        $('#wc-recording-alert').text(wc_recording_params.recording_text + ' ' + 
            (audioOnly ? wc_recording_params.audio_only : wc_recording_params.video_with_audio)).show();
        
        var constraints = {
            audio: true,
            video: !audioOnly
        };
        
        navigator.mediaDevices.getUserMedia(constraints)
            .then(function(s) {
                stream = s;
                
                if (audioOnly) {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'audio',
                        mimeType: 'audio/webm',
                        recorderType: RecordRTC.StereoAudioRecorder,
                        desiredSampRate: 44100,
                        numberOfAudioChannels: 1,
                        disableLogs: true,
                        audioBitsPerSecond: 128000 // Higher quality audio
                    });
                } else {
                    mediaRecorder = new RecordRTC(s, {
                        type: 'video',
                        mimeType: 'video/webm;codecs=vp9',
                        disableLogs: true,
                        videoBitsPerSecond: 2500000,
                        audioBitsPerSecond: 128000
                    });
                }
                
                // Start timer
                recordingTime = 0;
                updateTimer();
                timerInterval = setInterval(function() {
                    recordingTime++;
                    updateTimer();
                    if (recordingTime >= wc_recording_params.max_time) {
                        stopRecording();
                    }
                }, 1000);
                
                mediaRecorder.startRecording();
            })
            .catch(function(err) {
                console.error('Error accessing media devices:', err);
                $('#wc-recording-alert').text('Błąd dostępu do mikrofonu/kamery: ' + err.message).show();
                resetRecordingUI();
            });
    }
    
    function updateTimer() {
        var minutes = Math.floor(recordingTime / 60);
        var seconds = recordingTime % 60;
        $('#wc-recording-timer').text(
            (minutes < 10 ? '0' + minutes : minutes) + ':' + 
            (seconds < 10 ? '0' + seconds : seconds)
        );
    }
    
    function stopRecording() {
        clearInterval(timerInterval);
        
        if (!mediaRecorder) return;
        
        mediaRecorder.stopRecording(function() {
            $('#wc-recording-alert').text('Nagranie zakończone. Możesz je odsłuchać/obejrzeć przed zapisem.').show();
            
            // Create preview
            var blob = mediaRecorder.getBlob();
            var url = URL.createObjectURL(blob);
            
            if (isAudioRecording) {
                $('#wc-audio-preview').attr('src', url).show();
                $('#wc-video-preview').hide();
            } else {
                $('#wc-video-preview').attr('src', url).show();
                $('#wc-audio-preview').hide();
            }
            
            $('#wc-recording-preview').show();
            
            // Stop all tracks
            if (stream) {
                stream.getTracks().forEach(function(track) {
                    track.stop();
                });
            }
        });
    }
    
    function submitRecording() {
        if (!mediaRecorder) {
            alert('Najpierw wykonaj nagranie');
            return;
        }
        
        var blob = mediaRecorder.getBlob();
        var formData = new FormData();
        formData.append('recording', blob, 'recording.webm');
        formData.append('action', 'save_product_recording');
        formData.append('security', wc_recording_params.recording_nonce);
        formData.append('cart_key', currentCartKey);
        formData.append('product_id', currentProductId);
        
        $('#wc-submit-recording').prop('disabled', true).text('Zapisywanie...');
        
        $.ajax({
            url: wc_recording_params.ajax_url,
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                if (response.success) {
                    $('#wc-recording-alert').text('Nagranie zostało zapisane do tego produktu.').show();
                    
                    // Update the hidden field in cart
                    $('#recording_' + currentCartKey).val(response.data.recording_id);
                    
                    // Close modal after 2 seconds
                    setTimeout(function() {
                        $('#wc-recording-modal').hide();
                        $('#wc-recording-modal-overlay').hide();
                        resetRecordingUI();
                    }, 2000);
                } else {
                    $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + response.data).show();
                    $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
                }
            },
            error: function(xhr, status, error) {
                $('#wc-recording-alert').text('Błąd podczas zapisywania nagrania: ' + error).show();
                $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
            }
        });
    }
    
    function deleteRecording() {
        // Just reset the UI, actual file will be overwritten on new submission
        resetRecordingUI();
        $('#recording_' + currentCartKey).val('');
        $('#wc-recording-alert').text('Nagranie zostało usunięte. Możesz nagrać nową wiadomość.').show();
    }
    
    function resetRecordingUI() {
        $('.wc-recording-type-selector').show();
        $('#wc-recording-controls').hide();
        $('#wc-recording-preview').hide();
        $('#wc-recording-timer').text('00:00');
        $('#wc-submit-recording').prop('disabled', false).text(wc_recording_params.submit_text);
        
        if (mediaRecorder) {
            mediaRecorder = null;
        }
        
        if (stream) {
            stream.getTracks().forEach(function(track) {
                track.stop();
            });
            stream = null;
        }
        
        clearInterval(timerInterval);
    }
});
```
